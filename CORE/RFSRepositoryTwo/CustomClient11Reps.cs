using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;
using Excel.FinancialFunctions;
using RFSRepository;

namespace RFSRepositoryTwo
{
    public class CustomClient11Reps
    {
        Host _host = new Host();


        public class LaporanOJK
        {
            public string KodeEmiten { get; set; }
            public string NamaEmiten { get; set; }
            public string SektorEkonomi { get; set; }
            public string Kategori { get; set; }
            public decimal Balance { get; set; }
            public decimal AYD { get; set; }
            public decimal AYDTahun { get; set; }
            public string SeriObligasi { get; set; }
            public string Peringkat { get; set; }
            public string Klaster { get; set; }
            public string KategoriSurat { get; set; }
            public string JenisReksadana { get; set; }
            public string ManagerInvestasi { get; set; }
            public decimal BalanceAmortize { get; set; }
            

        }
        public class AccruedInterestReport
        {
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string InstrumentTypeName { get; set; }
            public string MaturityDate { get; set; }
            public decimal Balance { get; set; }
            public string LastCoupon { get; set; }
            public string NextCoupon { get; set; }
            public string AcqDate { get; set; }
            public decimal Tenor { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal DailyInterest { get; set; }
            public decimal AccDays { get; set; }
            public decimal InterestAmount { get; set; }
            public decimal TaxDays { get; set; }
            public decimal TaxAmount { get; set; }
            public decimal NetAmount { get; set; }

        }

        public class LPTISubscription
        {
            public string ContactPerson { get; set; }
            public string FaxNo { get; set; }
            public DateTime NAVDate { get; set; }
            public DateTime Date { get; set; }
            public string IFUA { get; set; }
            public string InvestorName { get; set; }
            public decimal UnitTransaction { get; set; }
            public decimal CashTransaction { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal NetAmount { get; set; }
            public string Remark { get; set; }
            public string CurrencyID { get; set; }
            public string FundName { get; set; }
            public string BankCustodiID { get; set; }
            public string CustodyAddress { get; set; }
            public string BankAccountNo { get; set; }



        }

        public class LPTIRedemption
        {
            public string ContactPerson { get; set; }
            public string FaxNo { get; set; }
            public DateTime NAVDate { get; set; }
            public DateTime Date { get; set; }
            public string IFUA { get; set; }
            public string InvestorName { get; set; }
            public decimal UnitTransaction { get; set; }
            public decimal CashTransaction { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal NetAmount { get; set; }
            public string Remark { get; set; }
            public string CurrencyID { get; set; }
            public string FundName { get; set; }
            public string BankCustodiID { get; set; }
            public string CustodyAddress { get; set; }
            public string BankAccountNo { get; set; }



        }

        public class BatchSubscriptionInstruction
        {
            public string ContactPerson { get; set; }
            public string FaxNo { get; set; }
            public string InvestorName { get; set; }
            public DateTime NAVDate { get; set; }
            public DateTime Date { get; set; }
            public string IFUA { get; set; }
            public decimal UnitTransaction { get; set; }
            public decimal CashTransaction { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal NetAmount { get; set; }
            public string Remark { get; set; }
            public string CurrencyID { get; set; }
            public string FundName { get; set; }
            public string BankCustodiID { get; set; }
            public string CustodyAddress { get; set; }
            public string BankAccountNo { get; set; }

        }

        public class BatchRedemptionInstruction
        {
            public string ContactPerson { get; set; }
            public string FaxNo { get; set; }
            public string InvestorName { get; set; }
            public DateTime NAVDate { get; set; }
            public DateTime Date { get; set; }
            public string IFUA { get; set; }
            public decimal UnitTransaction { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal NetAmount { get; set; }
            public string Remark { get; set; }
            public string CurrencyID { get; set; }
            public string FundName { get; set; }
            public string BankCustodiID { get; set; }
            public string CustodyAddress { get; set; }
            public string BankAccountNo { get; set; }

        }

        public class FundPortfolioTaspen
        {
            public DateTime Date { get; set; }
            public int InstrumentTypePK { get; set; }
            public string InstrumentTypeName { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public DateTime MaturityDate { get; set; }
            public decimal Balance { get; set; }
            public decimal CostValue { get; set; }
            public decimal AvgPrice { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal Unrealised { get; set; }
            public decimal PercentOfNav { get; set; }
            public decimal InterestPercent { get; set; }
            public string PeriodeActual { get; set; }
            public decimal AccrualHarian { get; set; }
            public decimal Accrual { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }
            public int SysNo { get; set; }
            public string NoBilyet { get; set; }
            public string Tipe { get; set; }
        }

        public class AccruedInterestDeposito
        {
           
            public string InstrumentID { get; set; }
            public string NoBilyet { get; set; }
            public string AcqDate { get; set; }
            public string MaturityDate { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal Balance { get; set; }
            public decimal TotalPerBulan { get; set; }
            public decimal Piutang { get; set; }
            public decimal DailyInterest { get; set; }
            public int DateBeg { get; set; }
            public int AcqDateBeg { get; set; }
            public string DateofMonth { get; set; }
            public string EndOfMonth { get; set; }
            public decimal PiutangBerjalan { get; set; }
            public string BankID { get; set; }
            public int InterestDaysType { get; set; }
            public decimal BungaSebelumnya { get; set; }
            public int ValuedateBeg { get; set; }
            public decimal TotalDepositoBreak { get; set; }
            public decimal TotalDeposito { get; set; }
            public string InstructionDate { get; set; }
            public int InterestDays { get; set; }
            public int InstrumentPK { get; set; }
            public string InformationMature { get; set; }
            
            
            
        }

        public class AccruedInterestBond
        {

            public decimal BitHTM { get; set; }
            public string ID { get; set; }
            public string Name { get; set; }
            public decimal FaceAmount { get; set; }
            public string MaturityDate { get; set; }
            public decimal InterestPercent { get; set; }
            public string LastCoupon { get; set; }
            public string NextCouponDate { get; set; }
            public decimal DonePrice { get; set; }
            public decimal Principle { get; set; }
            public string ValueDate { get; set; }
            public string SettlementDate { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal ClosePriceAmount { get; set; }
            public decimal Unrealized { get; set; }
            public decimal CouponPerHari { get; set; }
            public decimal Piutang { get; set; }
            public decimal TotalHasil { get; set; }
            public decimal Premium { get; set; }
            public decimal hari { get; set; }
            public decimal AmortisasiPerHari { get; set; }
            public decimal TotalAmortize { get; set; }
            public decimal BookValue { get; set; }
            public decimal MarketValue { get; set; }
            public string InstrumentTypeID { get; set; }
            public decimal NetAmortisasi { get; set; }
            public decimal HariSebulan { get; set; }
            public decimal TotalDate { get; set; }
            public decimal TotalUnrealized { get; set; }
            public decimal NetAmortisasiDariAwal { get; set; }
            public decimal CouponAmount { get; set; }
            public string FlagRecCoupon { get; set; }
        }

        public class PosisiReksadana
        {

            public string Reksadana { get; set; }
            public string IssueDate { get; set; }
            public string MaturityDate { get; set; }
            public decimal CostPrice { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal BookValue { get; set; }
            public decimal MarketValue { get; set; }
            public decimal ImbalHasil { get; set; }
            public decimal Penjualan { get; set; }
            public decimal Unrealised { get; set; }
            public decimal PiutangImbaHasil { get; set; }
            public string UnderlineInstrumentID { get; set; }
            public int BitBreakable { get; set; }
            public decimal PiutangImbaHasilSell { get; set; }
            
            
      

        }

        public class ReportRekapInvestasi
        {

          
            public decimal DepositoBerjangka { get; set; }
            public decimal Obligasi { get; set; }
            public decimal Reksadana { get; set; }
            public decimal KontrakPengelolaanDanaKPD { get; set; }
            public decimal Saham { get; set; }
            public decimal PenyertaanLangsung { get; set; }
            public decimal PenjualanObligasi { get; set; }
            public decimal PenjualanReksadana { get; set; }
            public decimal KoreksiReksadana { get; set; }
            public decimal KoreksiObligasi { get; set; }
            public decimal KoreksiDeposito { get; set; }
            public decimal Amortisasi { get; set; }
            public decimal Deviden { get; set; }
            public decimal OCIobligasi { get; set; }
            public decimal OCIreksadana { get; set; }
            public decimal OCIsaham { get; set; }
            public decimal PremiumDisconOBLIGASI { get; set; }
            public decimal LRpelepasanSahamUNITLINK { get; set; }
            public decimal TotalHasilDepositoBerjangka { get; set; }
            public decimal TotalHasilObligasi { get; set; }
            public decimal TotalHasilReksadana { get; set; }
            public decimal TotalHasilSaham { get; set; }



        }


        public class PortfolioSaham
        {
            public DateTime Date { get; set; }
            public int InstrumentTypePK { get; set; }
            public string InstrumentTypeName { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public DateTime MaturityDate { get; set; }
            public decimal Balance { get; set; }
            public decimal CostValue { get; set; }
            public decimal AvgPrice { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal Unrealised { get; set; }
            public decimal PercentOfNav { get; set; }

            public decimal InterestPercent { get; set; }
            public string PeriodeActual { get; set; }
            public decimal AccrualHarian { get; set; }
            public decimal Accrual { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }

        public class ReportAgingObligasi
        {

            public string InstrumentName { get; set; }
            public string MaturityDate { get; set; }
            public decimal InterestPercent { get; set; }
            public string Coupondate1 { get; set; }
            public string Coupondate2 { get; set; }
            public string Coupondate3 { get; set; }
            public string Coupondate4 { get; set; }
            public decimal FaceAmount { get; set; }
            public decimal Aging1 { get; set; }
            public decimal Aging2 { get; set; }
            public decimal Aging3 { get; set; }
            public decimal Aging4 { get; set; }
            public decimal Total { get; set; }
            public int instrumentPK { get; set; }
            public string InstrumentID { get; set; }
            public int InstrumentTypePK { get; set; }
                

        }

        public class ReportAgingReksadana
        {
            public int No { get; set; }
            public string Nama { get; set; }
            public string TanggalPeluncuran { get; set; }
            public string jatuhTempo { get; set; }
            public string PeriodeBunga1 { get; set; }
            public string PeriodeBunga2 { get; set; }
            public string PeriodeBunga3 { get; set; }
            public string PeriodeBunga4 { get; set; }
            public string TanggalKuponTerakhirThn2017 { get; set; }
            public decimal BookValue { get; set; }
            public decimal InterestRate { get; set; }
            public decimal Aging1 { get; set; }
            public decimal Aging2 { get; set; }
            public decimal Aging3 { get; set; }
            public decimal Aging4 { get; set; }
            public decimal AgingSaldo { get; set; }


        }

        public class ReportHasilInvestasi
        {
            //public int FundJournalPK { get; set; }
            public int InstrumentPK { get; set; }
            public string JenisInstrument { get; set; }
            public string NamaInstrument { get; set; }
            public string TanggalPenerimaan { get; set; }
            public decimal NilaiPenerimaan { get; set; }
            public string TanggalActualMasuk { get; set; }
            public decimal NilaiActualMasuk { get; set; }
            public decimal Koreksi { get; set; }
            public string TrxName { get; set; }
            

        }
        public class ReportMonitoringCashFlowTransaksi
        {
            public int No { get; set; }
            public string JenisInstrument { get; set; }
            public string NamaInstrument { get; set; }
            public string JenisTransaksi { get; set; }
            public string TradeDate { get; set; }
            public string SettlementDate { get; set; }
            public decimal NilaiTransaksi { get; set; }
        }

        public class InvestmentListingTaspen
        {
            public string ParamDateFrom { get; set; }
            public string ParamDateTo { get; set; }
            public string ParamListDate { get; set; }
            public string ParamFundID { get; set; }
            public string ParamFundIDFrom { get; set; }
            public string ParamFundIDTo { get; set; }
            public string ParamCounterpartIDFrom { get; set; }
            public string FundFromByAll { get; set; }
            public string CounterpartFromByAll { get; set; }
            public string ParamReferenceFrom { get; set; }
            public string ParamReferenceTo { get; set; }
            public string ParamReferenceText { get; set; }
            public string ParamInstType { get; set; }
            public DateTime InstructionDate { get; set; }
            public DateTime ValueDate { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string InstrumentType { get; set; }
            public int InstrumentTypePK { get; set; }
            public string TrxTypeID { get; set; }
            public int InvestmentPK { get; set; }
            public int DealingPK { get; set; }
            public int SettlementPK { get; set; }
            public string BankName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string CounterpartID { get; set; }
            public string CounterpartName { get; set; }
            public string BankCustodianName { get; set; }
            public string ContactPerson { get; set; }
            public string BankCustodianContactPerson { get; set; }
            public string FaxNo { get; set; }
            public string Phone { get; set; }
            public string BankCustodianFaxNo { get; set; }
            public string BankCustodianPhone { get; set; }
            public string BankAccountName { get; set; }
            public string BankAccountNo { get; set; }
            public string ClearingCode { get; set; }
            public string RTGSCode { get; set; }
            public int Tenor { get; set; }
            public int TenorDays { get; set; }
            public int HoldingPeriod { get; set; }
            public decimal AcqPrice { get; set; }
            public decimal Lot { get; set; }
            public decimal Volume { get; set; }
            public decimal OrderPrice { get; set; }
            public string RangePrice { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal Amount { get; set; }
            public decimal DoneLot { get; set; }
            public decimal DoneVolume { get; set; }
            public decimal DonePrice { get; set; }
            public decimal DoneAmount { get; set; }
            public DateTime LastCouponDate { get; set; }
            public DateTime NextCouponDate { get; set; }
            public DateTime MaturityDate { get; set; }
            public DateTime SettlementDate { get; set; }
            public DateTime AcqDateDeposito { get; set; }
            public DateTime AcqDate { get; set; }
            public decimal AccruedInterest { get; set; }
            public decimal CommissionAmount { get; set; }
            public decimal LevyAmount { get; set; }
            public decimal KPEIAmount { get; set; }
            public decimal VATAmount { get; set; }
            public decimal WHTAmount { get; set; }
            public decimal OTCAmount { get; set; }
            public decimal IncomeTaxSellAmount { get; set; }
            public decimal IncomeTaxInterestAmount { get; set; }
            public decimal IncomeTaxGainAmount { get; set; }
            public decimal DoneAccruedInterest { get; set; }
            public decimal TotalAmount { get; set; }
            public int SettlementMode { get; set; }
            public string SettlementModeDesc { get; set; }
            public string SettlementModeDescTwo { get; set; }
            public decimal AcqPrice1 { get; set; }
            public decimal AcqVolume1 { get; set; }
            public DateTime AcqDate1 { get; set; }
            public decimal AcqPrice2 { get; set; }
            public decimal AcqVolume2 { get; set; }
            public DateTime AcqDate2 { get; set; }
            public decimal AcqPrice3 { get; set; }
            public decimal AcqVolume3 { get; set; }
            public DateTime AcqDate3 { get; set; }
            public decimal AcqPrice4 { get; set; }
            public decimal AcqVolume4 { get; set; }
            public DateTime AcqDate4 { get; set; }
            public decimal AcqPrice5 { get; set; }
            public decimal AcqVolume5 { get; set; }
            public DateTime AcqDate5 { get; set; }
            public string Notes { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }
            public bool PageBreak { get; set; }
            public string Message { get; set; }
            public string DownloadMode { get; set; }
            public string BoardTypeDesc { get; set; }
            public string BoardTypeDescTwo { get; set; }
            public string SettlementModeDescOne { get; set; }
            public bool BitIsMature { get; set; }
            public string BankBranchName { get; set; }
            public string EntryDealingID { get; set; }
            public string PTPCode { get; set; }
            public string BankBranchID { get; set; }
            public string BankBranchAccountNo { get; set; }
            public decimal IncomeTaxInterestPercent { get; set; }
            public int TrxType { get; set; }

            public string JournalTypeSAP { get; set; }
            public int Signature1 { get; set; }
            public string Signature1Desc { get; set; }
            public int Signature2 { get; set; }
            public string Signature2Desc { get; set; }
            public int Signature3 { get; set; }
            public string Signature3Desc { get; set; }
            public int Signature4 { get; set; }
            public string Signature4Desc { get; set; }
            public string BankCustodianID { get; set; }

            public string CounterpartBank { get; set; }
            public DateTime SettleDate { get; set; }
            public decimal Nominal { get; set; }
            public decimal Price { get; set; }
            public decimal CouponRate { get; set; }
            public string BankID { get; set; }
            public string BankType { get; set; }

            //---- Masih Belum diisi ----//
            public string Attn { get; set; }
            public string NoRekCustody { get; set; }
            public DateTime DistributedDate { get; set; }
            public string SubRegCode { get; set; }
            public string NoCTP { get; set; }
            public string FundRekName { get; set; }
            public string Telp { get; set; }
            public string CustodianID { get; set; }
            public string FaxNo2 { get; set; }
            public string Telp2 { get; set; }

            public string CustomerCode { get; set; }
            public string AccountCode { get; set; }
            public string BusinessArea { get; set; }
            public string ISIN { get; set; }
            public decimal IncomeTaxGainPercent { get; set; }
            public decimal NetProceeds { get; set; }
            public decimal CouponTax { get; set; }
            public decimal TotalTax { get; set; }
            public decimal NetSettled { get; set; }
            public string BankCustodian { get; set; }
            public DateTime TglPenempatan { get; set; }
            public decimal Rate { get; set; }

            public string Category { get; set; }
            public int Bulan { get; set; }
            public string ContactBankBranch { get; set; }
            public string FaxBankBranch { get; set; }
            public string PhoneBankBranch { get; set; }
            public string EmailBankBranch { get; set; }

            public string Phone1 { get; set; }
            public string CityDesc { get; set; }
            public string BankBranchAccountName { get; set; }
            public string Email1 { get; set; }
            public string InvestmentNotes { get; set; }
            public string ParamTrxType { get; set; }
            public bool BitSyariah { get; set; }
            public string AccountSAP { get; set; }
            public string BusinesArea { get; set; }
            public string TotalSettle { get; set; }
            public string NoSeri { get; set; }

            public int InvestmentPk { get; set; }
            public string Date { get; set; }
            public string JurnalTypeSAP { get; set; }
            public int AutoNo { get; set; }
            public string description { get; set; }
            public int AccountType { get; set; }
            public string AccountNameSAP { get; set; }
            public int FundJournalAccountPK { get; set; }


        }

        public int EndDayTrails_Generate(string _usersID, DateTime _valueDate)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

Declare @valuedateBeg datetime  

Declare @MSG nvarchar (Max)   
Declare @PeriodPK int                  
Declare @maxEndDayTrailsPK int    
Declare @DateYesterday datetime 
Declare @DefaultCashAtBankPK int


set @DefaultCashAtBankPK = 3

Select  @DateYesterday  = ValueDate From enddaytrails
where status = 2 and valuedate =(
Select Max(valueDate) From EnddayTrails where status = 2 and ValueDate < @ValueDate
)


Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  and status = 2                
Select @maxEndDayTrailsPK = ISNULL(EndDayTrailsPK,0) + 1 from EndDayTrails     

set @maxEndDayTrailsPK = isnull(@maxEndDayTrailsPK,1)               

select @valuedateBeg = CONVERT(varchar,dateadd(d,-(day(@valuedate)),@valuedate),106)

Create Table #Mature
(
Date datetime,InstrumentPK int,FundPK int,TrxAmount numeric(22,4),
MarketValue numeric(22,4),InstrumentTypePK int,CurrencyPK int,
InstrumentID nvarchar(50),NextCouponDate datetime,Balance numeric(22,4),
TaxExpensePercent numeric(22,4), AcqDate datetime, MaturityDate datetime
,PaymentModeOnMaturity int, InterestDaysType int, InterestPercent numeric(18,8)
, InterestPaymentType int, BitHTM bit, ReksadanaTypePK int
)

Create Table #RecCoupon
(
InstrumentPK int,FundPK int,TrxAmount numeric(22,4),
MarketValue numeric(22,4),InstrumentTypePK int,CurrencyPK int,
InstrumentID nvarchar(50),LastCouponDate datetime,NextCouponDate datetime,Balance numeric(22,4),
TaxExpensePercent numeric(22,4), AcqDate datetime, MaturityDate datetime
,PaymentModeOnMaturity int, InterestDaysType int, InterestPercent numeric(18,8)
, InterestPaymentType int, BitHTM bit
)

CREATE TABLE #TempAmortize
(InterestAmount numeric(24,10),InstrumentPK int ,Balance numeric(24,10), CostPrice numeric(18,8))

CREATE TABLE #A
(
DateLastMont datetime,
Daily  numeric(22,2)
)


CREATE TABLE #MatureTaspen
(
FundPK int,
InstrumentPK int,
InstrumentID nvarchar(50),
NoBilyet nvarchar(50),
AcqDate datetime,
InterestDays int,
DateofMonth datetime,
DateLastMont datetime,
EndOfMonth datetime,
MaturityDate datetime,
InterestPercent numeric(18,6),
Balance numeric(22,2),
Daily  numeric(22,2),
DateBeg  int,
AcqDateBeg int,
BitBreakable int,
BankID nvarchar(50),
ValuedateBeg int,
DatePreviousMonth datetime
)





insert into #MatureTaspen(FundPK,InstrumentPK,InstrumentID,NoBilyet,AcqDate,InterestDays,DateofMonth,DateLastMont,EndOfMonth,MaturityDate,InterestPercent,Balance,Daily,DateBeg,AcqDateBeg,BitBreakable,BankID,ValuedateBeg, DatePreviousMonth)
select A.FundPK,A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,case when A.InterestDaysType in (1,2,3) then 360 else 365 end InterestDays,

case when datepart(day,A.AcqDate) > day(eomonth(@ValueDateBeg)) then eomonth(@ValueDateBeg) else 
CONVERT(DATETIME,CAST(cast(datepart(month,@ValueDateBeg) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@ValueDateBeg) as nvarchar(4)) as nvarchar(10)),101) end,

case when datepart(day,A.AcqDate) > day(eomonth(@ValueDate)) then eomonth(@ValueDate) else 
CONVERT(DATETIME,CAST(cast(datepart(month,@ValueDate) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@ValueDate) as nvarchar(4)) as nvarchar(10)),101) end,

EOMONTH(@ValueDate,0),A.MaturityDate,A.InterestPercent,A.Balance,
case when A.InterestDaysType in (1,2,3) then sum((A.Balance * A.InterestPercent/100/360 * 0.8)) else sum((A.Balance * A.InterestPercent/100/365 * 0.8)) end Daily,

day(@ValueDateBeg) DateBeg,day(A.AcqDate) AcqDateBeg,
A.BitBreakable,isnull(D.ID,'Master Bank No ID') BankID
,case when @ValueDateBeg <= A.AcqDate then 1 else 0 end ValuedateBeg,DATEADD(MONTH, DATEDIFF(MONTH, -1, @ValueDate)-1, -1) DatePreviousMonth
from FundPosition A
left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
left join Bank D on B.BankPK = D.BankPK and D.status in (1,2)
where A.date  = @DateYesterday and A.status = 2 and C.InstrumentTypePK = 5
and A.InstrumentPK not in
(select InstrumentPK from Investment where StatusSettlement = 2 and ValueDate = @ValueDate)

group by  A.FundPK,A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,A.MaturityDate,A.InterestPercent,A.Balance,A.BitBreakable,D.ID,D.InterestDays,A.InterestDaysType




Insert into EndDayTrails(EndDayTrailsPK,HistoryPK,Status,ValueDate,BitValidate,LogMessages
,EntryUsersID,EntryTime,LastUpdate)                    
Select @maxEndDayTrailsPK,1,1,@ValueDate,0,'',@UsersID,@LastUpdate,@LastUpdate  

---- NEW -----
if Not Exists(              
Select * from CloseNAV where Status = 2 and date = @DateYesterday             
)              
BEGIN              
Set @MSG = 'MISSING DATA: Close NAV Yesterday'              
Update EndDayTrails set BitValidate = 0,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1               
Select @maxEndDayTrailsPK LastPK                   
RETURN;                   
END              

--if Not Exists(              
--Select * from ClosePrice where Status = 2 and date = @ValueDate              
--)              
--BEGIN              
--Set @MSG = 'MISSING DATA: Close Price Today'              
--Update EndDayTrails set BitValidate = 0,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1               
--Select @maxEndDayTrailsPK LastPK                   
--RETURN;                   
--END    

-- Parameter untuk masuk Ke Jurnal                  
Declare @InvestmentAcc   int                  
Declare @PayablePurchaseAcc  int                  
Declare @CashAtBankAcc   int                  
Declare @CommissionAcc   int                  
Declare @LevyAcc    int                  
Declare @VatAcc     int                  
Declare @WhtAcc     int                  
                
Declare @TaxExpenseAcc   int                  
Declare @WHTTaxPayableAccrInterest int     
Declare @InterestRecAcc int 
--BOND
Declare @InvestmentAccBond   int 
Declare @InterestRecBuySellAccBond int      
Declare @InterestRecAccBond   int 
Declare @RealisedAccBond int   
Declare @ReceivableSaleAccBond int 
Declare @TaxCapitalGainAccBond int 
Declare @TaxInterestAccBond int 

-- Sell              
Declare @ReceivableSaleAcc int              
Declare @RealisedAcc int              
Declare @IncomeSaleTaxAcc int                 
-- Untuk variabel Posting                  
Declare @PValueDate        datetime                  
Declare @PPeriodPK        int                  
Declare @PReference        nvarchar(50)                  
Declare @PTrxType        int                
Declare @PCounterpartPK       int                  
Declare @PInstrumentPK       int                  
Declare @PInstrumentTypePK      int                  
Declare @PFundPK        int                  
Declare @PFundCashRefPK       int                  
Declare @PDoneAccruedInterest  Numeric(18,6)                  
Declare @PSettlementDate      Datetime       
Declare @PAcqDate      Datetime            
Declare @PDoneVolume       numeric(18,0)   
Declare @PAmount       numeric(22,4)               
Declare @PDoneAmount       numeric(22,4)                  
Declare @PCommissionAmount      numeric(18,6)                  
Declare @PLevyAmount       numeric(18,6)                  
Declare @PKPEIAmount       numeric(18,6)                  
Declare @PVATAmount        numeric(18,6)                  
Declare @PWHTAmount        numeric(18,6)                  
Declare @POTCAmount        numeric(18,6)                   
Declare @PIncomeTaxSellAmount     numeric(18,6)                   
Declare @PIncomeTaxInterestAmount    numeric(18,6)                   
Declare @PIncomeTaxGainAmount     numeric(18,6) 
Declare @PTotalAmount       numeric(19,6)                   
Declare @PCurrencyRate       numeric(18,8)                  
Declare @InstrumentType int                  
Declare @FundJournalPK int                  
Declare @InstrumentID nvarchar(30)                  
Declare @FPayablePurchaseAmount numeric(19,6)                  
Declare @InstrumentCurrencyPK int     
Declare @BondDayAccrued int      
Declare @PInterestPercent Numeric(22,6)          

Declare @SellAvgPrice numeric(18,6)  
Declare @AvgAmount numeric(22,6)              
Declare @RealisedAmount numeric(22,6)
Declare @InvestmentShareAmount numeric(22,6)   
Declare @ReceivableSellBondAmount numeric(22,6)    

Declare @PTaxExpenseAmount numeric(22,6) 
Declare @PTaxExpensePercent numeric(22,6) 
Declare @PInterestAmount numeric(22,6) 
Declare @PFinalAmount numeric(22,6)
     
Declare @WHTDueDate int
               
-- A. Posting Investment   
-- 1. BUY EQUITY --  
-- 2. SELL EQUITY --
-- 3. BUY BOND -- 
-- 4. SELL BOND -- 
-- 5. PLACEMENT DEPOSITO -- 
-- 6. LIQUIDATE DEPOSITO -- 
-- 7. ROLLOVER DEPOSITO -- 
-- 8. BUY REKSADANA -- 
-- 9. SELL REKSADANA -- 


-- B. Daily Fee dan Payment Fee 	 	            
-- 1. GENERATE DAILY FEE --    
-- 2. PAYMENT FEE -- 
-- 3. BANK INTEREST --
	                       
-- C. Reval, Interest Accrued Bond, Interest Accrued Time Deposit, Mature Bond, Mature Time Deposit
-- 1. REVALUATION EQUITY & BOND & MUTUAL FUND --   
-- 2. GENERATE INTEREST ACCRUED BOND           
-- 3. MATURE TIME DEPOSIT YANG BELOM SAMPE UJUNG           
-- 4. MATURE BOND & TIME DEPOSIT
-- 5. REC COUPON BOND
	
-- D. Copy Fund Client Position 

-- E. Pending Subscription

-- A. POSTING INVESTMENT --        

--POSTING INVESTMENT TRADITIONAL

exec EndDayTrailsPostingInvestmentForTraditional @valuedate,@maxEndDayTrailsPK,1,@UsersID,@LastUpdate

Declare @PBreakInterestPercent numeric(8,4)
Declare @PSettlementPK int

DECLARE @IntDays int 

Declare A Cursor For                  
-- NON REKSADANA
Select ValueDate,PeriodPK,Reference,TrxType,CounterpartPK,InstrumentPK,                   
FundPK,FundCashRefPK,DoneAccruedInterest,SettlementDate,DoneVolume,Amount,isnull(DoneAmount,0),                  
CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,                  
IncomeTaxInterestAmount,IncomeTaxGainAmount,TotalAmount,InstrumentTypePK,CurrencyRate,BreakInterestPercent,SettlementPK,TaxExpensePercent,InterestPercent,AcqDate            
From Investment         
Where StatusSettlement = 2 and Posted = 0 and Valuedate in (
select valuedate from investment where valuedate between @DateYesterday and @valuedate and valuedate <> @DateYesterday)  
and InstrumentTypePK not in (6) and FundPK <> 1
union all
-- REKSADANA
Select ValueDate,PeriodPK,Reference,TrxType,CounterpartPK,InstrumentPK,                   
FundPK,case when FundCashRefPK = 0 then 3 else FundCashRefPK end FundCashRefPK,DoneAccruedInterest,SettlementDate,DoneVolume,DoneAmount,isnull(DoneAmount,0),                  
CommissionAmount,LevyAmount,KPEIAmount,VATAmount,WHTAmount,OTCAmount,IncomeTaxSellAmount,                  
IncomeTaxInterestAmount,IncomeTaxGainAmount,TotalAmount,InstrumentTypePK,CurrencyRate,BreakInterestPercent,SettlementPK,TaxExpensePercent,InterestPercent,AcqDate            
From Investment         
Where StatusInvestment = 2 and statusDealing <> 3 and statusSettlement <> 3  and Valuedate = @ValueDate
and InstrumentTypePK in (6) and FundPK <> 1
            
Open A                  
Fetch Next From A                  
Into @PValueDate,@PPeriodPK,@PReference,@PTrxType,@PCounterpartPK,
@PInstrumentPK,@PFundPK,@PFundCashRefPK,                  
@PDoneAccruedInterest,@PSettlementDate,@PDoneVolume,@PAmount
,@PDoneAmount,@PCommissionAmount,@PLevyAmount,@PKPEIAmount,                  
@PVATAmount,@PWHTAmount,@POTCAmount,@PIncomeTaxSellAmount,@PIncomeTaxInterestAmount
,@PIncomeTaxGainAmount,@PTotalAmount,@PInstrumentTypePK,@PCurrencyRate,@PBreakInterestPercent,@PSettlementPK ,@PTaxExpensePercent,@PInterestPercent,@PAcqDate             
While @@FETCH_STATUS = 0                  
Begin                  
Select @InstrumentID = ID From Instrument where Status = 2 and InstrumentPK = @PInstrumentPK              
-- 1 = REGULER                  
-- 2 = G-BOND                  
-- 3 = C-BOND                  
-- 4 = RI                  
-- 5 = DEPOSITO                  
-- 6 = WARRANT 
                
-- A1. BUY EQUITY --                 
if @PTrxType = 1 and @PInstrumentTypePK = 1                  
BEGIN                  
Select @InstrumentType =  InstrumentTypePK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  

IF @InstrumentType in (1,4,16)                  
BEGIN                  
Select @InvestmentAcc = InvestmentEquity,@PayablePurchaseAcc = PayablePurchaseEquity 
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK
END    
                            
Select @CommissionAcc = BrokerCommission,@LevyAcc = BrokerLevy,@VatAcc = BrokerVat,@WhtAcc = WithHoldingTaxPPH23 
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                 
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                

-- Setup Account kelar diatas, Next masukin ke Fund Journal                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   
set @FundJournalPK = isnull(@FundJournalPK,0)
-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference],[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1
,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK
,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',@PReference,'T0 EQUITY BUY: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                    

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'D',@PDoneAmount + @PWHTAmount,                   
@PDoneAmount + @PWHTAmount,0,1,@PDoneAmount + @PWHTAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                  


select @WHTDueDate = WHTDueDate from Fund where status = 2 and FundPK = @PFundPK

IF (@WHTDueDate = 1)
BEGIN
    set @FPayablePurchaseAmount = @PDoneAmount 
--+ isnull(@PCommissionAmount,0) + isnull(@PLevyAmount,0) + isnull(@PKPEIAmount,0) + isnull(@PVATAmount,0) - isnull(@PWHTAmount,0)  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,6,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2        

END
ELSE
BEGIN
    set @FPayablePurchaseAmount = @PDoneAmount   --AURORA               
END


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY BUY: ' + @InstrumentID,'C',@FPayablePurchaseAmount,                   
0,@FPayablePurchaseAmount,1,0,@FPayablePurchaseAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  


             

-- T Settled  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   
                
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled EQUITY BUY: ' + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                    

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,1,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'D',@FPayablePurchaseAmount,@FPayablePurchaseAmount,0,1,@FPayablePurchaseAmount,0,@LastUpdate   
From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  



IF (@WHTDueDate = 1)
BEGIN

   INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

    Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'C',@FPayablePurchaseAmount,                   
    0,@FPayablePurchaseAmount,1,0,@FPayablePurchaseAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                        

END
ELSE
BEGIN
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

    Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'C',@FPayablePurchaseAmount - @PWHTAmount,                   
    0,@FPayablePurchaseAmount - @PWHTAmount,1,0,@FPayablePurchaseAmount - @PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  


    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,3,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY BUY: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2        
END





END   
               
-- A2. SELL EQUITY --              
if @PTrxType = 2 and @PInstrumentTypePK = 1                  
BEGIN                  
Select @InstrumentType =  InstrumentTypePK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  
IF @InstrumentType in (1,4,16)                  
BEGIN                 
Select @InvestmentAcc = InvestmentEquity,@ReceivableSaleAcc = AccountReceivableSaleEquity,@RealisedAcc = RealisedEquity From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                  
END                  
        
Select @CommissionAcc = BrokerCommission,@LevyAcc = BrokerLevy,@VatAcc = BrokerVat,@WhtAcc = WithHoldingTaxPPH23 
,@IncomeSaleTaxAcc = BrokerSalesTax
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK    
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
Select @InstrumentID = ID From Instrument where Status = 2 and InstrumentPK = @PInstrumentPK                  

-- Setup Account kelar diatas, Next masukin ke Fund Journal                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]         
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 EQUITY SELL: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                      
                



select @WHTDueDate = WHTDueDate from Fund where status = 2 and FundPK = @PFundPK             

Declare @SellArAmount numeric(22,6) 
    
IF (@WHTDueDate = 1)
BEGIN
    Set @SellArAmount = @PDoneAmount 
--  isnull(@PCommissionAmount,0) - isnull(@PLevyAmount,0)- isnull(@PKPEIAmount,0) - isnull(@PVATAmount,0) - isnull(@PIncomeTaxSellAmount,0) + isnull(@PWHTAmount,0)            

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,8,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2  

END
ELSE
BEGIN
    Set @SellArAmount = @PDoneAmount 
--  isnull(@PCommissionAmount,0) - isnull(@PLevyAmount,0)- isnull(@PKPEIAmount,0) - isnull(@PVATAmount,0) - isnull(@PIncomeTaxSellAmount,0) --AURORA                   
END


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,5,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@SellArAmount,                   
@SellArAmount,0,1,@SellArAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                   

           
	
select @SellAvgPrice = dbo.FGetLastAvgFromInvestment(@PValueDate,@PInstrumentPK,@PFundPK)                            
set @AvgAmount = @SellAvgPrice * @PDoneVolume              
set @RealisedAmount = abs(@AvgAmount - @PDoneAmount)  
      

-- Gain Realised
if @AvgAmount <= @PDoneAmount              
Begin              
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,6,1,2,@RealisedAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'C',@RealisedAmount   - @PWHTAmount,                   
0,@RealisedAmount   - @PWHTAmount,1,0,@RealisedAmount   - @PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAcc and Status = 2                  

set  @InvestmentShareAmount = @PDoneAmount - @RealisedAmount              
set @InvestmentShareAmount = isnull(@InvestmentShareAmount,0)
End       
     
-- Loss Realised
if @AvgAmount > @PDoneAmount              
begin              
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,6,1,2,@RealisedAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'D',@RealisedAmount   + @PWHTAmount,                   
@RealisedAmount + @PWHTAmount,0,1,@RealisedAmount + @PWHTAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAcc and Status = 2                 
			 
set  @InvestmentShareAmount = @PDoneAmount + @RealisedAmount              
set @InvestmentShareAmount = isnull(@InvestmentShareAmount,0)
end              
set @InvestmentShareAmount = isnull(@InvestmentShareAmount,0)
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,7,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 EQUITY SELL: ' + @InstrumentID,'C',@InvestmentShareAmount,                   
0,@InvestmentShareAmount,1,0,@InvestmentShareAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2               

-- T SETTLED              
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-SETTLED EQUITY SELL: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                     


IF (@WHTDueDate = 1) -- VALUEDATE
BEGIN
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'D',@SellArAmount,                   
    @SellArAmount,0,1,@SellArAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@SellArAmount,                   
    0,@SellArAmount,1,0,@SellArAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                      
            

END    
ELSE
BEGIN
   
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'D',@SellArAmount + @PWHTAmount,                   
    @SellArAmount + @PWHTAmount,0,1,@SellArAmount + @PWHTAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@SellArAmount,                   
    0,@SellArAmount,1,0,@SellArAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                      
             

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,3,1,2,@WhtAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'C',@PWHTAmount,                   
    0,@PWHTAmount,1,0,@PWHTAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WhtAcc and Status = 2  


      
END  



INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,4,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-SETTLED EQUITY SELL: ' + @InstrumentID,'D',@PWHTAmount,@PWHTAmount,0,1,@PWHTAmount,0,@LastUpdate   
From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2          
      



END   

-- A3. BUY BOND --                  
if @PTrxType = 1 and @PInstrumentTypePK in (2,3,8,9,11,13,14,15)                 
BEGIN  
              
-- 2 = G-BOND                  
-- 3 = C-BOND                  
Select @InstrumentType =  InstrumentTypePK,@InstrumentCurrencyPK = CurrencyPK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                                           

if @InstrumentType in (2,3,8,9,11,13,14,15)          
BEGIN                  
Select @InvestmentAcc = InvestmentBond,@InterestRecAcc = InterestRecBond,@PayablePurchaseAcc = PayablePurRecBond, 
@WHTTaxPayableAccrInterest = WHTTaxPayableAccrInterestBond,@BondDayAccrued = InterestAccrBond
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                   
END                  
                  
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
	
-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                

-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 BOND BUY: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                     

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'D',@PAmount,                   
@PAmount,0,1,@PAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,2,1,2,@InterestRecAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'D',@PDoneAccruedInterest,                   
@PDoneAccruedInterest,0,1,@PDoneAccruedInterest,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

              
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,3,1,2,@WHTTaxPayableAccrInterest,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'C',@PIncomeTaxGainAmount + @PIncomeTaxInterestAmount,                
0,@PIncomeTaxGainAmount + @PIncomeTaxInterestAmount,1,0,@PIncomeTaxGainAmount + @PIncomeTaxInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @WHTTaxPayableAccrInterest and Status = 2                  

set @FPayablePurchaseAmount = @PAmount + isnull(@PDoneAccruedInterest,0) - isnull(@PIncomeTaxGainAmount,0) 

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,4,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'C',@PTotalAmount,                   
0,@PTotalAmount,1,0,@PTotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  

-- T Settled                
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 
	
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled BOND BUY: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                     

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,1,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'D',@PTotalAmount,                   
@PTotalAmount,0,1,@PTotalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND BUY: ' + @InstrumentID,'C',@PTotalAmount,                   
0,@PTotalAmount,1,0,@PTotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select  @FundJournalPK,3,1,2,@BondDayAccrued,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-Settled BOND BUY: ' + @InstrumentID,'D',@PDoneAccruedInterest,                   
@PDoneAccruedInterest,0,1,@PDoneAccruedInterest,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BondDayAccrued and Status = 2                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

Select @FundJournalPK,4,1,2,@InterestRecAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T-Settled BOND BUY: ' + @InstrumentID,'C',@PDoneAccruedInterest,                   
0,@PDoneAccruedInterest,1,0,@PDoneAccruedInterest,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                  
END                  

-- A4.SELL BOND --
ELSE if @PTrxType = 2 and @PInstrumentTypePK in (2,3,8,9,11,13,14,15) 
BEGIN               
Select @InstrumentType =  InstrumentTypePK,@InstrumentCurrencyPK = CurrencyPK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  
Select @InvestmentAccBond = InvestmentBond,@InterestRecBuySellAccBond = InterestRecBond,@InterestRecAccBond = InterestAccrBond,
@RealisedAccBond = RealisedBond, @ReceivableSaleAccBond = AccountReceivableSaleBond,
@TaxCapitalGainAccBond = TaxCapitalGainBond,@TaxInterestAccBond = WHTTaxPayableAccrInterestBond
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK      
                                  
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                

set @PTaxExpenseAmount = (@PTaxExpensePercent / 100) * @PDoneAccruedInterest                  
set @PFinalAmount = @PDoneAccruedInterest - @PTaxExpenseAmount   

-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                 
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 BOND SELL: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                    


declare @BondSellAmount numeric (19,2)

set @BondSellAmount = dbo.FGetLastAvgFromInvestment(@PValueDate,@PInstrumentPK,@PFundPK)/100 * @PDoneVolume


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@InvestmentAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@BondSellAmount,                   
0,@BondSellAmount,1,0,@BondSellAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAccBond and Status = 2    



INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,2,1,2,@InterestRecBuySellAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@PDoneAccruedInterest,                   
0,@PDoneAccruedInterest,1,0,@PDoneAccruedInterest,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecBuySellAccBond and Status = 2   


--INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
--,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
--Select @FundJournalPK,2,1,2,@InterestRecAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@PDoneAccruedInterest,                   
--0,@PDoneAccruedInterest,1,0,@PDoneAccruedInterest,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAccBond and Status = 2                  



INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,3,1,2,@TaxCapitalGainAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@PIncomeTaxGainAmount,                   
@PIncomeTaxGainAmount,0,1,@PIncomeTaxGainAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxCapitalGainAccBond and Status = 2        


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,4,1,2,@TaxCapitalGainAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@PIncomeTaxInterestAmount,                   
@PIncomeTaxInterestAmount,0,1,@PIncomeTaxInterestAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxCapitalGainAccBond and Status = 2            

         
	
--Select @SellAvgPrice = AvgPrice From FundPosition where Date = @DateYesterday and Status =  2 and FundPK = @PFundPK and InstrumentPK = @PInstrumentPK                              
--set @AvgAmount = (@SellAvgPrice/100) * @PDoneVolume              
--set @RealisedAmount = abs(@PDoneAmount - @AvgAmount)
set @RealisedAmount = abs(@PDoneAmount - @BondSellAmount)



-- Gain Realised
if @BondSellAmount > @PDoneAmount              
Begin              
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

		Select @FundJournalPK,5,1,2,@RealisedAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@RealisedAmount,                   
		@RealisedAmount,0,1,@RealisedAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAccBond and Status = 2                  

	set  @ReceivableSellBondAmount = @BondSellAmount - @RealisedAmount +@PDoneAccruedInterest  - @PIncomeTaxGainAmount -  @PIncomeTaxInterestAmount               
	set @ReceivableSellBondAmount = isnull(@ReceivableSellBondAmount,0)
End       
     
-- Loss Realised
if @BondSellAmount <= @PDoneAmount              
begin              
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

		Select  @FundJournalPK,5,1,2,@RealisedAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'C',@RealisedAmount,                   
		0,@RealisedAmount,1,0,@RealisedAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RealisedAccBond and Status = 2                 
			 
	set  @ReceivableSellBondAmount = @BondSellAmount + @RealisedAmount + @PDoneAccruedInterest  - @PIncomeTaxGainAmount -  @PIncomeTaxInterestAmount              
	set @ReceivableSellBondAmount = isnull(@ReceivableSellBondAmount,0)
end     

                        

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,6,1,2,@ReceivableSaleAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 BOND SELL: ' + @InstrumentID,'D',@ReceivableSellBondAmount,                   
@ReceivableSellBondAmount,0,1,@ReceivableSellBondAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAccBond and Status = 2                  

select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                  

-- T Settled       
         
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled BOND SELL: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                      


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@InterestRecBuySellAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'C',@PDoneAccruedInterest,                   
0,@PDoneAccruedInterest,1,0,@PDoneAccruedInterest,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecBuySellAccBond and Status = 2   


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,2,1,2,@ReceivableSaleAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'C',@ReceivableSellBondAmount,                   
0,@ReceivableSellBondAmount,1,0,@ReceivableSellBondAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAccBond and Status = 2                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,3,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'D',@ReceivableSellBondAmount,                   
@ReceivableSellBondAmount,0,1,@ReceivableSellBondAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,4,1,2,@InterestRecAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'D',@PFinalAmount,                   
@PFinalAmount,0,1,@PFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAccBond and Status = 2                


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,5,1,2,@TaxInterestAccBond,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED BOND SELL: ' + @InstrumentID,'D',@PTaxExpenseAmount,                   
@PTaxExpenseAmount,0,1,@PTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxInterestAccBond and Status = 2                



END 

-- A5.PLACEMENT DEPOSITO & ROLLOVER DEPOSITO          
if @PTrxType in (1,3) and @PInstrumentTypePK in (5,10) -- 5 Deposito biasa 10 NCD
BEGIN                  
Select @InstrumentType =  InstrumentTypePK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                           

if @InstrumentType in (5,10)                  
BEGIN                  
Select @InvestmentAcc = InvestmentTimeDeposit From FundAccountingSetup where Status = 2  and FundPK = @PFundPK                
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
END                                    

-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                 

IF dbo.CheckTodayIsHoliday (@PValueDate) = 1
BEGIN
    select @PValueDate = dbo.Fworkingday(@PValueDate, 1)
END


-- T0                
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                   

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 DEPOSIT BUY: '  + @InstrumentID + ', NOMINAL : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                 

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                          

Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                          

Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT BUY: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
END                  

-- A6. LIQUIDATE DEPOSITO --            
if @PTrxType = 2 and @PInstrumentTypePK in (5,10)                  
BEGIN                  
Select @InstrumentType =  InstrumentTypePK,@InstrumentCurrencyPK = CurrencyPK From Instrument where InstrumentPK = @PInstrumentPK and Status = 2                  
	
if @InstrumentType in (5,10)
BEGIN                  
Select @InvestmentAcc = InvestmentTimeDeposit From FundAccountingSetup where Status = 2  and FundPK = @PFundPK                
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
END                  

-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                  

-- T0              
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 DEPOSIT LIQUIDATE: '  + @InstrumentID + ', NOMINAL : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT LIQUIDATE: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                        

Select @FundJournalPK,2,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 DEPOSIT LIQUIDATE: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2               
	
	
-- LOGIK BREAK INTEREST DISINI
	
Declare @IncomeDeposito int
Declare @ARInterestDeposito int
Declare @TaxDeposito int
    
Select @ARInterestDeposito = InterestAccrTimeDeposit,@IncomeDeposito = IncomeInterestTimeDeposit, 
@TaxDeposito = TaxExpenseInterestIncomeTimeDeposit
From FundAccountingSetup where Status = 2  and FundPK = @PFundPK                
	
Declare @ARInterestDepositoAmount numeric(22,4)
Declare @IncomeDepositoAmount numeric(22,4)
Declare @TaxDepositoAmount numeric(22,4)


set @IncomeDepositoAmount = [dbo].FGetDepositoInterestAccruedForPayment (@ValueDate,@PInstrumentPK,@PDoneVolume,4,@PInterestPercent,DateAdd(day,1,@PAcqDate),1,@ValueDate,1)
set @ARInterestDepositoAmount = 0.8 * @IncomeDepositoAmount
set @TaxDepositoAmount = 0.2 * @IncomeDepositoAmount

--set @ARInterestDepositoAmount = [dbo].[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK] (@ValueDate,@ARInterestDeposito,@PInstrumentPK,@PFundPK)
--set @IncomeDepositoAmount = [dbo].[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK] (@ValueDate,@IncomeDeposito,@PInstrumentPK,@PFundPK)
--set @TaxDepositoAmount = [dbo].[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK] (@ValueDate,@TaxDeposito,@PInstrumentPK,@PFundPK)
	

if @PBreakInterestPercent > 0


BEGIN
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal   
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'LIQUIDATE BREAK INTEREST: '  + @InstrumentID + ', PRICE : ' + convert(varchar,cast(@PDoneAmount/@PDoneVolume as money), 1) + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                    
if @IncomeDepositoAmount > 0
BEGIN
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,1,1,2,@IncomeDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID,'D',@IncomeDepositoAmount,                   
	@IncomeDepositoAmount,0,1,@IncomeDepositoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeDeposito and Status = 2    
END

if @ARInterestDepositoAmount > 0
BEGIN
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,2,1,2,@ARInterestDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID,'C',@ARInterestDepositoAmount,                   
	0,@ARInterestDepositoAmount,1,0,@ARInterestDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ARInterestDeposito and Status = 2    
END
IF (@IncomeDeposito <> @TaxDeposito)
BEGIN
    if @TaxDepositoAmount > 0
    BEGIN
	    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
    ,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	    Select  @FundJournalPK,3,1,2,@TaxDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE BREAK INTEREST: ' + @InstrumentID,'C',@TaxDepositoAmount,                   
	    0,@TaxDepositoAmount,1,0,@TaxDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxDeposito and Status = 2    
    END
END
Declare @BDNewInterestAmount numeric(22,4)
Declare @BDBalance numeric(22,4)
Declare @BDInterestDaysType int
Declare @BDInterestPercent numeric(8,4)
Declare @BDAcqDate datetime
Declare @BDInterestPaymentType int
Declare @BDMaturityDate datetime
Declare @BDPaymentModeOnMaturity int
Declare @BDTaxPercent numeric(8,4)

Select @BDBalance = Balance,@BDInterestDaysType = InterestDaysType
,@BDInterestPercent = InterestPercent
,@BDAcqDate = AcqDate
,@BDInterestPaymentType = InterestPaymentType
,@BDMaturityDate = MaturityDate
,@BDPaymentModeOnMaturity = PaymentModeOnMaturity
,@BDTaxPercent = TaxExpensePercent
From FundPosition where Date = @DateYesterday and InstrumentPK = @PInstrumentPK


set @BDNewInterestAmount = dbo.[FGetDepositoInterestAccruedForPayment](@ValueDate,@PInstrumentPK,@BDBalance,@BDInterestDaysType,@PBreakInterestPercent,@BDAcqDate,@BDInterestPaymentType,@ValueDate,@BDPaymentModeOnMaturity)
		
if @BDNewInterestAmount > 0
BEGIN
	Declare @BDTaxAmount numeric(22,4)
	Declare @BDIncomeAmount numeric(22,4)
	set @BDTaxAmount = @BDNewInterestAmount * @BDTaxPercent/100
	set @BDIncomeAmount = @BDNewInterestAmount - @BDTaxAmount
					
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal   
				
	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

		Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
		@PReference,'LIQUIDATE NEW INTEREST: '  + @InstrumentID + ', NOMINAL : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                      

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE NEW INTEREST: ' + @InstrumentID,'D',@BDIncomeAmount,                   
	@BDIncomeAmount,0,1,@BDIncomeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2        
				
		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

		Select  @FundJournalPK,2,1,2,@IncomeDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE NEW INTEREST: ' + @InstrumentID,'C',@BDNewInterestAmount,0,@BDNewInterestAmount,1,0,@BDNewInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeDeposito and Status = 2    

		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

		Select  @FundJournalPK,3,1,2,@TaxDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'LIQUIDATE NEW INTEREST: ' + @InstrumentID,'D',@BDTaxAmount,@BDTaxAmount,0,1,@BDTaxAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxDeposito and Status = 2    

END
END
ELSE
BEGIN

set @IncomeDepositoAmount = dbo.FGetDepositoInterestAccrued(@ValueDate,@PInstrumentPK,@PDoneVolume,4,@PInterestPercent,@ValueDate)
set @TaxDepositoAmount = 0.2 * @IncomeDepositoAmount


select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal   
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                      

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'LIQUIDATE: '  + @InstrumentID + ', NOMINAL : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                    

if @ARInterestDepositoAmount > 0
BEGIN
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

    Select  @FundJournalPK,1,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'D',@ARInterestDepositoAmount + @IncomeDepositoAmount - @TaxDepositoAmount,                   
	@ARInterestDepositoAmount + @IncomeDepositoAmount - @TaxDepositoAmount ,0,1,@ARInterestDepositoAmount + @IncomeDepositoAmount - @TaxDepositoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2             

		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

		Select  @FundJournalPK,2,1,2,@ARInterestDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'C',@ARInterestDepositoAmount,
    0,@ARInterestDepositoAmount,1,0,@ARInterestDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ARInterestDeposito and Status = 2    

    
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

	Select  @FundJournalPK,3,1,2,@TaxDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'D',@TaxDepositoAmount,                   
	@TaxDepositoAmount,0,1,@TaxDepositoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxDeposito and Status = 2             

 		INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
 	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                            

 		Select  @FundJournalPK,4,1,2,@IncomeDeposito,CurrencyPK,@PFundPK,@PInstrumentPK,0,'EARLY LIQUIDATE INTEREST: ' + @InstrumentID,'C',@IncomeDepositoAmount,
    0,@IncomeDepositoAmount,1,0,@IncomeDepositoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @IncomeDeposito and Status = 2    



  

END
END
	

END  


-- A8. BUY MUTUAL FUND --                  
if @PTrxType = 1 and @PInstrumentTypePK in (6)                 
BEGIN  
                                            
	Select @InvestmentAcc = InvestmentMutualFund,@PayablePurchaseAcc = PayablePurchaseMutualFund
	From FundAccountingSetup where Status = 2 and FundPK = @PFundPK                   
             
                  
	Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
	
	-- Setup Account kelar diatas, Next masukin ke Fund Journal 
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                

	-- T0                  
	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

	Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@ValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
	@PReference,'T0 MUTUAL FUND BUY: ' + @InstrumentID + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                     

	
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select  @FundJournalPK,1,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTUAL FUND BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
	@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTUAL FUND BUY: ' + @InstrumentID,'C',@PDoneAmount,                   
	0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                


	-- T Settled                
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 
	
	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

	Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
	@PReference,'T-Settled MUTUAL FUND BUY: ' + @InstrumentID + ',  VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND BUY: ' + @InstrumentID,'D',@PDoneAmount,                   
	@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2                   

  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
	,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 

	Select @FundJournalPK,2,1,2,@PayablePurchaseAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND BUY: ' + @InstrumentID,'C',@PDoneAmount,                   
	0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayablePurchaseAcc and Status = 2                  



	
            
END                  

-- A9.SELL MUTUAL FUND --
ELSE if @PTrxType = 2 and @PInstrumentTypePK in (6) 
BEGIN                             
Select @InvestmentAcc = InvestmentMutualFund,@ReceivableSaleAcc = AccountReceivableSaleMutualFund
From FundAccountingSetup where Status = 2 and FundPK = @PFundPK      
                                  
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundCashRefPK = @PFundCashRefPK                  
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                


-- T0                  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                 
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PValueDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T0 MUTAL FUND SELL: '  + @InstrumentID + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                      


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@InvestmentAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTAL FUND SELL: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InvestmentAcc and Status = 2    
                

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,2,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'T0 MUTAL FUND SELL: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                  

-- T Settled       
         
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PPeriodPK,@PSettlementDate,5,@maxEndDayTrailsPK,'TRANSACTION',                  
@PReference,'T-Settled MUTUAL FUND SELL: '  + @InstrumentID + ', VOLUME : ' + convert(varchar,cast(@PDoneVolume as money), 1) 
  
  ,0,@UsersID,@LastUpdate,@LastUpdate                                      


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select  @FundJournalPK,1,1,2,@ReceivableSaleAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND SELL: ' + @InstrumentID,'C',@PDoneAmount,                   
0,@PDoneAmount,1,0,@PDoneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ReceivableSaleAcc and Status = 2                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK],[FundClientPK]                  
,[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                 
Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@PFundPK,@PInstrumentPK,0,'TSETTLED MUTUAL FUND SELL: ' + @InstrumentID,'D',@PDoneAmount,                   
@PDoneAmount,0,1,@PDoneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                



END 

	           
Fetch next From A Into                  
@PValueDate,@PPeriodPK,@PReference,@PTrxType,@PCounterpartPK,@PInstrumentPK,@PFundPK,@PFundCashRefPK,                  
@PDoneAccruedInterest,@PSettlementDate,@PDoneVolume,@PAmount,@PDoneAmount,@PCommissionAmount,@PLevyAmount,@PKPEIAmount,                  
@PVATAmount,@PWHTAmount,@POTCAmount,@PIncomeTaxSellAmount,@PIncomeTaxInterestAmount,@PIncomeTaxGainAmount,@PTotalAmount,@PInstrumentTypePK,@PCurrencyRate,
@PBreakInterestPercent,@PSettlementPK,@PTaxExpensePercent,@PInterestPercent,@PAcqDate       
END                  
Close A                  
Deallocate A                
-------------------------------------------------------------------------------------------------------------------
-- B. DAILY FEE & PAYMENT FEE --

Create Table #ZFundFee               
(                  
DateOfPayment int,  
FundPK int,                  
ManagementFeePercent numeric(18,8),
CustodiFeePercent numeric(18,8),
AuditFeeAmount numeric(18,4),
MovementFeeAmount numeric(18,4),
ManagementFeeDays int,
CustodiFeeDays int,
AuditFeeDays int,
SinvestFeeDays int,
FundType int,
BitSinvestFee bit,
OtherFeeOneAmount numeric(18,4),
OtherFeeTwoAmount numeric(18,4),
)   


Declare @DecimalPlaces   int                  
Declare @RoundingMode   int                  
Declare @FundID     nvarchar(50)       
Declare @LastEndDayTrailsDate datetime       

Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  and status = 2                

Declare @ManagementFeeExpAcc    int                  
Declare @CustodianFeeExpAcc     int                  
Declare @AuditFeeExpAcc      int    
Declare @SinvestFeeExpAcc      int   
Declare @MovementFeeExpAcc    int                
Declare @PayableManagementFeeAcc   int                  
Declare @PayableCustodianFeeAcc    int                  
Declare @PayableAuditFeeAcc     int      
Declare @PayableSinvestFeeAcc     int
Declare @PayableMovementFeeAcc     int                
               
Declare @feeDays  int          
Declare @PayableSubscriptionFee int,@PayableRedemptionFee int
declare @BPayableSwitchingFee int
    

Select @feeDays =  DateDiff(day,ValueDate,@ValueDate),@LastEndDayTrailsDate = ValueDate From EndDayTrails              
Where ValueDate = 
(
Select Max(ValueDate) From EndDayTrails Where ValueDate < @ValueDate and status = 2 
)  

set @feeDays = isnull(@feeDays,0)         

Declare @BFundPK int                  
Declare @BManagementFeePercent numeric(18,6)                  
Declare @BCustodiFeePercent  numeric(18,6)                  
Declare @BAuditFeePercent  numeric(18,6) 


Declare @BSinvestFeePercent  numeric(18,8) 

Declare @BManagementFeeDays  int                  
Declare @BCustodiFeeDays  int                  
Declare @BAuditFeeDays   int   
Declare @BSinvestFeeDays  int   
Declare @BFundType  int    
Declare @BBitSinvestFee  bit         

     

Declare @BDateOfPayment  int                  
Declare @BAum     numeric(22,8)                  
Declare @BManagementFeeAmount numeric(18,6)                  
Declare @BCustodiFeeAmount  numeric(18,6)                  
Declare @BAuditFeeAmount  numeric(18,6)   
Declare @BMovementFeeAmount  numeric(18,6)      

Declare @BSinvestFeeAmount  numeric(18,8)                  

Declare @BPayableSubscriptionFeeAmount numeric(18,6)
Declare @BPayableRedemptionFeeAmount numeric(18,6)
Declare @BPayableSwitchingFeeAmount numeric(18,6)

Declare @BOtherFeeOneAmount  numeric(18,6) 
Declare @BOtherFeeTwoAmount  numeric(18,6) 

Declare @BPayableOtherFeeOne  int    
Declare @BPayableOtherFeeTwo  int   
Declare @BOtherFeeOneExpense  int    
Declare @BOtherFeeTwoExpense  int 



insert into #ZFundFee
Select DateOfPayment,A.FundPK,A.ManagementFeePercent,CustodiFeePercent,
AuditFeeAmount,MovementFeeAmount, ManagementFeeDays,CustodiFeeDays,AuditFeeDays,SInvestFeeDays,Type,B.BitSinvestFee,OtherFeeOneAmount,OtherFeeTwoAmount                  
From FundFee A
left join Fund B on A.FundPK = B.FundPK and B.Status = 2
Where A.status = 2 and A.Date = (
Select max(date) from FundFee C where C.date	<= @ValueDate     and C.status = 2 and A.FundPK = C.FundPK
) 


Declare B Cursor For                  
Select FundPK,ManagementFeePercent ,CustodiFeePercent ,
 AuditFeeAmount,MovementFeeAmount, ManagementFeeDays ,CustodiFeeDays,AuditFeeDays,SInvestFeeDays,DateOfPayment,FundType,BitSinvestFee,OtherFeeOneAmount,OtherFeeTwoAmount   from #ZFundFee
Open B                  
Fetch Next From B                  
Into @BFundPK,@BManagementFeePercent,@BCustodiFeePercent,
@BAuditFeeAmount,@BMovementFeeAmount, @BManagementFeeDays,@BCustodiFeeDays,@BAuditFeeDays,@BSInvestFeeDays,@BDateOfPayment,@BFundType,@BBitSinvestFee,@BOtherFeeOneAmount,@BOtherFeeTwoAmount                   
While @@FETCH_STATUS = 0                  
Begin                  
Select @ManagementFeeExpAcc = ManagementFeeExpense, @CustodianFeeExpAcc =CustodianFeeExpense , @AuditFeeExpAcc = AuditFeeExpense,@MovementFeeExpAcc = MovementFeeExpense,                  
@PayableManagementFeeAcc = PayableManagementFee,@PayableCustodianFeeAcc = PayableCustodianFee,@PayableAuditFeeAcc = PayableAuditFee,@PayableMovementFeeAcc = PayableMovementFee    
,@PayableSubscriptionFee = PayableSubscriptionFee,@PayableRedemptionFee = PayableRedemptionFee 
,@BPayableSwitchingFee = PayableSwitchingFee,@PayableSinvestFeeAcc = PayableSInvestFee, @SinvestFeeExpAcc = SInvestFee
,@BPayableOtherFeeOne = PayableOtherFeeOne, @BPayableOtherFeeTwo = PayableOtherFeeTwo,@BOtherFeeOneExpense = OtherFeeOneExpense, @BOtherFeeTwoExpense = OtherFeeTwoExpense             
From FundAccountingSetup Where Status = 2    and FundPK = @BFundPK    

-- B1. GENERATE DAILY FEE                  
set @BAum = 0


Select @BAum =  AUM From CloseNAV where Date = @DateYesterday and Status =  2 and FundPK = @BFundPK                  
Select @DecimalPlaces = JournalDecimalPlaces, @RoundingMode = JournalRoundingMode, @FundID = A.ID From Fund A 
left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.status = 2
left join Bank C on B.BankPK = C.BankPK and C.status = 2
where A.Status = 2 and A.FundPK = @BFundPK             


--1	STRUCTURED FUND : GUARANTEED FUND ok
--2	FIXED INCOME FUND ok
--3	MONEY MARKET FUND ok
--4	STRUCTURED FUND : CAPITAL PROTECTED FUND ok
--5	EQUITY FUND ok
--6	STRUCTURED FUND : INDEX FUND ok
--7	CIC ASSET BACKED SECURITIES ok
--8	DISCETIONARY FUND ok
--9	MIXED ASSET FUND ok
--10 EXCHANGE TRADED FUND ok
--11 REAL ESTATE INVESTMENT TRUST ok
--12 PRIVATE EQUITY FUND ok

Select @BSinvestFeeDays = SinvestFeeDays from SInvestSetup where status = 2

IF (@BFundType in (1,3,4,6,8,11,12))
BEGIN
	Select @BSinvestFeePercent = SinvestMoneyMarketFeePercent from SInvestSetup where status = 2
END
ELSE IF (@BFundType in (2,7,9))
BEGIN
	Select @BSinvestFeePercent = SinvestBondFeePercent from SInvestSetup where status = 2
END
ELSE
BEGIN
	Select @BSinvestFeePercent = SinvestEquityFeePercent from SInvestSetup where status = 2
END



-- 1 = UP, 2 = DOWN , 3 = NONE                  	
If @RoundingMode = 1                      
BEGIN                    
IF @BAum > 0 and ((@BManagementFeePercent > 0 and @BManagementFeeDays >0) or (@BCustodiFeePercent > 0 and @BCustodiFeeDays >0) or (@BSinvestFeePercent > 0 and @BSinvestFeeDays >0))
BEGIN
Set @BManagementFeeAmount = isnull(CEILING((@BAum * (@BManagementFeePercent/100))/ @BManagementFeeDays),0) * @FeeDays                      
Set @BCustodiFeeAmount = isnull(CEILING((@BAum * (@BCustodiFeePercent/100))/ @BCustodiFeeDays),0)  * @FeeDays  
Set @BSinvestFeeAmount = isnull(CEILING((@BAum * (@BSinvestFeePercent/100))/ @BSinvestFeeDays),0)  * @FeeDays
END
Set @BAuditFeeAmount = isnull(CEILING(@BAuditFeeAmount),0)  * @FeeDays  
Set @BMovementFeeAmount = isnull(CEILING(@BMovementFeeAmount),0)  * @FeeDays   
Set @BOtherFeeOneAmount = isnull(CEILING(@BOtherFeeOneAmount),0)  * @FeeDays  
Set @BOtherFeeTwoAmount = isnull(CEILING(@BOtherFeeTwoAmount),0)  * @FeeDays                
END                  

If @RoundingMode = 2                      
BEGIN                    
IF @BAum > 0 and ((@BManagementFeePercent > 0 and @BManagementFeeDays >0) or (@BCustodiFeePercent > 0 and @BCustodiFeeDays >0) or (@BSinvestFeePercent > 0 and @BSinvestFeeDays >0))
BEGIN
Set @BManagementFeeAmount = isnull(FLOOR((@BAum * (@BManagementFeePercent/100))/ @BManagementFeeDays),0)  * @FeeDays                    
Set @BCustodiFeeAmount = isnull(FLOOR((@BAum * (@BCustodiFeePercent/100))/ @BCustodiFeeDays),0) * @FeeDays 
Set @BSinvestFeeAmount = isnull(FLOOR((@BAum * (@BSinvestFeePercent/100))/ @BSinvestFeeDays),0)  * @FeeDays  
END
Set @BAuditFeeAmount = isnull(FLOOR(@BAuditFeeAmount),0)  * @FeeDays 
Set @BMovementFeeAmount = isnull(FLOOR(@BMovementFeeAmount),0)  * @FeeDays  
Set @BOtherFeeOneAmount = isnull(FLOOR(@BOtherFeeOneAmount),0)  * @FeeDays  
Set @BOtherFeeTwoAmount = isnull(FLOOR(@BOtherFeeTwoAmount),0)  * @FeeDays               
END                  

If @RoundingMode = 3                      
BEGIN                    
IF @BAum > 0 and ((@BManagementFeePercent > 0 and @BManagementFeeDays >0) or (@BCustodiFeePercent > 0 and @BCustodiFeeDays >0) or (@BSinvestFeePercent > 0 and @BSinvestFeeDays >0))
BEGIN
Set @BManagementFeeAmount = isnull(ROUND((@BAum * (@BManagementFeePercent/100))/@BManagementFeeDays,@DecimalPlaces),0)  * @FeeDays                 
Set @BCustodiFeeAmount = isnull(ROUND((@BAum * (@BCustodiFeePercent/100))/@BCustodiFeeDays,@DecimalPlaces),0)    * @FeeDays   
Set @BSinvestFeeAmount = isnull(ROUND((@BAum * (@BSinvestFeePercent/100))/@BSinvestFeeDays,@DecimalPlaces),0)  * @FeeDays
END
Set @BAuditFeeAmount = isnull(@BAuditFeeAmount,0)  * @FeeDays    
Set @BMovementFeeAmount = isnull(@BMovementFeeAmount,0)  * @FeeDays      
Set @BOtherFeeOneAmount = isnull(@BOtherFeeOneAmount,0)  * @FeeDays  
Set @BOtherFeeTwoAmount = isnull(@BOtherFeeTwoAmount,0)  * @FeeDays       
END                  





if isnull(@BAum,0) = 0
begin
set @BManagementFeeAmount = 0
set @BCustodiFeeAmount = 0
set @BAuditFeeAmount = 0
set @BMovementFeeAmount = 0
set @BSinvestFeeAmount = 0
set @BOtherFeeOneAmount = 0
set @BOtherFeeTwoAmount = 0
end




-- Setup Account kelar diatas, Next masukin ke Fund Journal  
if @BManagementFeeAmount > 0 or @BCustodiFeeAmount > 0 or @BAuditFeeAmount > 0
BEGIN
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                 

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,6,@maxEndDayTrailsPK,'DAILY FEE',                  
'','FUND ID: ' + @FundID ,0,@UsersID,@LastUpdate,@LastUpdate                  
END    

if @BManagementFeeAmount > 0
BEGIN
		
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@ManagementFeeExpAcc,CurrencyPK,@BFundPK,0,0,'MANAGEMENT FEE FUND ID: ' + @FundID,'D',@BManagementFeeAmount,                   
@BManagementFeeAmount,0,1,@BManagementFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @ManagementFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@PayableManagementFeeAcc,CurrencyPK,@BFundPK,0,0,'MANAGEMENT FEE FUND ID: ' + @FundID,'C',@BManagementFeeAmount,                   
0,@BManagementFeeAmount,1,0,@BManagementFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableManagementFeeAcc and Status = 2                  

END

if @BCustodiFeeAmount > 0
BEGIN

	
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,3,1,2,@CustodianFeeExpAcc,CurrencyPK,@BFundPK,0,0,'CUSTODI FEE FUND ID: ' + @FundID,'D',@BCustodiFeeAmount,                   
@BCustodiFeeAmount,0,1,@BCustodiFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CustodianFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,4,1,2,@PayableCustodianFeeAcc,CurrencyPK,@BFundPK,0,0,'CUSTODI FEE FUND ID: ' + @FundID,'C',@BCustodiFeeAmount,                   
0,@BCustodiFeeAmount,1,0,@BCustodiFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableCustodianFeeAcc and Status = 2       

END
  
if @BAuditFeeAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,5,1,2,@AuditFeeExpAcc,CurrencyPK,@BFundPK,0,0,'AUDIT FEE FUND ID: ' + @FundID,'D',@BAuditFeeAmount,                   
@BAuditFeeAmount,0,1,@BAuditFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @AuditFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,6,1,2,@PayableAuditFeeAcc,CurrencyPK,@BFundPK,0,0,'AUDIT FEE FUND ID: ' + @FundID,'C',@BAuditFeeAmount,                   
0,@BAuditFeeAmount,1,0,@BAuditFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableAuditFeeAcc and Status = 2                  
		
END

IF (@BBitSInvestFee = 1)
BEGIN

    if @BSinvestFeeAmount > 0
    BEGIN

	
    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
    ,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,7,1,2,@SinvestFeeExpAcc,CurrencyPK,@BFundPK,0,0,'SINVEST FEE FUND ID: ' + @FundID,'D',@BSinvestFeeAmount,                   
    @BSinvestFeeAmount,0,1,@BSinvestFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SinvestFeeExpAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
    ,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,8,1,2,@PayableSinvestFeeAcc,CurrencyPK,@BFundPK,0,0,'SINVEST FEE FUND ID: ' + @FundID,'C',@BSinvestFeeAmount,                   
    0,@BSinvestFeeAmount,1,0,@BSinvestFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableSinvestFeeAcc and Status = 2       

    END
END


if @BMovementFeeAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,9,1,2,@MovementFeeExpAcc,CurrencyPK,@BFundPK,0,0,'MOVEMENT FEE FUND ID: ' + @FundID,'D',@BMovementFeeAmount,                   
@BMovementFeeAmount,0,1,@BMovementFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @MovementFeeExpAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,10,1,2,@PayableMovementFeeAcc,CurrencyPK,@BFundPK,0,0,'MOVEMENT FEE FUND ID: ' + @FundID,'C',@BMovementFeeAmount,                   
0,@BMovementFeeAmount,1,0,@BMovementFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableMovementFeeAcc and Status = 2                  
		
END


if @BOtherFeeOneAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,11,1,2,@BOtherFeeOneExpense,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'D',@BOtherFeeOneAmount,                   
@BOtherFeeOneAmount,0,1,@BOtherFeeOneAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BOtherFeeOneExpense and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,12,1,2,@BPayableOtherFeeOne,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'C',@BOtherFeeOneAmount,                   
0,@BOtherFeeOneAmount,1,0,@BOtherFeeOneAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BPayableOtherFeeOne and Status = 2                  
		
END


if @BOtherFeeTwoAmount > 0
BEGIN         
INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,13,1,2,@BOtherFeeTwoExpense,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'D',@BOtherFeeTwoAmount,                   
@BOtherFeeTwoAmount,0,1,@BOtherFeeTwoAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BOtherFeeTwoExpense and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,14,1,2,@BPayableOtherFeeTwo,CurrencyPK,@BFundPK,0,0,'OTHER FEE FUND ID: ' + @FundID,'C',@BOtherFeeTwoAmount,                   
0,@BOtherFeeTwoAmount,1,0,@BOtherFeeTwoAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BPayableOtherFeeTwo and Status = 2                  
		
END

	            

---------------- TINGGAL TEST SUDAH TAMBAH PAYABLE SUBS DAN REDEMPT FEE
-- B2. GENERATE PAYMENT FEE

Declare @EOMonthForFee datetime
Select @CashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @BFundPK
if(@BDateOfPayment = day(@ValueDate) or (@BDateOfPayment >= day(@LastEndDayTrailsDate) and @BDateOfPayment <= day(@ValueDate)))
BEGIN
Declare @BManagementFeeAmountCheck numeric(22,4)
Declare @BCustodiFeeAmountCheck numeric(22,4)
Declare @BSinvestFeeAmountCheck numeric(22,4)
Declare @BPayableRedemptionFeeAmountCheck numeric(22,4)
Declare @BPayableSubscriptionFeeAmountCheck numeric(22,4)
Declare @BPayableSwitchingFeeAmountCheck numeric(22,4)

set @EOMonthForFee = dateadd(month,-1,@ValueDate)
set @EOMonthForFee = EOMONTH (@EOMonthForFee)
	
set @BManagementFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableManagementFeeAcc,@BFundPK)
set @BCustodiFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableCustodianFeeAcc,@BFundPK)
set @BSinvestFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableSinvestFeeAcc,@BFundPK)

set @BPayableRedemptionFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableRedemptionFee,@BFundPK)
set @BPayableSubscriptionFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@PayableSubscriptionFee,@BFundPK)
set @BPayableSwitchingFeeAmount = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@EOMonthForFee,@BPayableSwitchingFee,@BFundPK)

set @BManagementFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableManagementFeeAcc,@BFundPK)
set @BCustodiFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableCustodianFeeAcc,@BFundPK)
set @BSinvestFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableSinvestFeeAcc,@BFundPK)

set @BPayableRedemptionFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableRedemptionFee,@BFundPK)
set @BPayableSubscriptionFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@PayableSubscriptionFee,@BFundPK)
set @BPayableSwitchingFeeAmountCheck = [dbo].[FGetAccountFundJournalBalanceByFundPK] (@ValueDate,@BPayableSwitchingFee,@BFundPK)

Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 
			                    
if @BManagementFeeAmount > 0  or @BCustodiFeeAmount > 0 or @BSinvestFeeAmount > 0 or @BPayableRedemptionFeeAmount > 0   or  
@BPayableSubscriptionFeeAmount > 0  or 
@BPayableSwitchingFeeAmount > 0   
Begin                                    
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  
                      
Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,6,@maxEndDayTrailsPK,'PAYMENT FEE',                  
'','FUND ID: ' + @FundID ,0,@UsersID,@LastUpdate,@LastUpdate                  
                        
if @BManagementFeeAmount > 0  and @BManagementFeeAmount < @BManagementFeeAmountCheck                
Begin                       
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,1,1,2,@PayableManagementFeeAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT MANAGEMENT FEE FUND ID: ' + @FundID,'D',@BManagementFeeAmount,                   
		@BManagementFeeAmount,0,1,@BManagementFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableManagementFeeAcc and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,2,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT MANAGEMENT FEE FUND ID: ' + @FundID,'C',@BManagementFeeAmount,                   
		0,@BManagementFeeAmount,1,0,@BManagementFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
end                  
if @BCustodiFeeAmount > 0  and @BCustodiFeeAmount < @BCustodiFeeAmountCheck                
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,3,1,2,@PayableCustodianFeeAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT CUSTODIAN FEE FUND ID: ' + @FundID,'D',@BCustodiFeeAmount,                   
		@BCustodiFeeAmount,0,1,@BCustodiFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableCustodianFeeAcc and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,4,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT CUSTODIAN FEE FUND ID: ' + @FundID,'C',@BCustodiFeeAmount,                   
		0,@BCustodiFeeAmount,1,0,@BCustodiFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

if @BSinvestFeeAmount > 0  and @BSinvestFeeAmount < @BSinvestFeeAmountCheck                
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,5,1,2,@PayableSinvestFeeAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT SINVEST FEE FUND ID: ' + @FundID,'D',@BSinvestFeeAmount,                   
		@BSinvestFeeAmount,0,1,@BSinvestFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableSinvestFeeAcc and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,6,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT CUSTODIAN FEE FUND ID: ' + @FundID,'C',@BSinvestFeeAmount,                   
		0,@BSinvestFeeAmount,1,0,@BSinvestFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

if @BPayableRedemptionFeeAmount > 0   and @BPayableRedemptionFeeAmount < @BPayableRedemptionFeeAmountCheck               
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,7,1,2,@PayableRedemptionFee,CurrencyPK,@BFundPK,0,0,'PAYMENT AP REDEMPTION FEE FUND ID: ' + @FundID,'D',@BPayableRedemptionFeeAmount,                   
		@BPayableRedemptionFeeAmount,0,1,@BPayableRedemptionFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableRedemptionFee and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,8,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT AP REDEMPTION FEE FUND ID: ' + @FundID,'C',@BPayableRedemptionFeeAmount,                   
		0,@BPayableRedemptionFeeAmount,1,0,@BPayableRedemptionFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

if @BPayableSubscriptionFeeAmount > 0        and @BPayableSubscriptionFeeAmount < @BPayableSubscriptionFeeAmountCheck           
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,9,1,2,@PayableSubscriptionFee,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'D',@BPayableSubscriptionFeeAmount,                					@BPayableSubscriptionFeeAmount,0,1,@BPayableSubscriptionFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @PayableSubscriptionFee and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,10,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'C',@BPayableSubscriptionFeeAmount,                   
		0,@BPayableSubscriptionFeeAmount,1,0,@BPayableSubscriptionFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

if @BPayableSwitchingFeeAmount > 0    and @BPayableSwitchingFeeAmount < @BPayableSwitchingFeeAmountCheck              
Begin                            
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                      
		Select  @FundJournalPK,11,1,2,@BPayableSwitchingFee,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'D',@BPayableSwitchingFeeAmount,                					@BPayableSwitchingFeeAmount,0,1,@BPayableSwitchingFeeAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @BPayableSwitchingFee and Status = 2                   
                  
	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  
                  
		Select @FundJournalPK,12,1,2,@CashAtBankAcc,CurrencyPK,@BFundPK,0,0,'PAYMENT AP SUBSCRIPTION FEE FUND ID: ' + @FundID,'C',@BPayableSwitchingFeeAmount,                   
		0,@BPayableSwitchingFeeAmount,1,0,@BPayableSwitchingFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @CashAtBankAcc and Status = 2                  
End 

End

END

Fetch next From B   
Into @BFundPK,@BManagementFeePercent,@BCustodiFeePercent,
@BAuditFeeAmount,@BMovementFeeAmount,@BManagementFeeDays,@BCustodiFeeDays,@BAuditFeeDays,@BSInvestFeeDays,@BDateOfPayment,@BFundType,@BBitSinvestFee,@BOtherFeeOneAmount,@BOtherFeeTwoAmount
                     
End                  
Close B                  
Deallocate B   
---------------------------------------------------------------------------------------------------------------------------
 -- B3. BANK INTEREST


declare @EFundPK int
declare @EFundID nvarchar(50)
declare @ECashAcc int
declare @EInterestPercent numeric (18,6)
declare @EInterestDays numeric (22,6)
declare @EBalance numeric (22,6)
declare @EMinimumBalance numeric (18,6)
declare @EBankInterestAmount numeric (22,6)
declare @EBankInterestAcc int
declare @EBankInterestIncomeAcc int

--declare @DateYesterDay datetime
--set @DateYesterDay = dbo.FWorkingDay(@ValueDate, - 1)

DECLARE E CURSOR FOR 
Select FundPK,ID From Fund where status in (1,2)
        	
Open E
Fetch Next From E
Into @EFundPK,@EFundID
        
While @@FETCH_STATUS = 0
BEGIN  
    set @EBankInterestAmount = 0

    IF EXISTS(select * from BankInterestSetup A left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
    where A.status in (1,2) and B.FundPK = @EFundPK)
    BEGIN
        DECLARE F CURSOR FOR 
        select MinimumBalance,InterestPercent,InterestDays from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and B.FundPK = @EFundPK and Date = (
        Select max(date) from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and B.FundPK = @EFundPK and Date <= @ValueDate
        )
        	
        Open F
        Fetch Next From F
        Into @EMinimumBalance,@EInterestPercent,@EInterestDays
        
        While @@FETCH_STATUS = 0
        BEGIN  
			select @ECashAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @EFundPK and Type = 3
			select @EBalance = dbo.FGetAccountFundJournalBalanceByFundPK(@DateYesterday,@ECashAcc,@EFundPK)

			IF(@EBalance >= @EMinimumBalance)
			BEGIN
			    set @EBankInterestAmount =  isnull((@EBalance * (@EInterestPercent/100))/ @EInterestDays * @FeeDays,0) 
			END
			ELSE
			BEGIN 
				set @EBankInterestAmount = 0
			END

		Fetch next From F Into @EMinimumBalance,@EInterestPercent,@EInterestDays
		END
		Close F
		Deallocate F 
	END
	ELSE
	BEGIN
		DECLARE F CURSOR FOR 
        select MinimumBalance,InterestPercent,InterestDays from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and A.BankBranchPK = 0 and Date = (
        Select max(date) from BankInterestSetup A 
		left join Fund B on A.BankBranchPK = B.BankBranchPK and B.status in (1,2)
        where A.status in (1,2) and A.BankBranchPK = 0 and Date <= @ValueDate
        )

        	
        Open F
        Fetch Next From F
        Into @EMinimumBalance,@EInterestPercent,@EInterestDays
        
        While @@FETCH_STATUS = 0
        BEGIN  
			select @ECashAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @EFundPK and Type = 3
			select @EBalance = dbo.FGetAccountFundJournalBalanceByFundPK(@DateYesterday,@ECashAcc,@EFundPK)

			IF(@EBalance >= @EMinimumBalance)
			BEGIN
				set @EBankInterestAmount =  isnull((@EBalance * (@EInterestPercent/100))/ @EInterestDays * @FeeDays,0) 
			END
			ELSE
			BEGIN 
				set @EBankInterestAmount = 0
			END
				
			--select @EFundPK,@EBalance,@EInterestPercent,@EInterestDays

		Fetch next From F Into @EMinimumBalance,@EInterestPercent,@EInterestDays
		END
		Close F
		Deallocate F 
	END


	
	-- Setup Account kelar diatas, Next masukin ke Fund Journal  
	if @EBankInterestAmount > 0
	BEGIN
	select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   

	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                 

	Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,6,@maxEndDayTrailsPK,'BANK DAILY INTEREST',                  
	'','FUND ID: ' + @EFundID,0,@UsersID,@LastUpdate,@LastUpdate                  
	END    

	if @EBankInterestAmount > 0
	BEGIN
		
		select @EBankInterestAcc = InterestAccrGiro,@EBankInterestIncomeAcc = IncomeInterestGiro from FundAccountingSetup where FundPK = @EFundPK and status in (1,2)

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	Select  @FundJournalPK,1,1,2,@EBankInterestAcc,CurrencyPK,@EFundPK,0,0,'BANK DAILY INTEREST FUND ID: ' + @EFundID,'D',@EBankInterestAmount,                   
	@EBankInterestAmount,0,1,@EBankInterestAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @EBankInterestAcc and Status = 2                   

	INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[FundClientPK]                  
	,[InstrumentPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	Select @FundJournalPK,2,1,2,@EBankInterestIncomeAcc,CurrencyPK,@EFundPK,0,0,'BANK DAILY INTEREST FUND ID: ' + @EFundID,'C',@EBankInterestAmount,                   
	0,@EBankInterestAmount,1,0,@EBankInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @EBankInterestIncomeAcc and Status = 2                  

	END


	
Fetch next From E Into @EFundPK,@EFundID
END
Close E
Deallocate E 

---------------------------------------------------------------------------------------------------------------------------

-- C. REVAL,GENERATE BOND,DEPOSITO ACCRUED  --             

declare @RevalMutualFund int
declare @InvestMutualFund int
declare @RevalEquity int
declare @InvestEquity int
declare @RevalBond int
declare @InvestBond int
declare @MarketValue numeric(22,6)   
declare @PrevMarketValue numeric(22,6) 

Declare @RevaluationAcc    int                  
Declare @UnrealisedAcc    int                  
Declare @FInstrumentPK    int         
Declare @FInstrumentID    nvarchar(100)                  
Declare @FFundPK     int                  
Declare @FTrxAmount     numeric(22,6)                  
Declare @FMarketValue    numeric(22,6)                  
Declare @FInstrumentTypePK   int                  
Declare @FCurrencyPK    int                  
Declare @FPrevRevaluationAmount  numeric(22,6)                  
Declare @FFinalAmount    numeric(22,6)                  
Declare @FLastCouponDate   datetime                  
Declare @FInterestAmount   numeric(18,6)                  
Declare @FBalance     numeric(18,0)                  
Declare @FTaxExpenseAmount   numeric(18,6)                  
Declare @FTaxExpensePercent   numeric(18,8)                  
Declare @FAcqDate   datetime                                  
Declare @FMaturityDate  datetime  
Declare @FSell   int 
Declare @FBuy   int 
Declare @FDoneAmount    numeric(22,6) 
Declare @FInterestDaysType int
Declare @FInterestPaymentType int
Declare @FInterestPercent numeric(18,8)
Declare @FPaymentModeOnMaturity int
Declare @FBitHTM int
Declare @FReksadanaTypePK int
Declare @FAvgPrice numeric(18,12)
Declare @FValueDate datetime

--Select TaxExpensePercent,* from instrument where instrumentTYpePK in(2,3,15)
--update instrument set TaxExpensePercent = 5 where instrumentTYpePK in(2,3,15)

Declare D Cursor For   

Select A.InstrumentPK,A.FundPK
    ,sum(A.CostValue) CostValue -- isnull(C.CostValueSell,0)
    ,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
    ,B.TaxExpensePercent, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0,A.BitHTM ,isnull(B.ReksadanaTypePK,0),isnull(A.AcqDate,''),isnull(A.AvgPrice,0)                   
    From FundPosition A                 
    Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

    where A.status = 2 and TrailsPK = 
    (              
    Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate
    ) 
    and B.InstrumentTypePK in (1,2,3,4,8,9,13,14,15,16) 
    and NOT EXISTS 
    (  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and statussettlement  = 2 and valuedate = @valuedate)
    group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,A.BitHTM,B.ReksadanaTypePK,A.AcqDate,A.AvgPrice


    UNION ALL

   Select A.InstrumentPK,A.FundPK
    ,sum(A.CostValue) CostValue -- isnull(C.CostValueSell,0)
    ,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
    ,B.TaxExpensePercent, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,1,A.BitHTM ,isnull(B.ReksadanaTypePK,0),isnull(A.AcqDate,''),isnull(A.AvgPrice,0)                     
    From FundPosition A                 
    Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

    where A.status = 2 and TrailsPK = 
    (              
    Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate
    ) 
    and B.InstrumentTypePK in (1,2,3,4,8,9,13,14,15,16)  
    and  EXISTS 
    (  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and statussettlement  = 2 and valuedate = @valuedate)
    group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,A.BitHTM,B.ReksadanaTypePK,A.AcqDate,A.AvgPrice


    UNION ALL
    Select A.InstrumentPK,A.FundPK,sum(A.CostValue) CostValue,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
    ,B.TaxExpensePercent, A.MaturityDate,1 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0,A.BitHTM,isnull(B.ReksadanaTypePK,0),isnull(A.AcqDate,''),isnull(A.AvgPrice,0)                     
    From FundPosition A                 
    Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  
    where A.status = 2 and TrailsPK = 
    (              
    Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and 
    ValueDate =  (select max(ValueDate) From EndDayTrailsFundPortfolio where ValueDate < @ValueDate and status = 2)
    ) 

    and NOT EXISTS 
    (  SELECT * FROM FundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and status  = 2 and date = @ValueDate)

    and B.InstrumentTypePK in (1,2,3,4,8,9,13,14,15,16)
    group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,A.BitHTM , B.ReksadanaTypePK,A.AcqDate,A.AvgPrice


	union all

    Select A.InstrumentPK,A.FundPK
    ,sum(A.CostValue) CostValue -- isnull(C.CostValueSell,0)
    ,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
    ,B.TaxExpensePercent, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0,A.BitHTM ,isnull(B.ReksadanaTypePK,0),isnull(A.AcqDate,''),isnull(A.AvgPrice,0)                         
	from FundPosition A
	left join instrument B on A.InstrumentPK = B.instrumentPK and B.status in (1,2)
	left join ReksadanaInstrument C on A.InstrumentPK = C.ReksadanaPK and C.status in (1,2)
	left join Instrument D on C.InstrumentPK = D.InstrumentPK and D.status in (1,2)    

    where A.status = 2 and TrailsPK = 
    (              
    Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate
    ) 
    and B.InstrumentTypePK in (6) 
    and NOT EXISTS 
    (  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and statussettlement  = 2 and SettlementDate = @valuedate)
    group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,A.BitHTM ,B.ReksadanaTypePK,A.AcqDate,A.AvgPrice


    UNION ALL

    Select A.InstrumentPK,A.FundPK
    ,sum(A.CostValue) CostValue -- isnull(C.CostValueSell,0)
    ,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
    ,B.TaxExpensePercent, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,1,A.BitHTM ,isnull(B.ReksadanaTypePK,0),isnull(A.AcqDate,'') ,isnull(A.AvgPrice,0)                    
	from FundPosition A
	left join instrument B on A.InstrumentPK = B.instrumentPK and B.status in (1,2)
	left join ReksadanaInstrument C on A.InstrumentPK = C.ReksadanaPK and C.status in (1,2)
	left join Instrument D on C.InstrumentPK = D.InstrumentPK and D.status in (1,2)     

    where A.status = 2 and TrailsPK = 
    (              
    Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate
    ) 
    and B.InstrumentTypePK in (6)  
    and  EXISTS 
    (  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and statussettlement  = 2 and SettlementDate = @valuedate)
    group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,A.BitHTM ,B.ReksadanaTypePK,A.AcqDate,A.AvgPrice


    UNION ALL
    Select A.InstrumentPK,A.FundPK,sum(A.CostValue) CostValue,sum(A.MarketValue) MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)  Balance                  
    ,B.TaxExpensePercent, A.MaturityDate,1 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0 ,A.BitHTM,isnull(B.ReksadanaTypePK,0),isnull(A.AcqDate,''),isnull(A.AvgPrice,0)                      
	from FundPosition A
	left join instrument B on A.InstrumentPK = B.instrumentPK and B.status in (1,2)
	left join ReksadanaInstrument C on A.InstrumentPK = C.ReksadanaPK and C.status in (1,2)
	left join Instrument D on C.InstrumentPK = D.InstrumentPK and D.status in (1,2)
	left join 
	(
	Select InstrumentPK,sum(isnull(DoneAmount,0)) SellAmount  from investment where StatusSettlement = 2 and instrumentPK = 6 and trxtype = 2
	and ValueDate <= @ValueDate
	group by InstrumentPK
		
	)E on A.InstrumentPK = E.InstrumentPK
	left join Fund F on A.FundPK = F.FundPK and F.status in (1,2)            
    where A.status = 2 and TrailsPK = 
    (              
    Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and 
    ValueDate =  (select max(ValueDate) From EndDayTrailsFundPortfolio where ValueDate < @ValueDate and status = 2)
    ) 

    and NOT EXISTS 
    (  SELECT * FROM FundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and status  = 2 and date = @ValueDate)

    and B.InstrumentTypePK in (6)
    group by A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,A.BitHTM, B.ReksadanaTypePK,A.AcqDate,A.AvgPrice 

Open D                  
Fetch Next From D                  
Into @FInstrumentPK,@FFundPK,@FTrxAmount,@FMarketValue,@FInstrumentTypePK,@FCurrencyPK,@FInstrumentID,@FLastCouponDate,@FBalance
,@FTaxExpensePercent,@FMaturityDate,@FSell,@FInterestDaysType,@FInterestPaymentType,@FInterestPercent ,@FPaymentModeOnMaturity,@FBuy,@FBitHTM ,@FReksadanaTypePK,@FAcqDate,@FAvgPrice    
While @@FETCH_STATUS = 0                  
Begin            


    truncate table #TempAmortize

    DECLARE ZZ CURSOR FOR

    SELECT  TOP (DATEDIFF(DAY, dbo.FworkingDay(@ValueDate,-1), @ValueDate)) Dates = DATEADD(DAY, ROW_NUMBER() OVER(ORDER BY a.object_id), dbo.FworkingDay(@ValueDate,-1))
    FROM sys.all_objects a CROSS JOIN sys.all_objects b

    Open ZZ
    Fetch Next From ZZ
    Into @FValueDate

    While @@FETCH_STATUS = 0
    BEGIN

    delete #TempAmortize
      
    -- C1. REVALUATION EQUITY & BOND & MUTUAL FUND --

    select @RevalEquity = RevaluationEquity,@InvestEquity = InvestmentEquity,@RevalBond = RevaluationBond,@InvestBond = InvestmentBond,@RevalMutualFund = RevaluationMutualFund,@InvestMutualFund = InvestmentMutualFund from FundAccountingSetup where status = 2 and fundPK = @FFundPK
    IF(@RevalEquity = @InvestEquity) OR (@RevalBond = @InvestBond) OR (@RevalMutualFund = @InvestMutualFund)
    BEGIN
	    IF @FInstrumentTypePK in (2,3,8,9,11,13,14,15) -- GBOND,CBOND,SUKUK
        BEGIN    
            IF  (@FInstrumentTypePK not in (13,15))
            BEGIN
                Select @RevaluationAcc = RevaluationBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
                IF (@FBitHTM = 1)
                BEGIN
                   Select @UnrealisedAcc = UnrealisedBondHTM From FundAccountingSetup where Status = 2  and fundPK = @FFundPK  
                END
                ELSE
                BEGIN
                    Select @UnrealisedAcc = UnrealisedBond From FundAccountingSetup where Status = 2  and fundPK = @FFundPK 
                END


            END
            ELSE
            BEGIN
                Select @RevaluationAcc = RevaluationSukuk From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
                IF (@FBitHTM = 1)
                BEGIN
                    Select @UnrealisedAcc = UnrealisedSukukHTM From FundAccountingSetup where Status = 2  and fundPK = @FFundPK  
                END
                ELSE
                BEGIN
                    Select @UnrealisedAcc = UnrealisedSukuk From FundAccountingSetup where Status = 2  and fundPK = @FFundPK 
                END

            END

            Select @InterestRecAcc = InterestAccrBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @TaxExpenseAcc = TaxExpenseInterestIncomeBond From FundAccountingSetup where Status = 2  and fundPK = @FFundPK   

            IF (@FBitHTM <> 1)
            BEGIN
                IF (@FBuy = 1)
                BEGIN

                    --select @MarketValue =  dbo.FGetLastVolumeInv(@valuedate,@FFundPK,@FInstrumentPK)   * (dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)/100)           
                    --select @PrevMarketValue = dbo.FGetLastVolumeInv(dbo.FWorkingDay(@valuedate,-1),@FFundPK,@FInstrumentPK) * (dbo.FGetLastClosePriceFromFundPosition(dbo.FWorkingDay(@valuedate,-1),@FInstrumentPK,@FFundPK)/100)     
                    --select @FDoneAmount = dbo.FGetDoneAmountInv(@valuedate,@FFundPK,@FInstrumentPK)
                    --set @FFinalAmount = @MarketValue - (@PrevMarketValue + @FDoneAmount) 
                
                
                    select @MarketValue =  dbo.FGetUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)
                    select @PrevMarketValue = dbo.FGetPrevUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)

                    set @FFinalAmount = @MarketValue - @PrevMarketValue 


                END
                ELSE IF (@FSell  = 1)
                BEGIN
                    select @FPrevRevaluationAmount = isnull(sum(@FMarketValue - @FTrxAmount),0)
                    Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)

                END
                ELSE
                BEGIN

                    select @MarketValue =  dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK)   * (dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)/100)           
                    select @PrevMarketValue = dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK) * (dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK)/100) 
                    set @FFinalAmount = @MarketValue - @PrevMarketValue  

                END
            END
            -- HTM BOND
            ELSE
            BEGIN
                    set @FFinalAmount = 0
            END
        END    
   
        ELSE IF @FInstrumentTypePK in (1,4,16)    
        BEGIN    
            Select @RevaluationAcc = RevaluationEquity From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 

            IF (@FBitHTM = 1)
            BEGIN
                Select @UnrealisedAcc = UnrealisedEquityHTM From FundAccountingSetup where Status = 2  and fundPK = @FFundPK
            END
            ELSE
            BEGIN
                Select @UnrealisedAcc = UnrealisedEquity From FundAccountingSetup where Status = 2  and fundPK = @FFundPK
            END
            
            IF (@FBuy = 1)
            BEGIN
                select @MarketValue =  dbo.FGetUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)
                select @PrevMarketValue = dbo.FGetPrevUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)

                set @FFinalAmount = @MarketValue -@PrevMarketValue 
            END
            ELSE IF (@FSell  = 1)
            BEGIN
                select @FPrevRevaluationAmount = isnull(sum(@FMarketValue - @FTrxAmount),0)
                Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)

            END
            ELSE
            BEGIN
                select @MarketValue =  dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK)   * dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)           
                select @PrevMarketValue = dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK) * dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK) 
                set @FFinalAmount = @MarketValue - @PrevMarketValue 
				    
            END  
        END   
        ELSE IF @FInstrumentTypePK in (6)    
        BEGIN    
	        IF (@FReksadanaTypePK = 7) --PROTEKSI
	        BEGIN
                Select @RevaluationAcc = RevaluationProtectedFund,@UnrealisedAcc = UnrealisedProtectedFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            END
            ELSE IF (@FReksadanaTypePK = 6)
            BEGIN
                Select @RevaluationAcc = RevaluationPrivateEquityFund,@UnrealisedAcc = UnrealisedPrivateEquityFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            END
            ELSE
            BEGIN
                Select @RevaluationAcc = RevaluationMutualFund,@UnrealisedAcc = UnrealisedMutualFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            END


            IF (@FBuy = 1)
            BEGIN
                select @MarketValue =  dbo.FGetUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)
                select @PrevMarketValue = dbo.FGetPrevUnrealisedInv(@valuedate,@FFundPK,@FInstrumentPK)

                set @FFinalAmount = @MarketValue -@PrevMarketValue 
            END
            ELSE IF (@FSell  = 1)
            BEGIN
                select @FPrevRevaluationAmount = isnull(sum(@FMarketValue - @FTrxAmount),0)
                Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)

            END
            ELSE
            BEGIN
                select @MarketValue =  dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK)   * dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)           
                select @PrevMarketValue = dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK) * dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK) 
                set @FFinalAmount = @MarketValue - @PrevMarketValue 
				    
            END  
        END  

    END
    ELSE
    BEGIN
        IF @FInstrumentTypePK in (2,3,8,9,11,13,14,15) -- GBOND,CBOND,SUKUK
        BEGIN     
            IF  (@FInstrumentTypePK not in (13,15))
            BEGIN
                Select @RevaluationAcc = RevaluationBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
                IF (@FBitHTM = 1)
                BEGIN
                    Select @UnrealisedAcc = UnrealisedBondHTM From FundAccountingSetup where Status = 2  and fundPK = @FFundPK  
                END
                ELSE
                BEGIN
                    Select @UnrealisedAcc = UnrealisedBond From FundAccountingSetup where Status = 2  and fundPK = @FFundPK 
                END
            END
            ELSE
            BEGIN
                Select @RevaluationAcc = RevaluationSukuk From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
                IF (@FBitHTM = 1)
                BEGIN
                    Select @UnrealisedAcc = UnrealisedSukukHTM From FundAccountingSetup where Status = 2  and fundPK = @FFundPK  
                END
                ELSE
                BEGIN
                    Select @UnrealisedAcc = UnrealisedSukuk From FundAccountingSetup where Status = 2  and fundPK = @FFundPK 
                END
            END

            Select @InterestRecAcc = InterestAccrBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            Select @TaxExpenseAcc = TaxExpenseInterestIncomeBond From FundAccountingSetup where Status = 2   and fundPK = @FFundPK      
        END    
   
        ELSE IF @FInstrumentTypePK in (1,4,16)    
        BEGIN    
            Select @RevaluationAcc = RevaluationEquity From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            IF (@FBitHTM = 1)
            BEGIN
                Select @UnrealisedAcc = UnrealisedEquityHTM From FundAccountingSetup where Status = 2  and fundPK = @FFundPK
            END
            ELSE
            BEGIN
                Select @UnrealisedAcc = UnrealisedEquity From FundAccountingSetup where Status = 2  and fundPK = @FFundPK
            END
        END    
        ELSE IF @FInstrumentTypePK in (6)    
        BEGIN    

	        IF (@FReksadanaTypePK = 7) --PROTEKSI
	        BEGIN
                Select @RevaluationAcc = RevaluationProtectedFund,@UnrealisedAcc = UnrealisedProtectedFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            END
            ELSE IF (@FReksadanaTypePK = 6)
            BEGIN
                Select @RevaluationAcc = RevaluationPrivateEquityFund,@UnrealisedAcc = UnrealisedPrivateEquityFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            END
            ELSE
            BEGIN
                Select @RevaluationAcc = RevaluationMutualFund,@UnrealisedAcc = UnrealisedMutualFund From FundAccountingSetup where Status = 2   and fundPK = @FFundPK 
            END

        END  
	END  

		-- ITUNGAN REVAL
        IF @FInstrumentTypePK in(1,4,16)    
        BEGIN  
            IF (@FSell  = 1)
            BEGIN
                select @FPrevRevaluationAmount = isnull(dbo.[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK](@FValueDate,@RevaluationAcc,@FInstrumentPK,@FFundPK),0)    
                Set @FFinalAmount = isnull(@FPrevRevaluationAmount * -1,0)
				
            END
            ELSE
            BEGIN

                IF (dbo.CheckTodayIsHoliday(@FValueDate) = 0)
                BEGIN
                    select @MarketValue =  @FBalance   * (dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK))           
                    select @PrevMarketValue = @FBalance * (dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK)) 
                    set @FFinalAmount = @MarketValue - @PrevMarketValue  
                END
                ELSE 
                BEGIN
                    set @FFinalAmount = 0
                END

                --select @MarketValue =  dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK)   * dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)           
                --select @PrevMarketValue = dbo.FGetLastVolumeInv(@ValueDate,@FFundPK,@FInstrumentPK) * dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK) 
                --set @FFinalAmount = @MarketValue - @PrevMarketValue 

                --select @FPrevRevaluationAmount = isnull(dbo.[FGetAccountBalanceFundJournalByDateByFundPKByInstrumentPK](@FValueDate,@RevaluationAcc,@FInstrumentPK,@FFundPK),0)    
                --Set @FFinalAmount = isnull(@FMarketValue,0) - isnull(@FTrxAmount,0) - @FPrevRevaluationAmount 
			
            END
        END
		ELSE IF @FInstrumentTypePK in(2,3,8,9,13,14,15)    
        BEGIN  
               --Sebelumnya----
			--select @FFinalAmount = CASE WHEN @FInstrumentTypePK <> 13 THEN (@FMarketValue - @FBalance) + isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
			--(
			--@ValueDate,@FInstrumentPK,@FInterestPercent,@FMaturityDate,@FAvgPrice,
			--@FBalance,@FTrxAmount
			--),0) ELSE  ((@FMarketValue - @FBalance) + ((Datediff(day,@FAcqDate,@valuedate) * (@FBalance - @FTrxAmount) / Datediff(day,@FAcqDate,@FMaturityDate)))* -1)  END
               --yg bawah baru-----

				IF (@FBitHTM <> 1)
				BEGIN

					IF (@FAvgPrice <> 100)
					BEGIN
						-- ini buat <> PAR dibuat itungan AMORTISASI kyk dibawah ini :
						select @FFinalAmount = CASE WHEN @FInstrumentTypePK <> 13 THEN (@FMarketValue - (@FBalance + (@FTrxAmount - @FBalance - isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
						(
						@FValueDate,@FInstrumentPK,@FInterestPercent,@FMaturityDate,@FAvgPrice,
						@FBalance,@FTrxAmount
						),0)))) -
						((@FBalance * dbo.FGetLastClosePrice(dateadd(day,-1,@FValueDate),@FInstrumentPK)/100)- (@FBalance + (@FTrxAmount - @FBalance - isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
						(
						dateadd(day,-1,@FValueDate),@FInstrumentPK,@FInterestPercent,@FMaturityDate,@FAvgPrice,
						@FBalance,@FTrxAmount
						),0)))) 
						ELSE  
						(@FMarketValue - (@FBalance + ((@FTrxAmount - @FBalance) -((Datediff(day,@FAcqDate,@FValueDate) * (@FBalance - @FTrxAmount) / Datediff(day,@FAcqDate,@FMaturityDate))*-1)))) -   
						((@FBalance * dbo.FGetLastClosePrice(dateadd(day,-1,@FValueDate),@FInstrumentPK)/100) - (@FBalance + ((@FTrxAmount - @FBalance) -((Datediff(day,@FAcqDate,dateadd(day,-1,@FValueDate)) * (@FBalance - @FTrxAmount) / Datediff(day,@FAcqDate,@FMaturityDate))*-1))))
						END
					END
					ELSE
					BEGIN

                        IF (dbo.CheckTodayIsHoliday(@FValueDate) = 0)
                        BEGIN
                            select @MarketValue =  @FBalance   * (dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK)/100)           
                            select @PrevMarketValue = @FBalance * (dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK)/100) 
                            set @FFinalAmount = @MarketValue - @PrevMarketValue  
                        END
                        ELSE BEGIN
                            set @FFinalAmount = 0
                        END

					END

            
				END 
				ELSE
				BEGIN
					select @FFinalAmount = 0
				END
		END

		ELSE IF @FInstrumentTypePK in(6)    
        BEGIN  
			            IF (dbo.CheckTodayIsHoliday(@FValueDate) = 0)
                        BEGIN
                            select @MarketValue =  @FBalance   * (dbo.FGetLastClosePriceFromFundPosition(@ValueDate,@FInstrumentPK,@FFundPK))           
                            select @PrevMarketValue = @FBalance * (dbo.FGetLastClosePriceFromFundPosition(dbo.Fworkingday(@ValueDate,-1),@FInstrumentPK,@FFundPK)) 
                            set @FFinalAmount = @MarketValue - @PrevMarketValue  
                        END
                        ELSE BEGIN
                            set @FFinalAmount = 0
                        END

			
		END




	IF Exists(              
    Select * from ClosePrice where Status = 2 and date = @ValueDate              
    )  
    BEGIN

        IF (@FBitHTM = 1)
        BEGIN
            IF isnull(@FFinalAmount,0) > 0 --Nilai Revaluasi Acc di Debit    
            BEGIN    
            -- Setup Account kelar diatas, Next masukin ke Fund Journal  
            Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal     
    
            set @FFinalAmount = isnull(ABS(@FFinalAmount),0)  


            INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
            ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])    
        
            Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@FValueDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
            '','OCI INSTRUMENT: ' + @FInstrumentID + ', VOLUME : ' + convert(varchar,cast(@FBalance as money), 1) + ', COST VALUE : ' + convert(varchar,cast(@FTrxAmount as money), 1)  
             ,0,@UsersID,@LastUpdate,@LastUpdate                       
           
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
            Select  @FundJournalPK,1,1,2,@RevaluationAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT HTM: ' + @FInstrumentID,'D',@FFinalAmount,     
            @FFinalAmount,0,1,@FFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RevaluationAcc and Status = 2     
    
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
    
            Select @FundJournalPK,2,1,2,@UnrealisedAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT HTM: ' + @FInstrumentID,'C',@FFinalAmount,     
            0,@FFinalAmount,1,0,@FFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @UnrealisedAcc and Status = 2        
            END  


            --CEK DISINI YA AZIZ
            ELSE IF isnull(@FFinalAmount,0) < 0    
            BEGIN  
            -- Setup Account kelar diatas, Next masukin ke Fund Journal    
            Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
    
            set @FFinalAmount = isnull(ABS(@FFinalAmount),0)    
        
            INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
            ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])    
        
            Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@FValueDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
            '','OCI INSTRUMENT: ' + @FInstrumentID + ', VOLUME : ' + convert(varchar,cast(@FBalance as money), 1) + ', COST VALUE : ' + convert(varchar,cast(@FTrxAmount as money), 1)  
             ,0,@UsersID,@LastUpdate,@LastUpdate                         
           
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
            Select  @FundJournalPK,1,1,2,@UnrealisedAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT HTM: ' + @FInstrumentID,'D',@FFinalAmount,     
            @FFinalAmount,0,1,@FFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @UnrealisedAcc and Status = 2     
    
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
        
            Select @FundJournalPK,2,1,2,@RevaluationAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT HTM: ' + @FInstrumentID,'C',@FFinalAmount,     
            0,@FFinalAmount,1,0,@FFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RevaluationAcc and Status = 2    
            END  
        END
        ELSE 
        BEGIN

            IF isnull(@FFinalAmount,0) > 0 --Nilai Revaluasi Acc di Debit    
            BEGIN    
            -- Setup Account kelar diatas, Next masukin ke Fund Journal  
            Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal     
    
            set @FFinalAmount = isnull(ABS(@FFinalAmount),0)  


            INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
            ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])    
        
            Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@FValueDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
            '','OCI INSTRUMENT: ' + @FInstrumentID + ', VOLUME : ' + convert(varchar,cast(@FBalance as money), 1) + ', COST VALUE : ' + convert(varchar,cast(@FTrxAmount as money), 1)  
             ,0,@UsersID,@LastUpdate,@LastUpdate                       
           
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
            Select  @FundJournalPK,1,1,2,@RevaluationAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT: ' + @FInstrumentID,'D',@FFinalAmount,     
            @FFinalAmount,0,1,@FFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RevaluationAcc and Status = 2     
    
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
    
            Select @FundJournalPK,2,1,2,@UnrealisedAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT: ' + @FInstrumentID,'C',@FFinalAmount,     
            0,@FFinalAmount,1,0,@FFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @UnrealisedAcc and Status = 2        
            END  
            --CEK DISINI YA AZIZ
            ELSE IF isnull(@FFinalAmount,0) < 0    
            BEGIN  
            -- Setup Account kelar diatas, Next masukin ke Fund Journal    
            Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
    
            set @FFinalAmount = isnull(ABS(@FFinalAmount),0)    
        
            INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]    
            ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])    
        
            Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@FValueDate,5,@maxEndDayTrailsPK,'PORTFOLIO REVALUATION',    
            '','OCI INSTRUMENT: ' + @FInstrumentID + ', VOLUME : ' + convert(varchar,cast(@FBalance as money), 1) + ', COST VALUE : ' + convert(varchar,cast(@FTrxAmount as money), 1)  
             ,0,@UsersID,@LastUpdate,@LastUpdate                         
           
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])        
            
            Select  @FundJournalPK,1,1,2,@UnrealisedAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT: ' + @FInstrumentID,'D',@FFinalAmount,     
            @FFinalAmount,0,1,@FFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @UnrealisedAcc and Status = 2     
    
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]    
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])     
        
            Select @FundJournalPK,2,1,2,@RevaluationAcc,CurrencyPK,@FFundPK,@FInstrumentPK,0,'OCI INSTRUMENT: ' + @FInstrumentID,'C',@FFinalAmount,     
            0,@FFinalAmount,1,0,@FFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @RevaluationAcc and Status = 2    
            END  
        END
    END  	 

	Fetch next From ZZ Into @FValueDate
    END
    Close ZZ
    Deallocate ZZ







	    
Fetch next From D                   
Into @FInstrumentPK,@FFundPK,@FTrxAmount,@FMarketValue,@FInstrumentTypePK,@FCurrencyPK,@FInstrumentID,@FLastCouponDate,@FBalance,@FTaxExpensePercent,@FMaturityDate,@FSell    
,@FInterestDaysType,@FInterestPaymentType,@FInterestPercent,@FPaymentModeOnMaturity,@FBuy,@FBitHTM,@FReksadanaTypePK,@FAcqDate,@FAvgPrice  
END        
Close D                  
Deallocate D



---- AMORTISASI

Declare @JFundPK int,@JInstrumentPK int,@JInterestRate numeric(18,8),@JMaturityDate datetime
Declare @JSettledDate datetime,@JCostPrice numeric(18,8),@JFaceValue numeric(24,4)
Declare @JCostValue numeric(22,8),@JAmount numeric(24,10),@JBitHTM bit,@JInstrumentTypePK int
Declare @JInvAmortizeAcc int,@JAmortizeAcc int,@JInstrumentID nvarchar(100), @ZValueDate datetime




Declare J Cursor For 

select A.FundPK,A.InstrumentPK,B.ID InstrumentID,A.InterestPercent,A.MaturityDate,AcqDate,AvgPrice,Balance,CostValue,BitHTM,B.InstrumentTypePK from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
where A.Status = 2 and date = @ValueDate and FundPK = 1 and B.InstrumentTypePK not in (1,5,6)

Open J                  
Fetch Next From J                  
Into @JFundPK,@JInstrumentPK,@JInstrumentID,@JInterestRate,@JMaturityDate,@JSettledDate,@JCostPrice,@JFaceValue,@JCostValue,@JBitHTM,@JInstrumentTypePK
While @@FETCH_STATUS = 0                  
Begin 

    truncate table #TempAmortize

    DECLARE ZZ CURSOR FOR

    SELECT  TOP (DATEDIFF(DAY, dbo.FworkingDay(@ValueDate,-1), @ValueDate)) Dates = DATEADD(DAY, ROW_NUMBER() OVER(ORDER BY a.object_id), dbo.FworkingDay(@ValueDate,-1))
    FROM sys.all_objects a CROSS JOIN sys.all_objects b

    Open ZZ
    Fetch Next From ZZ
    Into @ZValueDate

    While @@FETCH_STATUS = 0
    BEGIN

	
--	IF @JInstrumentTypePK in (13,15)
--	BEGIN


--		select @JAmount = isnull(Premium - ((Premium/TotalDays) * datediff(day,SettledDate,Date)),0) From BondInterestAndAmortizeDiscount
--		where Date = @ZValueDate and InstrumentPK = @JInstrumentPK and InterestRate = @JInterestRate
--		and MaturityDate = @JMaturityDate  and CostPrice = @JCostPrice
--		and FaceValue = @JFaceValue and CostValue = @JCostValue

--	END
--	ELSE
--	BEGIN
--		select @JAmount = isnull(Premium - TotalAmortizeDiscount,0) From BondInterestAndAmortizeDiscount
--		where Date = @ZValueDate and InstrumentPK = @JInstrumentPK and InterestRate = @JInterestRate
--		and MaturityDate = @JMaturityDate  and CostPrice = @JCostPrice
--		and FaceValue = @JFaceValue and CostValue = @JCostValue
--	END

    delete #TempAmortize
    
	IF @JInstrumentTypePK in (13,15)
	BEGIN

		select @JAmount = (@JFaceValue - @JCostValue) / Datediff(day,@JSettledDate,@JMaturityDate) 

	END
	ELSE
	BEGIN
	select @JAmount = isnull(AmortizeDiscountAmount,0) From BondInterestAndAmortizeDiscount
	where Date = @ZValueDate and InstrumentPK = @JInstrumentPK and InterestRate = @JInterestRate
	and MaturityDate = @JMaturityDate  and CostPrice = @JCostPrice
	and FaceValue = @JFaceValue and CostValue = @JCostValue
	END


    
	--select @JAmount = isnull(AmortizeDiscountAmount,0) From BondInterestAndAmortizeDiscount
	--where Date = @ZValueDate and InstrumentPK = @JInstrumentPK and InterestRate = @JInterestRate
	--and MaturityDate = @JMaturityDate  and CostPrice = @JCostPrice
	--and FaceValue = @JFaceValue and CostValue = @JCostValue

    insert into #TempAmortize(InterestAmount,InstrumentPK,Balance,CostPrice)
    select @JAmount,@JInstrumentPK,@JFaceValue,@JCostPrice
         


    select @JAmount = sum(InterestAmount) from #TempAmortize

	IF (@JAmount <> null or @JAmount <> 0)
	BEGIN
	IF (@JInstrumentTypePK not in (13,15))  --BUKAN SUKUK
    BEGIN
		IF (@JCostPrice > 100)  --PREMIUM
		BEGIN
			IF (@JBitHTM = 1) --HTM
			BEGIN
			    Select @JInvAmortizeAcc = InvAmortizePremiumBondHTM,@JAmortizeAcc = AmortizePremiumBondHTM
				From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK 
			END
			ELSE
			BEGIN
				Select @JInvAmortizeAcc = InvAmortizePremiumBond,@JAmortizeAcc = AmortizePremiumBond
				From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK
			END
		END 
		ELSE IF (@JCostPrice < 100)  --DISCOUNT
		BEGIN
			IF (@JBitHTM = 1) --HTM
			BEGIN
				Select @JInvAmortizeAcc = InvAmortizeDiscountBondHTM,@JAmortizeAcc = AmortizeDiscountBondHTM
				From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK
			END
			ELSE
			BEGIN
				Select @JInvAmortizeAcc = InvAmortizeDiscountBond,@JAmortizeAcc = AmortizeDiscountBond
				From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK
			END
		END
    END
    ELSE
    BEGIN
    IF (@JCostPrice > 100)  --PREMIUM
		    BEGIN
			    IF (@JBitHTM = 1) --HTM
			    BEGIN
			        Select @JInvAmortizeAcc = InvAmortizePremiumSukukHTM,@JAmortizeAcc = AmortizePremiumSukukHTM
				    From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK 
			    END
			    ELSE
			    BEGIN
				    Select @JInvAmortizeAcc = InvAmortizePremiumSukuk,@JAmortizeAcc = AmortizePremiumSukuk
				    From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK
			    END
		    END 
		    ELSE IF (@JCostPrice < 100)  --DISCOUNT
		    BEGIN
			    IF (@JBitHTM = 1) --HTM
			    BEGIN
				    Select @JInvAmortizeAcc = InvAmortizeDiscountSukukHTM,@JAmortizeAcc = AmortizeDiscountSukukHTM
				    From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK
			    END
			    ELSE
			    BEGIN
				    Select @JInvAmortizeAcc = InvAmortizeDiscountSukuk,@JAmortizeAcc = AmortizeDiscountSukuk
				    From FundAccountingSetup where Status = 2  and FundPK =  @JFundPK
			    END
		    END
    END
	
     --Setup Account kelar diatas, Next masukin ke Fund Journal    
    Select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    

	INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
	,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

	Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ZValueDate,9,@maxEndDayTrailsPK,'AMORTIZE',                  
	'','INSTRUMENT: ' + @JInstrumentID + ', VOLUME : ' + convert(varchar,cast(@JFaceValue as money), 1) 
	,0,@UsersID,@LastUpdate,@LastUpdate                                        


    IF (@JCostPrice > 100) 
    BEGIN

            IF (@JAmount >= 0)
            BEGIN
                    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	                Select  @FundJournalPK,1,1,2,@JInvAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'D',abs(@JAmount),                   
	                abs(@JAmount),0,1,abs(@JAmount),0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JInvAmortizeAcc and Status = 2                   

	                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	                Select @FundJournalPK,2,1,2,@JAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'C',abs(@JAmount),                   
	                0,abs(@JAmount),1,0,abs(@JAmount),@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JAmortizeAcc and Status = 2   
            END
            ELSE
            BEGIN
                    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	                Select  @FundJournalPK,1,1,2,@JAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'D',abs(@JAmount),                   
	                abs(@JAmount),0,1,abs(@JAmount),0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JAmortizeAcc and Status = 2                   

	                INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	                ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	                Select @FundJournalPK,2,1,2,@JInvAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'C',abs(@JAmount),                   
	                0,abs(@JAmount),1,0,@JAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JInvAmortizeAcc and Status = 2   

            END

               



    END
    ELSE IF (@JCostPrice < 100) 
    BEGIN

        IF (@JAmount >= 0)
        BEGIN
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	        Select  @FundJournalPK,1,1,2,@JAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'D',abs(@JAmount),                   
	        abs(@JAmount),0,1,abs(@JAmount),0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JAmortizeAcc and Status = 2                   

	        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	        Select @FundJournalPK,2,1,2,@JInvAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'C',abs(@JAmount),                   
	        0,abs(@JAmount),1,0,abs(@JAmount),@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JInvAmortizeAcc and Status = 2                  
        END
        ELSE
        BEGIN
            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	        Select  @FundJournalPK,1,1,2,@JInvAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'D',abs(@JAmount),                   
	        abs(@JAmount),0,1,abs(@JAmount),0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JInvAmortizeAcc and Status = 2                   

	        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
	        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

	        Select @FundJournalPK,2,1,2,@JAmortizeAcc,CurrencyPK,@JFundPK,@JInstrumentPK,0,'INSTRUMENT: ' + @JInstrumentID,'C',abs(@JAmount),                   
	        0,abs(@JAmount),1,0,abs(@JAmount),@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @JAmortizeAcc and Status = 2  
        END

    END
    
	END


    Fetch next From ZZ Into @ZValueDate
    END
    Close ZZ
    Deallocate ZZ

Fetch next From J                   
Into @JFundPK,@JInstrumentPK,@JInstrumentID,@JInterestRate,@JMaturityDate,@JSettledDate,@JCostPrice,@JFaceValue,@JCostValue,@JBitHTM,@JInstrumentTypePK   
End                  
Close J                  
Deallocate J




--AAAAAAAA



Declare @IncDays int            
Declare @CInstrumentPK    int         
Declare @CInstrumentID    nvarchar(100)                  
Declare @CFundPK     int                  
Declare @CTrxAmount     numeric(22,6)                  
Declare @CMarketValue    numeric(22,6)                  
Declare @CInstrumentTypePK   int                  
Declare @CCurrencyPK    int                  
Declare @CPrevRevaluationAmount  numeric(22,6)                  
Declare @CFinalAmount    numeric(22,6)                  
Declare @CLastCouponDate   datetime                  
Declare @CInterestAmount   numeric(18,6)                  
Declare @CBalance     numeric(18,0)                  
Declare @CTaxExpenseAmount   numeric(18,6)                  
Declare @CTaxExpensePercent   numeric(18,8)                  
Declare @CAcqDate   datetime                  
Declare @InterestIncometAcc   int                  
Declare @CMaturityDate  datetime  
Declare @CSell   int
Declare @CRoll   int  
Declare @CBitHTM int
Declare @CReksadanaTypePK int
Declare @CDate datetime


Declare @CInterestDaysType int
Declare @CInterestPaymentType int
Declare @CInterestPercent numeric(18,8)
Declare @CPaymentModeOnMaturity int

--Select TaxExpensePercent,* from instrument where instrumentTYpePK in(2,3,15)
--update instrument set TaxExpensePercent = 5 where instrumentTYpePK in(2,3,15)



 Select @IntDays =  DateDiff(day,@DateYesterday,@valuedate) 

Declare C Cursor For   
 
 Select A.InstrumentPK,A.FundPK
,sum(A.CostValue)-- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,B.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0, A.BitHTM              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

where A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate
)
and B.InstrumentTypePK <> 5 and A.FundPK <> 1

and NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and StatusSettlement  = 2 and ValueDate = @ValueDate)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity, A.BitHTM
 

 
UNION ALL

-- MATURE DIHITUNG

Select A.InstrumentPK,A.FundPK
,sum(A.CostValue)-- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,B.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0, A.BitHTM              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      

where A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = dbo.FWorkingDay(@ValueDate,-1)
)
and B.InstrumentTypePK not in (1,5) and A.FundPK <> 1
and   EXISTS 
(  SELECT * FROM FundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK  and Status  = 2 and MaturityDate = @ValueDate)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent, A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity, A.BitHTM

 
UNION ALL
              
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,B.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0, A.BitHTM              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate
)
 and A.MaturityDate > @ValueDate and B.InstrumentTypePK = 5 and A.FundPK <> 1
 and A.AcqDate not in (
select valuedate from investment where valuedate between @DateYesterday and @valuedate and valuedate <> @DateYesterday)
and NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and StatusSettlement  = 2 and ValueDate = @ValueDate)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity, A.BitHTM





--MATURE INTEREST WEEKEND
UNION ALL       
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,B.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,1 Roll, A.BitHTM              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = dbo.FWorkingDay(@valuedate,-1)
)
and A.MaturityDate <= @valuedate and B.InstrumentTypePK = 5 and A.FundPK <> 1 

and  NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and StatusSettlement  = 2 and ValueDate = @ValueDate)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity, A.BitHTM


--ROLLOVER INTEREST WEEKEND
UNION ALL
              
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,B.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,0 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,1 Roll, A.BitHTM              
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate
)
 and A.MaturityDate > @ValueDate and B.InstrumentTypePK = 5 and A.FundPK <> 1
 and A.AcqDate  in (
select valuedate from investment where valuedate between @DateYesterday and @valuedate and valuedate <> @DateYesterday)
and NOT EXISTS 
(  SELECT * FROM Investment C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate and StatusSettlement  = 2 and ValueDate = @ValueDate)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity, A.BitHTM

UNION ALL

-- JUAL H+1 HARI LIBUR
Select A.InstrumentPK,A.FundPK
,sum(A.CostValue) -- isnull(C.CostValueSell,0)
,sum(A.MarketValue),B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),sum(A.Balance)                   
,B.TaxExpensePercent, A.AcqDate AcqDate, A.MaturityDate,1 Sell,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity,0 Roll, A.BitHTM             
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2      
where  A.status = 2 and TrailsPK = 
(              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = dbo.FWorkingDay(@valuedate,-1)
)
 and A.MaturityDate > @ValueDate and B.InstrumentTypePK = 5  and A.FundPK <> 1
 and A.AcqDate in (
select AcqDate from investment where TrxType = 2 and valuedate = @valuedate)
Group By A.InstrumentPK,A.FundPK,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,B.TaxExpensePercent,A.AcqDate, A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,A.InterestPercent,A.PaymentModeOnMaturity, A.BitHTM




Open C                  
Fetch Next From C                  
Into @CInstrumentPK,@CFundPK,@CTrxAmount,@CMarketValue,@CInstrumentTypePK,@CCurrencyPK,@CInstrumentID,@CLastCouponDate,@CBalance
,@CTaxExpensePercent,@CAcqDate,@CMaturityDate,@CSell,@CInterestDaysType,@CInterestPaymentType,@CInterestPercent ,@CPaymentModeOnMaturity,@CRoll,@CBitHTM     
While @@FETCH_STATUS = 0                  
Begin              

  
-- C2. GENERATE INTEREST ACCRUED BOND                  

IF @CInstrumentTypePK in (2,3,8,9,11,13,14,15)             
BEGIN    
    IF (@CInstrumentTypePK not in (13,15))
    BEGIN       
        IF (@CBitHTM = 1)
        BEGIN
            Select @InterestRecAcc = InterestAccrBondHTM
            ,@TaxExpenseAcc = TaxExpenseInterestIncomeBond,@InterestIncometAcc = IncomeInterestBondHTM
            From FundAccountingSetup where Status = 2  and FundPK = @CFundPK  
        END
        ELSE
        BEGIN
            Select @InterestRecAcc = InterestAccrBond
            ,@TaxExpenseAcc = TaxExpenseInterestIncomeBond,@InterestIncometAcc = IncomeInterestBond
            From FundAccountingSetup where Status = 2  and FundPK = @CFundPK  
        END       
                
    END 
    ELSE
    BEGIN
        IF (@CBitHTM = 1)
        BEGIN
            Select @InterestRecAcc = InterestAccrSukukHTM
            ,@TaxExpenseAcc = TaxExpenseInterestIncomeBond,@InterestIncometAcc = IncomeInterestSukukHTM
            From FundAccountingSetup where Status = 2  and FundPK = @CFundPK  
        END
        ELSE
        BEGIN
            Select @InterestRecAcc = InterestAccrSukuk
            ,@TaxExpenseAcc = TaxExpenseInterestIncomeBond,@InterestIncometAcc = IncomeInterestSukuk
            From FundAccountingSetup where Status = 2  and FundPK = @CFundPK  
        END 
    END

END                 

IF @CInstrumentTypePK in (6) -- REKSADANA      
BEGIN       
     select @CReksadanaTypePK = ReksadanaTypePK from Instrument where InstrumentPK = @CInstrumentPK and status in (1,2)    
	 IF (@CReksadanaTypePK = 7) --PROTEKSI
	 BEGIN
        Select @InterestRecAcc = InterestAccrProtectedFund
        ,@InterestIncometAcc = IncomeInterestAccrProtectedFund
        From FundAccountingSetup where Status = 2  and FundPK = @CFundPK          

	 END
	 ELSE IF (@CReksadanaTypePK = 6) --RDPT           
	 BEGIN
        Select @InterestRecAcc = InterestAccrPrivateEquityFund
        ,@InterestIncometAcc = IncomeInterestAccrPrivateEquityFund
        From FundAccountingSetup where Status = 2  and FundPK = @CFundPK   
	 END   
END      



IF @CInstrumentTypePK = 5 -- NCD INTEREST BLOM TAU GIMANA PAS MATURED
BEGIN                  
Select @InterestRecAcc = InterestAccrTimeDeposit,@TaxExpenseAcc = TaxExpenseInterestIncomeTimeDeposit 
,@InterestIncometAcc = IncomeInterestTimeDeposit
From FundAccountingSetup 
where Status = 2  and FundPK = @CFundPK
END        



-- INTEREST REKSADANA
IF (@CInstrumentTypePK in (6) AND (@CReksadanaTypePK in (6,7)))  -- REKSADANA      
BEGIN    


    select @CDate = DATEADD(m, DATEDIFF(m, 0, @ValueDate), 0)
    select @CInterestAmount = (InterestPercent/100 * @CTrxAmount/365) * @IntDays from ReksadanaInstrument where ReksadanaPK = @CInstrumentPK and status in (1,2)
    select @CInterestAmount = isnull(@CInterestAmount,0)

    IF (@CInterestAmount > 0)
    BEGIN
    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 
    
    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,14,@maxEndDayTrailsPK,'INTEREST FUND',                  
    '','INSTRUMENT: ' + @CInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@CTrxAmount as money), 1) 
    ,0,@UsersID,@LastUpdate,@LastUpdate                                        

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CInterestAmount,                   
    @CInterestAmount,0,1,@CInterestAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CInterestAmount,                   
    0,@CInterestAmount,1,0,@CInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  

    END
END

         

 
IF @CInstrumentTypePK in (2,3,8,9,11,13,14,15)     -- and  @CLastCouponDate < @ValueDate        
BEGIN       
if @CAcqDate < @Valuedate
BEGIN

        IF (@CMarketValue = 0)
        BEGIN
            set @CInterestAmount  = 0
            set @CTaxExpenseAmount = 0 
            set @CFinalAmount = 0 
        END
        ELSE
        BEGIN
            Select @CInterestAmount = dbo.[FGetBondInterestAccrued_ForFundJournal] (@ValueDate,@CInstrumentPK,@CBalance)            
		    set @CTaxExpenseAmount = (@CTaxExpensePercent / 100) * @CInterestAmount                  
		    set @CFinalAmount = (@CInterestAmount - @CTaxExpenseAmount)  
        END

      
		IF @CInstrumentTypePK in (2,3,8,9,11,13,14,15)                    
		BEGIN                 	         
		-- Setup Account kelar diatas, Next masukin ke Fund Journal   
		select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

		IF @CInterestAmount > 0                  
		BEGIN           
		select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal 

        --IF((day(@valuedate) <> 31 AND @CInterestDaysType in (3,5,6,7)) OR (@CInterestDaysType not in (3,5,6,7)))
        BEGIN

            INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
            ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

            Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,9,@maxEndDayTrailsPK,'INTEREST BOND',                  
            '','INSTRUMENT: ' + @CInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@CTrxAmount as money), 1) 
            ,0,@UsersID,@LastUpdate,@LastUpdate                                        

            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CFinalAmount,                   
            @CFinalAmount,0,1,@CFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

            INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CFinalAmount,                   
            0,@CFinalAmount,1,0,@CFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  

            --INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            --,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            --Select  @FundJournalPK,3,1,2,@TaxExpenseAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CTaxExpenseAmount,                   
            --@CTaxExpenseAmount,0,1,@CTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxExpenseAcc and Status = 2   
        END

            --IF(@CInterestDaysType not in (3,5,6,7))
            --BEGIN
            --INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
            --,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

            --Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,9,@maxEndDayTrailsPK,'INTEREST BOND',                  
            --'','INSTRUMENT: ' + @CInstrumentID ,0,@UsersID,@LastUpdate,@LastUpdate                  

            --INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            --,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            --Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CFinalAmount,                   
            --@CFinalAmount,0,1,@CFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

            --INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            --,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            --Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CInterestAmount,                   
            --0,@CInterestAmount,1,0,@CInterestAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  

            --INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
            --,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

            --Select  @FundJournalPK,3,1,2,@TaxExpenseAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CTaxExpenseAmount,                   
            --@CTaxExpenseAmount,0,1,@CTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxExpenseAcc and Status = 2   
            --END
	                              
		END
		END            
END
END        

IF @CInstrumentTypePK = 5  
BEGIN   
--IF NOT EXISTS(
--Select * from investment
--where ValueDate = @ValueDate and StatusSettlement = 2 and TrxType = 2 and InstrumentPK = @CInstrumentPK
--)
BEGIN
	
    IF (@CRoll = 0 AND @CSell = 0)
    BEGIN
        IF  @CMaturityDate > @DateYesterday and @CMaturityDate <= @ValueDate
        BEGIN
            Declare @RealMaturedDate datetime
            if @CPaymentModeOnMaturity = 1
            begin
            set @RealMaturedDate = @CMaturityDate
            end
            if @CPaymentModeOnMaturity = 2
            begin
            set @RealMaturedDate = @ValueDate
            end
            Select @CInterestAmount = dbo.[FGetDepositoInterestAccrued] (@RealMaturedDate,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate)           

            if @CPaymentModeOnMaturity = 3
            begin
            set @CInterestAmount = 0
            end

        END
        ELSE
        BEGIN
	
            if (@ValueDate = @CAcqDate)
            BEGIN
                Select @CInterestAmount = 0
            END
            ELSE
            BEGIN
                Select @CInterestAmount = dbo.[FGetDepositoInterestAccrued] (@ValueDate,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate)        
            END
	
		 
        END
    END
    ELSE IF (@CRoll = 1 and @CMaturityDate > @ValueDate)
    BEGIN
        Select @CInterestAmount = dbo.[FGetDepositoInterestAccrued] (@CAcqDate,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate) * DateDiff(Day,@CAcqDate,@ValueDate)

    END
    ELSE IF (@CSell = 1 and @CMaturityDate > @ValueDate)
    BEGIN
        Select @CInterestAmount = dbo.[FGetDepositoInterestAccrued] (@CAcqDate,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate) *  DateDiff(Day,dbo.Fworkingday(@ValueDate,-1),dateadd(day,-1,@valuedate))

    END
    ELSE
    BEGIN
        Select @CInterestAmount = dbo.[FGetDepositoInterestAccrued] (@CAcqDate,@CInstrumentPK,@CBalance,@CInterestDaysType,@CInterestPercent,@CAcqDate) * DateDiff(Day,dbo.Fworkingday(@ValueDate,-1),@CMaturityDate)
    END


--       select @ValueDate,@CAcqDate,@CInterestAmount,@CInstrumentPK,@CInterestPercent,@CFundPK
-- where @CInstrumentPK in 
-- (
	--select A.instrumentPK from fundposition A
	--left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2

	--where fundpk = 2 and trailsPK = 2 and B.InstrumentTypePK = 5		   
-- )
-- CEK LOGIK PAYMENT INTEREST TYPE DISINI

-- Setup Account kelar diatas, Next masukin ke Fund Journal   
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

IF @CInterestAmount > 0                  
BEGIN                  
set @CTaxExpenseAmount = (@CTaxExpensePercent / 100) * @CInterestAmount                  
set @CFinalAmount = @CInterestAmount - @CTaxExpenseAmount       

INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,7,@maxEndDayTrailsPK,'INTEREST DEPOSIT',                  
'','INSTRUMENT: '  + @CInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@CTrxAmount as money), 1) 
,0,@UsersID,@LastUpdate,@LastUpdate                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@InterestRecAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CFinalAmount,                   
@CFinalAmount,0,1,@CFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestRecAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@InterestIncometAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'C',@CFinalAmount,                   
0,@CFinalAmount,1,0,@CFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @InterestIncometAcc and Status = 2                  

--INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
--,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

--Select  @FundJournalPK,3,1,2,@TaxExpenseAcc,CurrencyPK,@CFundPK,@CInstrumentPK,0,'INSTRUMENT: ' + @CInstrumentID,'D',@CTaxExpenseAmount,                   
--@CTaxExpenseAmount,0,1,@CTaxExpenseAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TaxExpenseAcc and Status = 2                   
END        
END

	          
END

                                              
	
 

 
Fetch next From C                   
Into @CInstrumentPK,@CFundPK,@CTrxAmount,@CMarketValue,@CInstrumentTypePK,@CCurrencyPK,@CInstrumentID,@CLastCouponDate,@CBalance,@CTaxExpensePercent,@CAcqDate,@CMaturityDate,@CSell    
,@CInterestDaysType,@CInterestPaymentType,@CInterestPercent,@CPaymentModeOnMaturity,@CRoll,@CBitHTM 
END        
Close C                  
Deallocate C

                          
-- C4. MATURE BOND & TIME DEPOSIT & DEPOSITO BELUM SAMPE UJUNG   
Declare @DValueDate datetime
Declare @DInstrumentPK    int  
Declare @DRealisedAccBond    int      
Declare @DRevaluationAccBond    int         
Declare @DInstrumentID    nvarchar(100)                  
Declare @DFundPK     int                  
Declare @DTrxAmount     numeric(22,6)                  
Declare @DMarketValue    numeric(22,6)                  
Declare @DInstrumentTypePK   int                  
Declare @DCurrencyPK    int                                   
Declare @DFinalAmount    numeric(22,6)   
Declare @DPiutangAmount    numeric(22,6) 
Declare @DBudepAmount    numeric(22,6)                     
Declare @DNextCouponDate   datetime                  
Declare @DInterestAmount   numeric(18,6)                  
Declare @DBalance     numeric(18,0)                  
Declare @DTaxExpenseAmount   numeric(18,6)                  
Declare @DTaxExpensePercent   numeric(18,8)                  
Declare @DAcqDate   datetime                                  
Declare @DMaturityDate  datetime  
Declare @PrevInterestAmount numeric(22,6)
Declare @PrevFinalAmount numeric(22,6)
Declare @PrevTaxExpenseAmount numeric(22,6)
declare @divdays int

Declare @DInterestRecAcc int
Declare @DTaxExpenseAcc int
Declare @DInterestIncometAcc int
Declare @DCashAtBankAcc   int  
Declare @DInvestmentBond int
Declare @DInvestmentTimeDeposit int
Declare @DInterestPaymentType int


Declare @DPaymentModeOnMaturity int
Declare @DInterestDaysType int
Declare @DInterestPercent numeric(18,4)
Declare @DBitHTM bit
Declare @DReksadanaTypePK int
Declare @DCashForMutualFund int
Declare @DDate datetime


insert into #Mature(Date,InstrumentPK,FundPK,TrxAmount,MarketValue,InstrumentTypePK,CurrencyPK,InstrumentID,NextCouponDate,Balance,
TaxExpensePercent, AcqDate, MaturityDate,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,BitHTM,ReksadanaTypePK)

Select A.Date,A.InstrumentPK,A.FundPK,A.CostValue,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   
,B.TaxExpensePercent, A.AcqDate, A.MaturityDate, A.PaymentModeOnMaturity,A.InterestDaysType,A.InterestPercent,A.InterestPaymentType,isnull(A.BitHTM,0) BitHTM, isnull(B.ReksadanaTypePK,0) ReksadanaTypePK                       
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  
where  A.status = 2 and TrailsPK = (              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @DateYesterday
) 
and B.InstrumentTypePK in (2,3,8,9,11,13,14,15)
--and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) > @DateYesterday 
--and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) <= @valuedate 
and AcqDate < @valuedate      

union all


Select A.Date,A.InstrumentPK,A.FundPK,A.TrxAmount,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,D.InstrumentPK),A.Balance                   
,D.TaxExpensePercent, case when D.InterestPaymentType in (10,11,12,13) then dateadd(month,-3,dbo.FgetLastCouponDate(@ValueDate,D.InstrumentPK)) else case when D.InterestPaymentType in (16,17,18) then dateadd(month,-6,dbo.FgetLastCouponDate(@ValueDate,D.InstrumentPK))
else case when D.InterestPaymentType in (7,8,9) then dateadd(month,-1,dbo.FgetLastCouponDate(@ValueDate,D.InstrumentPK)) end end end, A.MaturityDate, A.PaymentModeOnMaturity,A.InterestDaysType,A.InterestPercent,A.InterestPaymentType,isnull(A.BitHTM,0) BitHTM,B.ReksadanaTypePK                      
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)  
Left join ReksadanaInstrument C on B.InstrumentPK = C.ReksadanaPK and C.Status in (1,2)  
Left join Instrument D on C.InstrumentPK = D.InstrumentPK and D.Status in (1,2)                   
where  A.status = 2 and TrailsPK = (              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @DateYesterday
) 
and B.InstrumentTypePK in (6) and D.InstrumentTypePK not in (1,5,6)
and dbo.FgetLastCouponDate(@ValueDate,D.InstrumentPK) > @DateYesterday 
and dbo.FgetLastCouponDate(@ValueDate,D.InstrumentPK) <= @valuedate 
and AcqDate < @valuedate


union all
select A.DateLastMont,A.InstrumentPK,FundPK,Daily,Balance,B.InstrumentTypePK,C.CurrencyPK,A.InstrumentID,A.DateofMonth,Balance,
B.TaxExpensePercent,A.AcqDate,A.MaturityDate,0,B.InterestDaysType,A.InterestPercent,B.InterestPaymentType,0,0
  from #MatureTaspen A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
left join Currency C on B.CurrencyPK = C.CurrencyPK and C.status in (1,2)
where DateLastMont > @dateyesterday and DateLastMont <= @valuedate   


DECLARE D CURSOR FOR 
select Date,InstrumentPK,FundPK,round(TrxAmount,0) TrxAmount,MarketValue,InstrumentTypePK, CurrencyPK,InstrumentID,NextCouponDate,round(Balance,0) Balance                   
,TaxExpensePercent, AcqDate, MaturityDate 
,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,BitHTM,ReksadanaTypePK
from #Mature where MaturityDate >= @DateYesterday and MaturityDate <= @valuedate and InstrumentTypePK in (2,3,8,9,10,11,13,14,15)
union all
select NextCouponDate,InstrumentPK,FundPK,round(TrxAmount,0),MarketValue,InstrumentTypePK, CurrencyPK,InstrumentID,NextCouponDate,round(Balance,0)                   
,TaxExpensePercent, AcqDate, MaturityDate 
,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,BitHTM,ReksadanaTypePK
from #Mature where (NextCouponDate >= @DateYesterday and NextCouponDate <= @valuedate) and InstrumentTypePK in (6) and ReksadanaTypePK in (6,7)
union all
select Date,InstrumentPK,FundPK,round(TrxAmount,0),MarketValue,InstrumentTypePK, CurrencyPK,InstrumentID,NextCouponDate,round(Balance,0)                    
,TaxExpensePercent, AcqDate, MaturityDate 
,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,BitHTM,ReksadanaTypePK
from #Mature where InstrumentTypePK in (5,10)

Open D
Fetch Next From D
Into @DValueDate,@DInstrumentPK,@DFundPK,@DTrxAmount,@DMarketValue,@DInstrumentTypePK,@DCurrencyPK,@DInstrumentID,@DNextCouponDate,@DBalance,@DTaxExpensePercent,@DAcqDate,@DMaturityDate   
,@DPaymentModeOnMaturity,@DInterestDaysType, @DInterestPercent ,@DInterestPaymentType, @DBitHTM, @DReksadanaTypePK         
While @@FETCH_STATUS = 0
BEGIN     


  

IF @DInstrumentTypePK in (2,3,8,9,11,13,14,15)            
BEGIN                  

    IF (@DInstrumentTypePK not in (13,15))
    BEGIN       
        IF (@DBitHTM = 1)
        BEGIN
            Select @DInterestRecAcc = InterestAccrBondHTM
            ,@DTaxExpenseAcc = TaxExpenseInterestIncomeBond,@DInterestIncometAcc = IncomeInterestBondHTM
            From FundAccountingSetup where Status = 2  and FundPK = @DFundPK  
        END
        ELSE
        BEGIN
            Select @DInterestRecAcc = InterestAccrBond
            ,@DTaxExpenseAcc = TaxExpenseInterestIncomeBond,@DInterestIncometAcc = IncomeInterestBond
            From FundAccountingSetup where Status = 2  and FundPK = @DFundPK  
        END       
                
    END 
    ELSE
    BEGIN
        IF (@DBitHTM = 1)
        BEGIN
            Select @DInterestRecAcc = InterestAccrSukukHTM
            ,@DTaxExpenseAcc = TaxExpenseInterestIncomeBond,@DInterestIncometAcc = IncomeInterestSukukHTM
            From FundAccountingSetup where Status = 2  and FundPK = @DFundPK  
        END
        ELSE
        BEGIN
            Select @DInterestRecAcc = InterestAccrSukuk
            ,@DTaxExpenseAcc = TaxExpenseInterestIncomeBond,@DInterestIncometAcc = IncomeInterestSukuk
            From FundAccountingSetup where Status = 2  and FundPK = @DFundPK  
        END 
    END

Select @DCashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @DFundPK

               

Begin           
Select @intdays =  DateDiff(day,@DateYesterday,@valuedate) 
--IF(@DInterestPaymentType in (10,11,12)) 
--BEGIN
--	select @divdays = 90
--END
--ELSE
--IF(@DInterestPaymentType in (16,17,18)) 
--BEGIN
--	select @divdays = 180
--END
--ELSE
--IF(@DInterestPaymentType in (7,8,9)) 
--BEGIN
--	select @divdays = 30
--END
--ELSE
--BEGIN
	select @divdays = datediff(day,@DAcqDate,@DMaturityDate)   
--END       
Select @DInterestAmount = @DBalance * @DInterestPercent /100 /365 *  @divdays                                                 
End          
   

set @DTaxExpenseAmount = (@DTaxExpensePercent / 100) * (@DBalance * @DInterestPercent /100 /365 *  @divdays)               
set @DFinalAmount = @DInterestAmount - @DTaxExpenseAmount


  

IF @DInterestAmount > 0                  
BEGIN    
	
IF (@DMaturityDate <= @valuedate)
BEGIN
    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@DValueDate,8,@maxEndDayTrailsPK,'REC COUPON',                  
    '','INSTRUMENT: '  + @DInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@DTrxAmount as money), 1) 
    ,0,@UsersID,@LastUpdate,@LastUpdate                 

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Deviden Obligasi: ' + @DInstrumentID,'D',@DBalance,                   
    @DBalance,0,1,@DBalance,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DCashAtBankAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@DInvestmentBond,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Deviden Obligasi: ' + @DInstrumentID,'C',@DBalance,                   
    0,@DBalance,1,0,@DBalance,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInvestmentBond and Status = 2  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,3,1,2,@DRealisedAccBond,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Deviden Obligasi: ' + @DInstrumentID,'D',@DTrxAmount - @DBalance,                   
    @DTrxAmount - @DBalance,0,1,@DTrxAmount - @DBalance,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DRealisedAccBond and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,4,1,2,@DInvestmentBond,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Deviden Obligasi: ' + @DInstrumentID,'C',@DTrxAmount - @DBalance,                   
    0,@DTrxAmount - @DBalance,1,0,@DTrxAmount - @DBalance,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInvestmentBond and Status = 2  

END

ELSE
BEGIN
-- Setup Account kelar diatas, Next masukin ke Fund Journal 
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal           
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@DValueDate,8,@maxEndDayTrailsPK,'REC COUPON',                  
'','INSTRUMENT: '  + @DInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@DTrxAmount as money), 1) 
,0,@UsersID,@LastUpdate,@LastUpdate                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Deviden Obligasi: ' + @DInstrumentID,'D',@DFinalAmount,                   
@DFinalAmount,0,1,@DFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DCashAtBankAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@DInterestRecAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Deviden Obligasi: ' + @DInstrumentID,'C',@DFinalAmount,                   
0,@DFinalAmount,1,0,@DFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestRecAcc and Status = 2                  
END
END               
END                  

ELSE IF @DInstrumentTypePK in (5,10)                
BEGIN   


Select @DInterestRecAcc = InterestAccrTimeDeposit,@DTaxExpenseAcc = TaxExpenseInterestIncomeTimeDeposit 
,@DInterestIncometAcc = IncomeInterestTimeDeposit, @DInvestmentTimeDeposit = InvestmentTimeDeposit
From FundAccountingSetup 
where Status = 2  and FundPK = @DFundPK

Select @DCashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @DFundPK

select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   


select @DFinalAmount = 
datediff(day,case when @DNextCouponDate >= @DValueDate then DATEADD(month, -1, @DNextCouponDate) else @DNextCouponDate end,@DValueDate) * @DTrxAmount   

select @DPiutangAmount = 
datediff(day,@DNextCouponDate,EOMONTH(@DNextCouponDate)) * @DTrxAmount   

select @DBudepAmount = 
datediff(day,EOMONTH(@DNextCouponDate),@DValueDate) * @DTrxAmount   

IF @DFinalAmount > 0                  
BEGIN    

--BALIKIN NILAI INTEREST KE BANK --REC COUPON DEPO
             
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@DValueDate,8,@maxEndDayTrailsPK,'REC COUPON',                  
'','INSTRUMENT: '  + @DInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@DTrxAmount as money), 1)
,0,@UsersID,@LastUpdate,@LastUpdate                    

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Budep Bank : ' + @DInstrumentID,'D',@DFinalAmount,                   
@DFinalAmount,0,1,@DFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestRecAcc and Status = 2                   

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@DInterestRecAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Budep Bank : ' + @DInstrumentID,'C',@DPiutangAmount,                   
0,@DPiutangAmount,1,0,@DPiutangAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestIncometAcc and Status = 2                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,3,1,2,@DInterestIncometAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Budep Bank : ' + @DInstrumentID,'C',@DBudepAmount,                   
0,@DBudepAmount,1,0,@DBudepAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestIncometAcc and Status = 2                 
END


IF @DInterestPaymentType not in (7) 
BEGIN


    if @DPaymentModeOnMaturity = 2 -- ACQ TO MATURITY DATE NWD
    begin
    set @DMaturityDate = dbo.fworkingDay(@DMaturityDate,1)
    end
    else if @DPaymentModeOnMaturity = 3 -- ACQ TO MATURITY DATE BWD
    begin
    set @DMaturityDate = dbo.fworkingDay(@DMaturityDate,1)
    end else
    BEGIN
    set @DMaturityDate = @DMaturityDate
    END

    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal          
       
    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@DValueDate,8,@maxEndDayTrailsPK,'MATURE BANK',                  
    '','INSTRUMENT: '  + @DInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@DTrxAmount as money), 1)
    ,0,@UsersID,@LastUpdate,@LastUpdate                  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@DCashAtBankAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Budep Bank : ' + @DInstrumentID,'D',@DBalance,                   
    @DBalance,0,1,@DBalance,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DCashAtBankAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@DInvestmentTimeDeposit,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Budep Bank : ' + @DInstrumentID,'C',@DBalance,                   
    0,@DBalance,1,0,@DBalance,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInvestmentTimeDeposit and Status = 2                 



    END       

        

END


-- PERKARA

ELSE IF @DInstrumentTypePK in (6)  -- REC COUPON REKSADANA    
BEGIN   

	 IF (@DReksadanaTypePK = 7) --PROTEKSI
	 BEGIN
		Select @DInterestRecAcc = InterestAccrProtectedFund,
        @DInterestIncometAcc = IncomeInterestAccrProtectedFund, @DCashForMutualFund = CashForMutualFund
		From FundAccountingSetup where Status = 2 and FundPK = @DFundPK      
	 END
	 ELSE IF (@DReksadanaTypePK = 6) --RDPT           
	 BEGIN
		Select @DInterestRecAcc = InterestAccrPrivateEquityFund,
        @DInterestIncometAcc = IncomeInterestAccrPrivateEquityFund, @DCashForMutualFund = CashForMutualFund
		From FundAccountingSetup where Status = 2 and FundPK = @DFundPK        
	 END
	 ELSE
	 BEGIN
		Select @DInterestRecAcc = InterestAccrMutualFund,
        @DInterestIncometAcc = IncomeInterestAccrMutualFund, @DCashForMutualFund = CashForMutualFund
		From FundAccountingSetup where Status = 2 and FundPK = @DFundPK      
	 END			                


    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal                   
         
	
-- BIKIN LOGIC BALIKIN INTEREST
set @DInterestAmount = 0
select @DInterestAmount = (InterestPercent/100 * @DTrxAmount/TotalDays) * datediff(day,@DAcqDate,@DNextCouponDate) from ReksadanaInstrument where ReksadanaPK = @DInstrumentPK and status in (1,2)

set @DTaxExpenseAmount = (@DTaxExpensePercent / 100) * @DInterestAmount              
set @DFinalAmount = @DInterestAmount -- @DTaxExpenseAmount (COBAIN)

    IF @DInterestAmount > 0                  
    BEGIN    

    --BALIKIN NILAI INTEREST KE BANK
             
    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@DValueDate,8,@maxEndDayTrailsPK,'REC COUPON',                  
    '','INSTRUMENT: '  + @DInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@DTrxAmount as money), 1)
    ,0,@UsersID,@LastUpdate,@LastUpdate                    

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@DCashForMutualFund,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Imbal Hasil Reksadana : ' + @DInstrumentID,'D',@DFinalAmount,                   
    @DFinalAmount,0,1,@DFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DCashForMutualFund and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@DInterestRecAcc,CurrencyPK,@DFundPK,@DInstrumentPK,0,'Penerimaan Imbal Hasil Reksadana : ' + @DInstrumentID,'C',@DFinalAmount,                   
    0,@DFinalAmount,1,0,@DFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @DInterestIncometAcc and Status = 2                  
    END
END

		
Fetch next From D Into @DValueDate,@DInstrumentPK,@DFundPK,@DTrxAmount,@DMarketValue,@DInstrumentTypePK,@DCurrencyPK,@DInstrumentID,@DNextCouponDate,@DBalance,@DTaxExpensePercent,@DAcqDate,@DMaturityDate      
,@DPaymentModeOnMaturity,@DInterestDaysType, @DInterestPercent ,@DInterestPaymentType, @DBitHTM, @DReksadanaTypePK                  
END
Close D
Deallocate D    
-------------------------------------------------------------------
-- C5. REC COUPON BOND

Declare @GInstrumentPK    int       
Declare @GInstrumentID    nvarchar(100)                  
Declare @GFundPK     int                  
Declare @GTrxAmount     numeric(22,6)                  
Declare @GMarketValue    numeric(22,6)                  
Declare @GInstrumentTypePK   int                  
Declare @GCurrencyPK    int                                   
Declare @GFinalAmount    numeric(22,6)   
Declare @GLastCouponDate   datetime                  
Declare @GNextCouponDate   datetime                  
Declare @GInterestAmount   numeric(18,6)                  
Declare @GBalance     numeric(18,0)                  
Declare @GTaxExpenseAmount   numeric(18,6)                  
Declare @GTaxExpensePercent   numeric(18,8)                  
Declare @GAcqDate   datetime                                  
Declare @GMaturityDate  datetime  
Declare @GPrevInterestAmount numeric(22,6)
Declare @GPrevFinalAmount numeric(22,6)
Declare @GPrevTaxExpenseAmount numeric(22,6)
declare @Gdivdays int
declare @Gintdays int

Declare @GInterestRecAcc int
Declare @GTaxExpenseAcc int
Declare @GInterestIncometAcc int
Declare @GCashAtBankAcc   int  
Declare @GInterestAccrBond int
Declare @GInvestmentTimeDeposit int
Declare @GInterestPaymentType int
Declare @GBitHTM int

Declare @GPaymentModeOnMaturity int
Declare @GInterestDaysType int
Declare @GInterestPercent numeric(18,4)


--DISINI

insert into #RecCoupon(InstrumentPK,FundPK,TrxAmount,MarketValue,InstrumentTypePK,CurrencyPK,InstrumentID,LastCouponDate,NextCouponDate,Balance,
TaxExpensePercent, AcqDate, MaturityDate,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,BitHTM)

Select A.InstrumentPK,A.FundPK,A.TrxAmount,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,
case when A.InterestPaymentType in (10,11,12) then dateadd(month,-3,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) else case when A.InterestPaymentType in (16,17,18) then dateadd(month,-6,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
else case when A.InterestPaymentType in (7,8,9) then dateadd(month,-1,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) end end end
,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   
,B.TaxExpensePercent, A.AcqDate, A.MaturityDate, A.PaymentModeOnMaturity,A.InterestDaysType,A.InterestPercent,A.InterestPaymentType,isnull(A.BitHTM,0) BitHTM                      
From FundPosition A                 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  
where  A.status = 2 and TrailsPK = (              
Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @DateYesterday
) 
and B.InstrumentTypePK in (2,3,8,9,11,13,14,15)
and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) > @DateYesterday 
and dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) <= @valuedate 
and AcqDate < @valuedate

DECLARE G CURSOR FOR 
select InstrumentPK,FundPK,round(TrxAmount,0) TrxAmount,MarketValue,InstrumentTypePK, CurrencyPK,InstrumentID,LastCouponDate,NextCouponDate,round(Balance,0) Balance                   
,TaxExpensePercent, AcqDate, MaturityDate 
,PaymentModeOnMaturity,InterestDaysType,InterestPercent,InterestPaymentType,BitHTM
from #RecCoupon where (NextCouponDate >= @DateYesterday and NextCouponDate <= @valuedate) and InstrumentTypePK in (2,3,8,9,11,13,14,15)
Open G
Fetch Next From G
Into @GInstrumentPK,@GFundPK,@GTrxAmount,@GMarketValue,@GInstrumentTypePK,@GCurrencyPK,@GInstrumentID,@GLastCouponDate,@GNextCouponDate,@GBalance,@GTaxExpensePercent,@GAcqDate,@GMaturityDate   
,@GPaymentModeOnMaturity,@GInterestDaysType, @GInterestPercent ,@GInterestPaymentType,@GBitHTM         
While @@FETCH_STATUS = 0
BEGIN      
  

IF @GInstrumentTypePK in (2,3,8,9,11,13,14,15)            
BEGIN      
              

    IF (@GInstrumentTypePK not in (13,15))
    BEGIN       
        IF (@GBitHTM = 1)
        BEGIN
            Select @GInterestRecAcc = InterestAccrBondHTM
            ,@GTaxExpenseAcc = TaxExpenseInterestIncomeBond,@GInterestIncometAcc = IncomeInterestBondHTM
            From FundAccountingSetup where Status = 2  and FundPK = @GFundPK  
        END
        ELSE
        BEGIN
            Select @GInterestRecAcc = InterestAccrBond
            ,@GTaxExpenseAcc = TaxExpenseInterestIncomeBond,@GInterestIncometAcc = IncomeInterestBond
            From FundAccountingSetup where Status = 2  and FundPK = @GFundPK  
        END       
                
    END 
    ELSE
    BEGIN
        IF (@GBitHTM = 1)
        BEGIN
            Select @GInterestRecAcc = InterestAccrSukukHTM
            ,@GTaxExpenseAcc = TaxExpenseInterestIncomeBond,@GInterestIncometAcc = IncomeInterestSukukHTM
            From FundAccountingSetup where Status = 2  and FundPK = @GFundPK  
        END
        ELSE
        BEGIN
            Select @GInterestRecAcc = InterestAccrSukuk
            ,@GTaxExpenseAcc = TaxExpenseInterestIncomeBond,@GInterestIncometAcc = IncomeInterestSukuk
            From FundAccountingSetup where Status = 2  and FundPK = @GFundPK  
        END 
    END


Select @GCashAtBankAcc = FundJournalAccountPK From FundCashRef where Status = 2 and FundPK = @GFundPK

            

Begin           
Select @Gintdays =  DateDiff(day,@DateYesterday,@valuedate) 
--IF(@GInterestPaymentType in (10,11,12)) 
--BEGIN
	select @Gdivdays = 90
--END
--ELSE
--IF(@GInterestPaymentType in (16,17,18)) 
--BEGIN
--	select @Gdivdays = 180
--END
--ELSE
--IF(@GInterestPaymentType in (7,8,9)) 
--BEGIN
--	select @Gdivdays = 30
--END
--ELSE
--BEGIN
	select @Gdivdays = datediff(day,@GLastCouponDate,@GNextCouponDate)   
--END    

    Select @GInterestAmount =  @GBalance * @GInterestPercent /100 /365 *  @Gdivdays                                  
         

   
                                                 
End               

--IF (@GAcqDate > @GLastCouponDate)
--BEGIN
--    set @GTaxExpenseAmount = (@GTaxExpensePercent / 100) * (@GBalance * @GInterestPercent /100 /365) * (datediff(day,@GAcqDate,@GNextCouponDate))                  
--END
--ELSE
--BEGIN
    set @GTaxExpenseAmount = (@GTaxExpensePercent / 100) * @GInterestAmount
--END

set @GFinalAmount = @GInterestAmount - @GTaxExpenseAmount

set @GFinalAmount = round(@GFinalAmount,0)  

IF @GInterestAmount > 0                  
BEGIN    
	
IF (@GNextCouponDate <= @valuedate)
BEGIN
    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal    
    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@valuedate,8,@maxEndDayTrailsPK,'REC COUPON',                  
    '','INSTRUMENT: '  + @GInstrumentID + ', COST VALUE : ' + convert(varchar,cast(@GTrxAmount as money), 1)
    ,0,@UsersID,@LastUpdate,@LastUpdate                    

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@GCashAtBankAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'Penerimaan Coupon Obligasi: ' + @GInstrumentID,'D',@GFinalAmount,                    
    @GFinalAmount,0,1,@GFinalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GCashAtBankAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@GInterestRecAcc,CurrencyPK,@GFundPK,@GInstrumentPK,0,'Penerimaan Coupon Obligasi: ' + @GInstrumentID,'C',@GFinalAmount,                   
    0,@GFinalAmount,1,0,@GFinalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @GInterestRecAcc and Status = 2  

  
END

END               
END                  

		
Fetch next From G Into @GInstrumentPK,@GFundPK,@GTrxAmount,@GMarketValue,@GInstrumentTypePK,@GCurrencyPK,@GInstrumentID,@GLastCouponDate,@GNextCouponDate,@GBalance,@GTaxExpensePercent,@GAcqDate,@GMaturityDate      
,@GPaymentModeOnMaturity,@GInterestDaysType, @GInterestPercent,@GInterestPaymentType, @GBitHTM                  
END
Close G
Deallocate G   









-----------------------------------------------------------------------------------------------------------

-- D. COPY FUND CLIENT POSITION --    
    

if not exists(
	select * from FundClientPosition where date = dbo.FWorkingDay(@ValueDate, 1)
)
BEGIN

    
Declare @CPFundPK int           
Declare A Cursor For              
Select FundPK From Fund Where status = 2              
Open  A              
Fetch Next From  A              
into @CPFundPK              
While @@Fetch_Status = 0              
BEGIN              
Insert into FundClientPosition(Date,FundClientPk,FundPK,CashAmount,UnitAmount,LastUpdate)              
Select dbo.FWorkingDay(@ValueDate, 1),FundClientPK,FundPK,CashAmount,UnitAmount,@LastUpdate              
From FundClientPosition where Date = @ValueDate and FundPK = @CPFundPK           
Fetch next From A                   
Into @CPFundPK              
END                  
Close A                  
Deallocate A


END    


-- E. PENDING UNIT REGISTRY
-- 1. SUBSCRIPTION
Declare @SValueDate Datetime,@SFundPK int,@SCashRefPK int,@SFundClientPK int,@SFundClientName nvarchar(100),@STotalCashAmount numeric(22,4),@SCurrencyPK int ,@SType nvarchar(5)  
Declare @SPendingSubscription int,@SSubscription int,@SCashAtBankAcc int   
Declare @SPendingRedemption int,@SRedemption int
Declare @SCashAmount numeric(22,4), @SFeeAmount numeric(22,4)
Declare @SPayableSubsAcc int                 
DECLARE @BitPendingSubscription bit		
Declare @UnitRegistryPK int    				 
Declare @IssueDate datetime

Declare A Cursor For                  
Select ClientSubscriptionPK,ValueDate,FundPK,CashRefPK,A.FundClientPK,B.Name,TotalCashAmount,CurrencyPK,'SUBS' Type
,CashAmount, SubscriptionFeeAmount          
From ClientSubscription A 
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)        
Where A.status not in (3,4) and ValueDate = @ValueDate  
union all
Select ClientRedemptionPK,ValueDate,FundPK,CashRefPK,A.FundClientPK,B.Name,case when TotalCashAmount = 0 then TotalUnitAmount * dbo.FgetCloseNav(@DateYesterday,A.FundPK) else TotalCashAmount End TotalCashAmount,CurrencyPK,'RED' Type         
,CashAmount, RedemptionFeeAmount
From ClientRedemption A 
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)        
Where A.Status <>  3  and ValueDate = @ValueDate
	            
Open A                  
Fetch Next From A                  
Into @UnitRegistryPK,@SValueDate,@SFundPK,@SCashRefPK,@SFundClientPK,@SFundClientName,@STotalCashAmount,@SCurrencyPK,@SType,
@SCashAmount,@SFeeAmount
While @@FETCH_STATUS = 0                  
Begin 
IF (@SType = 'SUBS')
BEGIN

select @IssueDate = IssueDate from Fund where status in (1,2) and FundPK = @SFundPK

SELECT @BitPendingSubscription = ISNULL(BitPendingSubscription,1) FROM dbo.FundFee WHERE fundPK = @SFundPK
AND date = 
(
SELECT MAX(Date) FROM dbo.FundFee WHERE Date <= @SValueDate AND FundPK = @SFundPK
AND status = 2
) and STATUS = 2

set @BitPendingSubscription = isnull(@BitPendingSubscription,0)

set @SCashAtBankAcc = NULL

Select @SCashAtBankAcc = isnull(FundJournalAccountPK,3) From FundCashRef where Status = 2 and FundCashRefPK = @SCashRefPK
if (@SCashAtBankAcc is null or @SCashAtBankAcc  = '')
BEGIN
set @SCashAtBankAcc = 3
END

IF (@ValueDate = @IssueDate)
BEGIN

    Select @SSubscription = Subscription From FundAccountingSetup where Status = 2  and FundPK = @SFundPK
                     
    -- T0
    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@SValueDate,2,@maxEndDayTrailsPK,'Pending Subscription',                  
    @UnitRegistryPK,'Pending Subscription T0 Fund Client : ' + @SFundClientName ,0,@UsersID,@LastUpdate,@LastUpdate                  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@SCashAtBankAcc,@SCurrencyPK,@SFundPK,0,@SFundClientPK,'Subscription Fund Client : ' + @SFundClientName,'D',@SCashAmount,                   
    @SCashAmount,0,1,@SCashAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SCashAtBankAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@SSubscription,@SCurrencyPK,@SFundPK,0,@SFundClientPK,'Subscription Fund Client : ' + @SFundClientName,'C',@STotalCashAmount,                   
    0,@STotalCashAmount,1,0,@STotalCashAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SSubscription and Status = 2   


END
ELSE 
BEGIN

    IF(@BitPendingSubscription = 1)
    BEGIN
    Select @SPendingSubscription = PendingSubscription,@SSubscription = Subscription
    ,@SPayableSubsAcc = payablesubscriptionfee
    From FundAccountingSetup 
    where Status = 2  and FundPK = @SFundPK

                       
    -- T0
    select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  

    INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
    ,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

    Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@SValueDate,2,@maxEndDayTrailsPK,'Pending Subscription',                  
    @UnitRegistryPK,'Pending Subscription T0 Fund Client : ' + @SFundClientName ,0,@UsersID,@LastUpdate,@LastUpdate                  

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select  @FundJournalPK,1,1,2,@SCashAtBankAcc,@SCurrencyPK,@SFundPK,0,@SFundClientPK,'Subscription Fund Client : ' + @SFundClientName,'D',@SCashAmount,                   
    @SCashAmount,0,1,@SCashAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SCashAtBankAcc and Status = 2                   

    INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
    ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

    Select @FundJournalPK,2,1,2,@SPendingSubscription,@SCurrencyPK,@SFundPK,0,@SFundClientPK,'Subscription Fund Client : ' + @SFundClientName,'C',@STotalCashAmount,                   
    0,@STotalCashAmount,1,0,@STotalCashAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SPendingSubscription and Status = 2   

        if @SFeeAmount > 0
        BEGIN

        INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
        ,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

        Select @FundJournalPK,3,1,2,@SPayableSubsAcc,@SCurrencyPK,@SFundPK,0,@SFundClientPK,'Subscription Fund Client : ' + @SFundClientName,'C',@SFeeAmount,                   
        0,@SFeeAmount,1,0,@SFeeAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @SPayableSubsAcc and Status = 2   
        END

    END


END                                  

  

         
END
         
Fetch next From A                   
Into @UnitRegistryPK,@SValueDate,@SFundPK,@SCashRefPK,@SFundClientPK,@SFundClientName,@STotalCashAmount,@SCurrencyPK ,@SType,@SCashAmount,@SFeeAmount
END                  
Close A                  
Deallocate A

  UPDATE A 
SET A.AvgNAV = dbo.FGetAVGForFundClientPosition(@ValueDate,A.FundClientPK,A.FundPK), A.AUM = ISNULL(C.UnitAmount,0) * ISNULL(B.Nav,0)
FROM FundClientPosition A
    LEFT JOIN CloseNAV B on A.FUndPK = B.FundPK and B.status = 2 and B.date = @ValueDate
    LEFT JOIN FundClientPosition C ON A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK AND C.Date = @DateYesterday
WHERE A.Date = @ValueDate

UPDATE A 
SET A.AUM = ISNULL(B.AUM,0),A.AvgNAV = ISNULL(B.AvgNAV,0) 
FROM dbo.FundClientPositionSummary A
    LEFT JOIN dbo.FundClientPosition B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK AND B.Date  = @ValueDate

-------------------------------------------
-- JOURNAL CORPORATE ACTION

Create Table #ZDividenSaham                  
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4),
PaymentDate datetime,
RecordingDate datetime,
Earn numeric(22,4),
Hold numeric(22,4)
)   


--DIVIDEN SAHAM
-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume,PaymentDate,RecordingDate,Hold,Earn)
Select  B.FundPK,B.InstrumentPK,B.Balance + ISNULL(C.BalanceFromInv,0) LastBalance,
A.PaymentDate,A.RecordingDate,A.Hold,A.Earn
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 1 and A.Status = 2 and A.ExDate = @ValueDate



Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume,PaymentDate,RecordingDate,Hold,Earn)
Select B.FundPK,B.InstrumentPK,isnull(B.BalanceFromInv,0),A.PaymentDate,A.RecordingDate,A.Hold,A.Earn
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 1 and A.Status = 2 and A.ExDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null

Declare @TIncomeDividend int
Declare @TARDividend int
Declare @TotalAmount numeric(22,4)
Declare @TWithHoldingTaxPPH23 int


Declare @TInstrumentPK int
declare @TFundPK int
declare @TLastVolume numeric(22,4)
declare @TPaymentDate datetime
declare @TRecordingDate datetime
declare @TEarn numeric(22,4)
declare @THold numeric(22,4)

Declare @TTaxPercentage numeric(8,4)

Declare A Cursor For   
Select * From #ZDividenSaham
Open A                  
Fetch Next From A                  
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
While @@FETCH_STATUS = 0                  
Begin 

Select @TIncomeDividend = IncomeDividend,@TARDividend = ARDividend,@TWithHoldingTaxPPH23 = prepaidTaxDividend 
,@TTaxPercentage = TaxPercentageDividend
From FundAccountingSetup where Status = 2  and FundPK = @TFundPK
set @TotalAmount = 0
set @TotalAmount = @TLastVolume/@THold * @TEarn
   
if @TotalAmount > 0
BEGIN
	

select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,2,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@TPaymentDate,12,@maxEndDayTrailsPK,'DIVIDEND',                  
'','DIVIDEND CASH' ,1,@UsersID,@LastUpdate,@LastUpdate                  


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,1,1,2,@TARDividend,CurrencyPK,@TFundPK,0,0,'AR DIVIDEND','D',@TotalAmount,                   
@TotalAmount,0,1,@TotalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TARDividend and Status = 2  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@TIncomeDividend,CurrencyPK,@TFundPK,0,0,'AR DIVIDEND','C',@TotalAmount,                   
0,@TotalAmount,1,0,@TotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TIncomeDividend and Status = 2   

END
   
Fetch next From A                   
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
END                  
Close A                  
Deallocate A



---BOND AMORTIZE
TRUNCATE TABLE #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume,PaymentDate,Earn,Hold)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance,A.PaymentDate,A.Earn,A.Hold
--B.Balance + C.BalanceFromInv LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK  in (2,3,9,15)
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
--and C.ValueDate >= A.ValueDate
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate


Declare @TInvestmentInBond int
Declare @TBondAmortized int


Declare A Cursor For   
Select InstrumentPK,FundPK,LastVolume,PaymentDate,PaymentDate,Earn,Hold From #ZDividenSaham
Open A                  
Fetch Next From A                  
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
While @@FETCH_STATUS = 0                  
Begin 

Select @TInvestmentInBond = InvestmentBond,@TBondAmortized = BondAmortization
From FundAccountingSetup where Status = 2  and FundPK = @TFundPK
set @TotalAmount = 0
set @TotalAmount = @TLastVolume *  @TEarn / @THold * -1
   
if @TotalAmount < 0
BEGIN
SET @TotalAmount = ABS(@TotalAmount)
----------- TO
select @FundJournalPK = isnull(max(FundJournalPK),0) + 1 From FundJournal  
INSERT INTO [FundJournal]([FundJournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Type],[TrxNo],[TrxName],[Reference]                  
,[Description],[Posted],[EntryUsersID],[EntryTime],[LastUpdate])                  

Select  @FundJournalPK, 1,1,'Posting End Day Trails No: ' + CAST(@maxEndDayTrailsPK as nvarchar(15)),@PeriodPK,@ValueDate,12,@maxEndDayTrailsPK,'BOND AMORTIZE',                  
'','CORPORATE ACTION BOND AMORTIZE' ,0,@UsersID,@LastUpdate,@LastUpdate                  

INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select  @FundJournalPK,1,1,2,@TBondAmortized,CurrencyPK,@TFundPK,0,0,'CORPORATE ACTION BOND AMORTIZE','D',@TotalAmount,                   
@TotalAmount,0,1,@TotalAmount,0,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TBondAmortized and Status = 2                   


INSERT INTO [FundJournalDetail]([FundJournalPK],[AutoNo],[HistoryPK],[Status],[FundJournalAccountPK],[CurrencyPK],[FundPK],[InstrumentPK]                  
,[FundClientPK],[DetailDescription],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUpdate])                  

Select @FundJournalPK,2,1,2,@TInvestmentInBond,CurrencyPK,@TFundPK,0,0,'CORPORATE ACTION BOND AMORTIZE','C',@TotalAmount,                   
0,@TotalAmount,1,0,@TotalAmount,@LastUpdate From FundJournalAccount Where FundJournalAccountPK = @TInvestmentInBond and Status = 2   

END
   
Fetch next From A                   
Into @TInstrumentPK,@TFundPK,@TLastVolume,@TPaymentDate,@TRecordingDate,@TEarn,@THold
END                  
Close A                  
Deallocate A


-------------------------------------------
                        
 
Update EndDayTrails set BitValidate = 1,LogMessages = @MSG where EndDayTrailsPK = @maxEndDayTrailsPK and Status = 1                    

Declare @ClientSubscriptionPK int
Declare @ClientRedemptionPK int
Declare @DateWorkingTo datetime

set @DateWorkingTo = dbo.FWorkingDay(@ValueDate, 1)

Create table #dayTemp
(
IntDay  int
)

WHILE (@Valuedate < @DateWorkingTo)
BEGIN
set @Valuedate = DATEADD(day,1,@Valuedate)
insert into #dayTemp
Select day(@Valuedate)
END

select @ClientSubscriptionPK = isnull(max(ClientSubscriptionPK),0)  + 1 from ClientSubscription
select @ClientRedemptionPK = isnull(max(ClientRedemptionPK),0)  + 1 from ClientRedemption
    
INSERT INTO [dbo].[ClientSubscription]    
([ClientSubscriptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
[NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
[SubscriptionFeePercent],[SubscriptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[Type],[AutoDebitDate],[EntryUsersID],[EntryTime],[LastUpdate])   
select @ClientSubscriptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,2,@ValueDate,@UsersID,@LastUpdate,@LastUpdate    
From RegulerInstruction A 
left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
where AutoDebitDate in (
select IntDay From #dayTemp
) and  A.status = 2 and A.TrxType = 1

INSERT INTO [dbo].[ClientRedemption]    
([ClientRedemptionPK],[HistoryPK],[Status],[NAVDate],[ValueDate],   
[NAV],[FundPK],[FundClientPK],[CashRefPK],[CurrencyPK],[Description],[CashAmount],[UnitAmount],[TotalCashAmount],[TotalUnitAmount],   
[RedemptionFeePercent],[RedemptionFeeAmount],[AgentPK],[AgentFeePercent],[AgentFeeAmount],[BankRecipientPK],[Type],[EntryUsersID],[EntryTime],[LastUpdate])   
select @ClientRedemptionPK + ROW_NUMBER() OVER(ORDER BY A.FundClientPK ASC),1,1,@DateWorkingTo,@DateWorkingTo,   
0,FundPK,A.FundClientPK,FundCashRefPK,1,'',GrossAmount,0,NetAmount,0,    
FeePercent,FeeAmount,isnull(B.SellingAgentPK,0),0,0,BankRecipientPK,2,@UsersID,@LastUpdate,@LastUpdate    
From RegulerInstruction A left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2
where AutoDebitDate in (
select IntDay From #dayTemp
) and  A.status = 2 and A.TrxType = 2


Select @maxEndDayTrailsPK LastPK     
                             
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public int EndDayTrailsFundPortfolio_Generate(string _usersID, DateTime _valueDate)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

UPDATE Investment set PriceMode = 1 where InstrumentTypePK  in(1,4,16)
update Investment set MarketPK = 1
update Investment set Category = null where InstrumentTypePK  <> 5

Declare @PeriodPK    int                  
Declare @maxEndDayTrailsFundPortfolioPK int                    

Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo                  
Select @maxEndDayTrailsFundPortfolioPK = max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio     
set @maxEndDayTrailsFundPortfolioPK = isnull(@maxEndDayTrailsFundPortfolioPK,1)               

Insert into EndDayTrailsFundPortfolio  (EndDayTrailsFundPortfolioPK,HistoryPK,Status,ValueDate,BitValidate
,LogMessages,EntryUsersID,EntryTime,LastUpdate)                    
Select @maxEndDayTrailsFundPortfolioPK,1,1,@ValueDate,0
,'',@UsersID,@LastUpdate,@LastUpdate                    
      

Create Table #ZFundPosition                  
(                  
InstrumentPK int,     
InstrumentTypePK int,                  
InstrumentID nvarchar(100),                  
FundPK int,                  
FundID nvarchar(100),                  
AvgPrice numeric(38,12),                  
LastVolume numeric(38,4),                  
ClosePrice numeric(38,12),                  
TrxAmount numeric(38,6),              
AcqDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200),
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
BitBreakable bit,
AcqPrice numeric(22,4),
TradeDate datetime,
BitHTM bit
)                  
    
Create Table #ZLogicFundPosition              
(              
BuyVolume numeric(38,4),              
SellVolume numeric(38,4),              
BuyAmount numeric(38,4),       
SellAmount numeric(38,4),            
FundPK int,              
InstrumentPK int,              
SettlementDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) ,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
AcqDate datetime,
BitBreakable bit,
AcqPrice numeric(22,4),
TradeDate datetime,
BitHTM bit
)              

-- TARIK JUAL BELI DARI INVESTMENT              
Insert into #ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable,AcqPrice,TradeDate,BitHTM)               

Select SUM(BuyVolume) BuyVolume,SUM(SellVolume) SellVolume,SUM(BuyAmount) BuyAmount,SUM(SellAmount) SellAmount,B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,
B.InterestPercent,B.CurrencyPK,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate
,B.BankPK,B.BankBranchPK,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable,B.AcqPrice,B.TradeDate,B.BitHTM
From               
(               
Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.TaxExpensePercent,0) TaxExpensePercent,isnull(A.MarketPK,0) MarketPK,
isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable,A.AcqPrice,A.TradeDate,A.BitHTM
from (                 

-- REKSADANA BUY
select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type in (1,4) then null else A.SettlementDate end AcqDate,Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
 case when B.InstrumentTypePK not in (1,4,5,6,16) then A.DonePrice else null end AcqPrice, null TradeDate, 0 BitHTM       
from Investment A 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
where SettlementDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate) and A.InstrumentTypePK = 6  and A.fundpk <> 1            
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK,
A.DonePrice

UNION ALL   

-- REKSADANA BUY (Traditional)
select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type in (1,4) then null else A.SettlementDate end AcqDate,Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
 case when B.InstrumentTypePK not in (1,4,5,6,16) then A.DonePrice else null end AcqPrice, null TradeDate, 0 BitHTM       
from Investment A 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
where Valuedate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate) and A.InstrumentTypePK = 6 and A.fundpk = 1             
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK,
A.DonePrice
  

UNION ALL                  


-- REKSADANA SELL
select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,        
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
case when B.InstrumentTypePK not in (1,4,5,6,16) then A.AcqPrice else null end AcqPrice, null TradeDate , 0 BitHTM      
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate) and A.InstrumentTypePK = 6                  
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK,
A.AcqPrice 


UNION ALL  

-- NON REKSADANA BUY	
select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.SettlementDate end AcqDate,Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
 case when B.InstrumentTypePK not in (1,4,5,6,16) then A.DonePrice else null end AcqPrice,case when B.InstrumentTypePK not in (1,4,5,6,16) then A.ValueDate else null end TradeDate,A.BitHTM         
from Investment A 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate) and A.InstrumentTypePK <> 6              
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK,
A.DonePrice,A.BitHTM
  

UNION ALL                  

-- NON REKSADANA SELL
select A.InstrumentPK,0 BuyVolume,sum(A.DoneVolume) SellVolume,0 BuyAmount,SUM(A.DoneAmount) SellAmount, A.FundPK,               
Case when C.Type in (1,4) then null else A.AcqDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,A.ValueDate,        
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type in (1,4) then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
case when B.InstrumentTypePK not in (1,4,5,6,16) then A.AcqPrice else null end AcqPrice,case when B.InstrumentTypePK not in (1,4,5,6,16) then E.ValueDate else null end TradeDate,A.BitHTM        
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2       
left join FundPosition D on A.TrxBuy = D.[Identity] and D.status = 2 
left join Investment E on D.InstrumentPK = E.InstrumentPK and D.AcqDate = E.SettlementDate and D.FundPK = E.FundPK and E.StatusSettlement = 2                
where A.ValueDate <= @ValueDate and A.trxType = 2 and A.StatusSettlement = 2  and year(A.ValueDate) = year(@ValueDate) and A.InstrumentTypePK <> 6                  
Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent,A.ValueDate
,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK,
A.AcqPrice ,A.BitHTM,E.ValueDate
			
UNION ALL

select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type in (1,4) then null else SettlementDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type in (1,4) then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,case when B.InstrumentTypePK = 6 then A.AcqPrice else null end AcqPrice, null TradeDate,0 
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                       
where ValueDate <= @ValueDate and trxType = 3 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)             
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK,A.AcqPrice

)A                
Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
,A.ValueDate,A.CurrencyPK ,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable,A.AcqPrice,A.TradeDate,A.BitHTM
)B     
Group By B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.InterestPercent,B.CurrencyPK
,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate,B.BankPK,B.BankBranchPK
,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable,B.AcqPrice,B.TradeDate,B.BitHTM


--SELECT * FROM #ZLogicFundPosition WHERE InstrumentPK = 4

--INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
,PriceMode,BitIsAmortized,BitBreakable,TradeDate,BitHTM)                  
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AcqPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
isnull(A.BuyAmount,0) - (Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AcqPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
,A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized,Case when D.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,A.TradeDate,A.BitHTM
From #ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and isnull(A.BitBreakable,0) = isnull(B.BitBreakable,0)
and Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AcqPrice end =
Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then B.AvgPrice end
and B.PeriodPK = @PeriodPK where E.Type in (2,5,14,9)


union all

Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AcqPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
isnull(A.BuyAmount,0) - (Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AcqPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
,A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized,Case when D.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,A.TradeDate,A.BitHTM
From #ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and isnull(A.BitBreakable,0) = isnull(B.BitBreakable,0)
--and Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AcqPrice end =
--Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then B.AvgPrice end
and B.PeriodPK = @PeriodPK where E.Type in (1,4)


-- INSERT INVESTMENT + BEG BALANCE DEPOSITO ONLY ( INVESTMENT + BEG BALANCE )              
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable,AcqPrice,TradeDate,BitHTM)                  
select InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,avg(AvgPrice)
,sum(LastVolume),avg(ClosePrice),TrxAmount,AcqDate,MaturityDate,InterestPercent
,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable,AcqPrice, TradeDate,BitHTM
from (
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID InstrumentID,A.FundPK,C.ID FundID, 
1 AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
1 ClosePrice,                  
isnull(A.BuyAmount,0) - (1 * isnull(A.SellVolume,0))  + isnull		(B.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when D.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
A.AcqPrice,A.TradeDate,A.BitHTM
From #ZLogicFundPosition A              
LEft join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2     
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK 
and isnull(A.Maturitydate,'01/01/1900') = isnull(B.MaturityDate,'01/01/1900')    
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (3)
)A  
group by InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,TrxAmount,AcqDate
,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable,A.AcqPrice,A.TradeDate,A.BitHTM




-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
,InterestDaysType,InterestPaymentType,BitBreakable,AcqPrice,TradeDate,BitHTM)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AvgPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),isnull(A.InterestPercent,0),C.CurrencyPK, A.Category,isnull(A.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
A.AvgPrice,case when C.InstrumentTypePK not in (1,4,5,6,16) then A.AcqDate else null end TradeDate,BitHTM
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')    
and Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AvgPrice end =
Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then B.AvgPrice end         
where A.PeriodPK = @PeriodPK              
) and E.Type in (2,5,14,9) and A.periodPK = @PeriodPK     

union all              
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AvgPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),isnull(A.InterestPercent,0),C.CurrencyPK, A.Category,isnull(A.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,
A.AvgPrice,case when C.InstrumentTypePK not in (1,4,5,6,16) then A.AcqDate else null end TradeDate,BitHTM
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')         
where A.PeriodPK = @PeriodPK              
) and E.Type in (1,4) and A.periodPK = @PeriodPK   

-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT DEPOSITO ONLY             
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable,TradeDate,BitHTM)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 1 AvgPrice,isnull(A.Volume,0) LastVolume,                  
1 ClosePrice, isnull(A.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,C.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.paymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when C.InstrumentTypePK not in (1,4,16) then A.BitBreakable else 0 end BitBreakable,null,0
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2     
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2             
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZLogicFundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK  and A.MaturityDate = B.MaturityDate         
where A.PeriodPK = @PeriodPK             
) and E.Type in (3) and A.periodPK = @PeriodPK           


-- CORPORATE ACTION STOCK SPLIT / REVERSE STOCK SPLIT
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.ValueDate,isnull(B.FundPK,0),isnull(B.InstrumentPK,0), isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0),0
From CorporateAction A 
left join  #ZFundPosition B on A.InstrumentPK = B.InstrumentPK
where A.Type = 4 and
ValueDate = @ValueDate and A.status = 2


-- CORPORATE ACTION DIVIDEN SAHAM

Create Table #ZDividenSaham                  
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4)     
)   



-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.ValueDate,B.FundPK,A.InstrumentPK,B.LastVolume / A.Hold * A.Earn DividenSaham,A.Price
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate


-- CORPORATE ACTION DIVIDEN RIGHTS
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-R' and D.status = 2
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate


-- CORPORATE ACTION DIVIDEN WARRANT
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-W' and D.status = 2
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate


-- PROSES EXERCISE YANG DAH DI DISTRIBUTION DATE
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select ExercisePK,2,@ValueDate,FundPK,InstrumentPK,BalanceExercise,Price from Exercise 
where DistributionDate  = @ValueDate and status = 2


-- CORPORATE ACTION BOND AMORTIZEN
TRUNCATE TABLE #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance
--B.Balance + C.BalanceFromInv LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK  in (2,3,9,15)
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
--and C.ValueDate >= A.ValueDate
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate

--Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
--Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
--from CorporateAction A
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK = 1 
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
--and B.ValueDate >= A.ValueDate
--left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
--where A.Type = 2 and A.Status = 2 and A.PaymentDate = @ValueDate
--and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,B.FundPK,A.InstrumentPK,B.LastVolume * A.Earn / A.Hold * -1,0
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate


-- UPDATE POSISI ZFUNDPOSITION + CORPORATE ACTION	
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = Case when C.InstrumentTypePK in (2,3,8,9,12,13,14,15,6) then A.AvgPrice else [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK) end,
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
select FundPK,A.InstrumentPK,Price, sum(Balance) Balance,A.status
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
and B.ID not like '%-W' and B.ID not like '%-R'
WHERE A.Date <= @ValueDate

Group By FundPK,A.InstrumentPK,Price,A.status
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
where C.Type in (1,9,2,5,14)
AND A.LastVolume > 0


--INSERT INSTRUMENT YANG ADA DI CORPORATE ACTION RESULT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,TradeDate,BitHTM)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
 [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,null,0
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2

where A.status = 2 and B.ID like '%-W' 

Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,TradeDate,BitHTM)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,null,0
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
 
where A.status = 2 and B.ID like '%-R'

                       
-- UPDATE POSISI ZFUNDPOSITION + FUND POSITION ADJUSTMENT
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = Case when C.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AvgPrice else [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK) end,
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
SELECT FundPK,A.InstrumentPK,sum(Price*Balance) / SUM(balance) Price, sum(Balance) Balance,A.status,
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  THEN A.AcqDate ELSE NULL END AcqDate
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
WHERE A.status = 2 AND A.Date <= @ValueDate 
Group By FundPK,A.InstrumentPK,A.status,B.InstrumentTypePK,A.AcqDate
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
AND A.AcqDate = B.AcqDate
left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2


--INSERT INSTRUMENT YANG ADA DI FUND POSITION ADJUSTMENT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,TradeDate,BitHTM)                  

SELECT A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID, 
 [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
SUM(A.Balance),dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
SUM(Balance*Price),
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  then  A.AcqDate else null End ,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,NULL,B.TaxExpensePercent,B.MarketPK,null,0
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
where A.status = 2 AND A.AcqDate <= @ValueDate
and NOT EXISTS 
(SELECT * FROM #ZFundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and A.AcqDate = C.AcqDate)
GROUP BY A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,B.TaxExpensePercent,B.MarketPK,A.AcqDate




-- DELETE RIGHTS AND WARRANT YANG EXPIRED
Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-R' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 3
)B on A.InstrumentPK = B.InstrumentPK

Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-W' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 5
)B on A.InstrumentPK = B.InstrumentPK

-- KURANGIN BALANCE WARRANT AND RIGHTS YANG ADA DI EXERCISE

Update A set A.LastVolume = A.LastVolume - isnull(B.BalanceExercise,0) from #ZFundPosition A
left join Exercise B on A.InstrumentPK = B.InstrumentRightsPK and B.status = 2
where Date = @ValueDate


Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable,TradeDate,BitHTM)                  
Select @maxEndDayTrailsFundPortfolioPK,@maxEndDayTrailsFundPortfolioPK,1,1,'',@ValueDate,A.FundPK, FundID,                  
A.InstrumentPK,InstrumentID,AvgPrice,LastVolume
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then AvgPrice/100 else AvgPrice End * LastVolume CostValue
, ClosePrice,TrxAmount
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
AcqDate,MaturityDate,InterestPercent,CurrencyPK, Category,TaxExpensePercent,MarketPK
,isnull(InterestDaysType,0),isnull(InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(BankPK,0),isnull(BankBranchPK,0)
,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0),TradeDate,isnull(BitHTM,0)
From #ZFundPosition  A
where A.LastVolume > 0 

    

Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
Where FundPositionPK = @maxEndDayTrailsFundPortfolioPK and I.InstrumentTypePK not in (1,4,16,6)
and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  


---------PROSES AMORTIZED DAN PRICE MODE------------------------------
update A set A.ClosePrice =  Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
when A.PriceMode = 2 then LowPriceValue
when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
else  
dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			 
end 
, A.MarketValue = A.Balance * Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
when A.PriceMode = 2 then LowPriceValue
when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
else  
dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			  
end / Case when D.InstrumentTypePK in (2,3,8,14,13,9,15)  then 100 else 1 end
from FundPosition A 
left join 
(
select InstrumentPK,LowPriceValue,ClosePriceValue,HighPriceValue From ClosePrice where Date =
(
Select max(Date) From ClosePrice where date <= @ValueDate and status = 2
) and status = 2
)B on A.InstrumentPK = B.InstrumentPK 
left join instrument C on A.InstrumentPK = C.instrumentPK and C.Status = 2
left join InstrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
where A.TrailsPK = @maxEndDayTrailsFundPortfolioPK

-- STATIC CLOSEPRICE


Declare @StaticClosePrice table
(
	InstrumentPK int,
	InstrumentTypePK int,
	ClosePrice numeric(18,8),
	FundPK int
)

Declare @FFundPK int

Declare A Cursor For
	Select FundPK from Fund where status = 2
Open A
Fetch next From A
Into @FFundPK
WHILE @@FETCH_STATUS = 0  
BEGIN
			

		Declare @CInstrumentPK int

		Declare B cursor For
			Select distinct InstrumentPK from updateclosePrice where status = 2
		Open B
		Fetch Next From B
		Into @CInstrumentPK
		While @@Fetch_Status = 0
		BEGIN
            IF EXISTS(select * from UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK and FundPK = @FFundPK and Date = @ValueDate)
            BEGIN

			insert into @StaticClosePrice
			Select A.InstrumentPK,InstrumentTypePK,A.ClosePriceValue,@FFundPK from UpdateClosePrice A
            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
            where A.status = 2 and A.InstrumentPK = @CInstrumentPK 
			and Date = (
				Select Max(Date) From UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK
				and Date <= @ValueDate and FundPK = @FFundPK
			)  and FundPK = @FFundPK

            END

			FETCH NEXT FROM B INTO @CInstrumentPK  
		END
		Close B
		Deallocate B


		
		Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		left join @StaticClosePrice B on A.InstrumentPK = B.InstrumentPK
		where A.Date = @ValueDate and A.TrailsPK = @maxEndDayTrailsFundPortfolioPK
		and A.InstrumentPK in(
			select instrumentPK From @StaticClosePrice where FundPK = @FFundPK
		) and A.FundPK = @FFundPK

	
FETCH NEXT FROM A 
INTO @FFundPK
END 

CLOSE A;  
DEALLOCATE A;

-- update TrxBuy di Investment untuk Sell / Rollover

declare @DTrxBuy int
declare @DInvestmentPK int
declare @DInstrumentPK int
declare @DFundPK int
declare @DDate datetime
declare @DNewIdentity bigint
declare @DAcqDate datetime

DECLARE C CURSOR FOR 
select TrxBuy,InvestmentPK,B.InstrumentPK,B.FundPK,B.Date,B.AcqDate from Investment A
left join FundPosition B on A.TrxBuy = B.[Identity]
where B.Date = @valuedate and InstrumentTypePK in (5,10) and StatusSettlement in (1,2) and TrxType in (2,3)
Open C
Fetch Next From C
Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate,@DAcqDate  
While @@FETCH_STATUS = 0
BEGIN   

set @DNewIdentity = 0
select @DNewIdentity = [Identity] from FundPosition where InstrumentPK = @DInstrumentPK and FundPK = @DFundPK and Date = @DDate and AcqDate = @DAcqDate and status in (1,2)

update Investment set TrxBuy = @DNewIdentity where InvestmentPK = @DInvestmentPK and StatusSettlement in (1,2)


Fetch next From C Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate,@DAcqDate                  
END
Close C
Deallocate C    

	
Update EndDayTrailsFundPortfolio set BitValidate = 1 where EndDayTrailsFundPortfolioPK = @maxEndDayTrailsFundPortfolioPK and Status = 1        

Select @maxEndDayTrailsFundPortfolioPK LastPK




--SELECT * FROM dbo.FundPosition
--WHERE fundPK = 1
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean Settlement_ListingRpt(string _userID, InvestmentRpt _investmentRpt)
        {
            #region Settlement Instruction
            if (_investmentRpt.ReportName == "Settlement Instruction")
            {
                #region Bond
                if (_investmentRpt.ParamInstType == "2")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                string _paramFund = "";

                                if (!_host.findString(_investmentRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investmentRpt.FundFrom))
                                {
                                    _paramFund = "And IV.FundPK in ( " + _investmentRpt.FundFrom + " ) ";
                                }
                                else
                                {
                                    _paramFund = "";
                                }


                                cmd.CommandText = @"Select DATEDIFF (day,IV.ValueDate ,IV.SettlementDate ) HoldingPeriod,DATEDIFF (day,IV.LastCouponDate ,IV.SettlementDate ) TenorDays,
                                IV.TrxTypeID,Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,MV.DescOne SettlementModeDesc,
                                MV.DescTwo SettlementModeDescTwo,BB.ID BankCustodianName,isnull(BC.BankAccountNo,'') BankAccountNo,BC.ContactPerson BankCustodianContactPerson,
                                BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson ContactPersonCounterpart,C.Fax FaxNo,C.Name CounterpartName,isnull(B.ID,'') CounterpartBankID ,I.Name InstrumentName,F.Name FundName,
                                IV.valueDate,I.ID InstrumentID, F.ID FundID,IT.Name InstrumentType,isnull( AcqDate1,'') AcqDate1,isnull(AcqDate2,'') AcqDate2,
                                isnull(AcqDate3,'') AcqDate3,isnull(AcqDate4,'') AcqDate4,isnull(AcqDate5,'') AcqDate5,IV.SettlementDate SettleDate,IV.MaturityDate MatureDate,IV.Amount Nominal,IV.DonePrice Price,I.InterestPercent CouponRate,
                                BB.ID BankID,MV1.DescOne BankType, IV.InstructionDate ,IV.LastCouponDate,IV.NextCouponDate,IV.MaturityDate MatureDate,I.ISIN,IV.IncomeTaxGainPercent,IV.DoneAccruedInterest
                                ,sum(IV.DoneAmount + IV.DoneAccruedInterest) NetProceeds,IV.Amount ,IV.DoneAmount,IV.DonePrice,IV.InterestPercent,IV.DoneVolume,IV.SettlementDate,IV.IncomeTaxGainAmount,IV.IncomeTaxInterestAmount,IV.TotalAmount
                                ,IV.IncomeTaxInterestPercent, sum(IV.DoneAccruedInterest * 15 / 100)*-1 CouponTax, sum((IV.DoneAccruedInterest * 15 / 100) + IV.IncomeTaxGainAmount)*-1 TotalTax
                                ,sum((IV.DoneAmount + IV.DoneAccruedInterest) - (IV.DoneAccruedInterest * 15 / 100)) NetSettled, isnull(IV.AcqDate,'') AcqDate, IV.AcqPrice, DATEDIFF (day,IV.LastCouponDate ,IV.NextCouponDate) DaysCoupon
                                from Investment IV   
                                left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                                left join BankBranch BC on BC.BankBranchPK = FC.BankBranchPK and BC.status = 2  
                                left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                                left join BankBranch B on C.BankPK = B.BankPK and B.status = 2  
                                left join MasterValue MV1 on BC.Type = MV1.Code and MV1.ID ='BankCustodianType' and MV1.status = 2  
                                Where  IV.ValueDate = @ParamListDate  and IV.InstrumentTypePK in (2,3) and IV.statusSettlement = 2 and IV.SelectedSettlement = 0  " + _paramFund + @" 
                                group by IV.ValueDate,IV.SettlementDate,IV.LastCouponDate,IV.SettlementDate,IV.TrxTypeID,Reference,MV.DescOne,MV.DescTwo,BB.ID,BC.BankAccountNo,BC.ContactPerson,BC.Fax1
                                ,BC.Phone1,C.ContactPerson,C.Fax,C.Name,B.ID,I.Name,F.Name,I.ID,F.ID,IT.Name,AcqDate1,AcqDate2,AcqDate3,AcqDate4,AcqDate5,IV.MaturityDate,IV.Amount,IV.DonePrice,I.InterestPercent
                                ,MV1.DescOne,IV.InstructionDate,IV.LastCouponDate,IV.NextCouponDate,I.ISIN,IV.IncomeTaxGainPercent,IV.DoneAccruedInterest,IV.Amount,IV.DoneAmount,IV.DonePrice,IV.InterestPercent
                                ,IV.DoneVolume,IV.IncomeTaxGainAmount,IV.IncomeTaxInterestAmount,IV.TotalAmount,IV.IncomeTaxInterestPercent, IV.AcqDate, IV.AcqPrice
                                order by RefNo
                                ";

                                cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);

                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "SettlementListingBond" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "SettlementListingBond" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Bond");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {
                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                                rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                                rSingle.LastCouponDate = Convert.ToDateTime(dr0["LastCouponDate"]);
                                                rSingle.NextCouponDate = Convert.ToDateTime(dr0["NextCouponDate"]);
                                                rSingle.MaturityDate = Convert.ToDateTime(dr0["MatureDate"]);
                                                rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                                rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                                rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                                rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                                rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                                rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                                rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                                rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                                rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                                rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                                rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                                rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                                rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                                rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                                rSingle.IncomeTaxGainAmount = dr0["IncomeTaxGainAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxGainAmount"]);
                                                rSingle.IncomeTaxInterestAmount = dr0["IncomeTaxInterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxInterestAmount"]);
                                                rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                                rSingle.AccruedInterest = dr0["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAccruedInterest"]);
                                                rSingle.SettlementModeDesc = dr0["SettlementModeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDesc"]);
                                                rSingle.SettlementModeDescTwo = dr0["SettlementModeDescTwo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDescTwo"]);
                                                rSingle.TenorDays = dr0["TenorDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["TenorDays"]);
                                                rSingle.HoldingPeriod = dr0["DaysCoupon"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["DaysCoupon"]);
                                                rSingle.IncomeTaxInterestPercent = dr0["IncomeTaxInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxInterestPercent"]);
                                                rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                                rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                                rSingle.CounterpartBank = dr0["CounterpartBankID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartBankID"]);
                                                rSingle.SettleDate = Convert.ToDateTime(dr0["SettleDate"]);
                                                rSingle.Nominal = dr0["Nominal"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Nominal"]);
                                                rSingle.Price = dr0["Price"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Price"]);
                                                rSingle.CouponRate = dr0["CouponRate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CouponRate"]);
                                                rSingle.BankID = dr0["BankID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankID"]);
                                                rSingle.BankType = dr0["BankType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankType"]);
                                                rSingle.ISIN = dr0["ISIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ISIN"]);
                                                rSingle.IncomeTaxGainPercent = dr0["IncomeTaxGainPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxGainPercent"]);
                                                rSingle.DoneAccruedInterest = dr0["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAccruedInterest"]);
                                                //--- Noted---// 
                                                rSingle.Attn = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                                rSingle.NoRekCustody = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                                rSingle.DistributedDate = Convert.ToDateTime(dr0["SettleDate"]);
                                                rSingle.SubRegCode = dr0["BankType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankType"]);
                                                rSingle.NoCTP = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                                rSingle.NetProceeds = dr0["NetProceeds"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetProceeds"]);
                                                rSingle.CouponTax = dr0["CouponTax"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CouponTax"]);
                                                rSingle.TotalTax = dr0["TotalTax"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalTax"]);
                                                rSingle.NetSettled = dr0["NetSettled"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetSettled"]);
                                                rSingle.AcqDate = Convert.ToDateTime(dr0["AcqDate"]);
                                                rSingle.AcqPrice = dr0["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice"]);


                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                 from r in rList
                                                 group r by new { r.FundName, r.InstrumentID, r.FundID, r.TrxTypeID } into rGroup
                                                 select rGroup;

                                            int incRowExcel = 1;
                                            int _startRowDetail = 0;

                                            foreach (var rsHeader in QueryByFundID)
                                            {


                                                int _endRowDetail = incRowExcel;

                                                //area header

                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border


                                                    incRowExcel = incRowExcel + 3;


                                                    int RowA = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Kepada ";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "PT. Bank " + rsDetail.BankCustodianName + ", Tbk.";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Tanggal ";
                                                    //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = ":";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                                    //worksheet.Cells[incRowExcel, 8].Value = DateTime.Now.ToString("dd MMMM yyyy");
                                                    incRowExcel++;

                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Attn ";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = " Head of Settlement";

                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Nomor Surat ";
                                                    //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = ":";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 8].Value = "SRT" + " - " + _investmentRpt.NoSurat + "/Dir.1/TL/" + " - " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("MMyyyy");
                                                    incRowExcel++;

                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Nomor Faximile ";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "5263602/5275858";

                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 6].Value = "No. Telepon ";
                                                    //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = ":";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 8].Value = "5245167/5268217";
                                                    incRowExcel++;
                                                    if (rsHeader.Key.FundID == "TRADITIONAL")
                                                    {
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "No. Rek. Kustodi ";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "208151";
                                                    }
                                                    else if (rsHeader.Key.FundID == "TLMMF")
                                                    {
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "No. Rek. Kustodi ";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "808154";
                                                    }

                                                    else if (rsHeader.Key.FundID == "BF")
                                                    {
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "No. Rek. Kustodi ";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "808153";
                                                    }

                                                    else if (rsHeader.Key.FundID == "TLEF")
                                                    {
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "No. Rek. Kustodi ";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "808151";
                                                    }
                                                    else if (rsHeader.Key.FundID == "TLFIF")
                                                    {
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "No. Rek. Kustodi ";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "808152";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 1].Value = "No. Rek. Kustodi ";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "0";
                                                    }



                                                    int RowB = incRowExcel;


                                                    worksheet.Cells["A" + RowA + ":H" + RowA].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowA + ":A" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["H" + RowA + ":H" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                    incRowExcel++;

                                                    worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami instruksikan agar Custodial Service Bank " + rsDetail.BankCustodianName + @" untuk menyelesaikan transaksi dengan ketentuan sebagai berikut :";
                                                    incRowExcel = incRowExcel + 3;

                                                    _startRowDetail = incRowExcel;
                                                    //////------------------//////
                                                    if (rsHeader.Key.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Transaction Type";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementModeDescTwo;
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "2";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Securities Series";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "3";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "ISIN/Bond Code";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.ISIN + "/" + rsDetail.InstrumentID;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "4";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Trade Date";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstructionDate.ToString("dd MMMM yyyy");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "5";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Settlement Date";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementDate.ToString("dd MMMM yyyy"); 
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "6";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Maturity Date";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.MaturityDate.ToString("dd MMMM yyyy");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "7";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Nominal";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Rp. " + rsDetail.DoneVolume.ToString("#,##0");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "8";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Price";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.DonePrice + "%";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "9";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Coupon Rate";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.CouponRate + "%";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "10";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Principle";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Rp. " + rsDetail.DoneAmount.ToString("#,##0");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;
                                                        //belum
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "11";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Accrued Days";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        //worksheet.Cells[incRowExcel, 4].Value = "Rp. " + rsDetail.Nominal.ToString("#,##0.00");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;
                                                        //belum
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "12";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Accrued Interest";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Rp. " + rsDetail.DoneAccruedInterest.ToString("#,##0");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "13";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Tax Rate";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.IncomeTaxGainPercent + " " + "%";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;
                                                        //belum
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "14";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Tax On Capital Gain";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Rp. " + rsDetail.IncomeTaxGainAmount.ToString("#,##0");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        incRowExcel++;
                                                        //belum
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "15";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Net Proceeds";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Rp. " + rsDetail.TotalAmount.ToString("#,##0");
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "16";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Counterparty";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.CounterpartName;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "17";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Subs Reg Code";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "SRBMRIIDJA";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "18";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Beneficiary";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.BankCustodianName + " " + "CUSTODY";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        int RowC = incRowExcel;
                                                        incRowExcel++;

                                                        int RowE = incRowExcel;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "19";
                                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Descriptions";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                        worksheet.Cells[incRowExcel, 4].Value = _investmentRpt.Message;
                                                        worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                        worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 160;
                                                        incRowExcel++;




                                                        int RowF = incRowExcel;


                                                        worksheet.Cells["A" + RowE + ":A" + RowF].Merge = true;

                                                        incRowExcel++;

                                                        int RowD = incRowExcel;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "20";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Nomor CTP";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.NoCTP;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "21";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Bank Mandiri Sub Reg Code";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "2.1.2.008 / SRBMRIIDJA";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Hair;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        _endRowDetail = incRowExcel;

                                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                        incRowExcel = incRowExcel + 2;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Untuk informasi lebih lanjut dapat menghubungi kami di telp 021-5793 3306 dengan Ibu Dyah/ Bpk. Vincent terlampir trade konfirmasi dari broker untuk proses settlement saudara.";
                                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                        worksheet.Row(incRowExcel).Height = 43;

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Demikian, atas perhatiannya kami ucapkan terima kasih.";

                                                        incRowExcel = incRowExcel + 3;


                                                        worksheet.Cells[incRowExcel, 1].Value = "PT ASURANSI JIWA TASPEN";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Font.Bold = true;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Direksi,";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        incRowExcel = incRowExcel + 8;

                                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_SignatureName(_investmentRpt.Signature1);
                                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;

                                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_SignatureName(_investmentRpt.Signature2);
                                                        worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.UnderLine = true;
                                                        incRowExcel++;


                                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_PositionSignature(_investmentRpt.Signature1);
                                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_PositionSignature(_investmentRpt.Signature2);
                                                        worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Transaction Type";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementModeDescTwo;
                                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "2";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Securities Series";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;



                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "3";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Trade Date";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstructionDate.ToString("dd MMMM yyyy");
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "4";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Settlement Date";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementDate.ToString("dd MMMM yyyy");
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;


                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "5";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Face Amount";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneVolume.ToString("#,##0");
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "6";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Sell Price";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.DonePrice + "%";
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;




                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "7";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Principle";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneAmount.ToString("#,##0");
                                                        worksheet.Row(incRowExcel).Height = 36;


                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.MaturityDate.ToString("dd MMMM yyyy");

                                                        incRowExcel++;
                                                        //belum
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "8";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Accrued Interest";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneAccruedInterest.ToString("#,##0");
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Last Coupon Payment";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.LastCouponDate.ToString("dd MMMM yyyy");

                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "9";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Net Proceeds";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.NetProceeds.ToString("#,##0");
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Next Coupon Payment";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.NextCouponDate.ToString("dd MMMM yyyy");

                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "10";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Coupon Tax (15%)";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.CouponTax;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Price";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "11";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Capital gain Tax (15%)";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.IncomeTaxGainAmount * -1;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Acq Price";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.AcqPrice;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "12";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Total Tax";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalTax;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 4].Calculate();
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Acq Date";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.AcqDate.ToString("dd MMMM yyyy");

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "13";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Net / Settlement Amount";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.NetSettled.ToString("#,##0");
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Rate";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestPercent + "%";
                                                        //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";



                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "14";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Counterparty";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.CounterpartName;
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "No. Of days Coupon";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.HoldingPeriod;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "15";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Subs Reg Code";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "SRBMRIIDJA";
                                                        worksheet.Row(incRowExcel).Height = 36;

                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 6].Value = "Benevisiary";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 7].Value = ":";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 8].Value = "PT. Bank " + rsDetail.BankCustodianName;

                                                        int RowC = incRowExcel;
                                                        incRowExcel++;

                                                        int RowE = incRowExcel;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "16";
                                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Descriptions";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                        worksheet.Cells[incRowExcel, 4].Value = _investmentRpt.Message;
                                                        worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                        worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                        worksheet.Row(incRowExcel).Height = 160;
                                                        incRowExcel++;




                                                        int RowF = incRowExcel;


                                                        worksheet.Cells["A" + RowE + ":A" + RowF].Merge = true;

                                                        incRowExcel++;

                                                        int RowD = incRowExcel;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "17";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Nomor CTP";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        //worksheet.Cells[incRowExcel, 4].Value = rsDetail.NoCTP;
                                                        worksheet.Cells[incRowExcel, 4].Value = "2270476";
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "18";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Bank Mandiri Sub Reg Code";
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "2.1.2.008 / SRBMRIIDJA";
                                                        worksheet.Row(incRowExcel).Height = 36;
                                                        _endRowDetail = incRowExcel;

                                                        worksheet.Cells["A" + _startRowDetail + ":H" + RowC].Style.Border.Top.Style = ExcelBorderStyle.Thick;

                                                        worksheet.Cells["A" + _startRowDetail + ":H" + RowC].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + _startRowDetail + ":H" + RowC].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                        worksheet.Cells["A" + RowD + ":H" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + RowD + ":H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                        incRowExcel = incRowExcel + 2;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Untuk informasi lebih lanjut dapat menghubungi kami di telp 021-5793 3306 dengan Ibu Dyah/ Bpk. Vincent terlampir trade konfirmasi dari broker untuk proses settlement saudara.";
                                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                        worksheet.Row(incRowExcel).Height = 43;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Demikian, atas perhatiannya kami ucapkan terima kasih.";

                                                        incRowExcel = incRowExcel + 3;


                                                        worksheet.Cells[incRowExcel, 1].Value = "PT ASURANSI JIWA TASPEN";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Font.Bold = true;
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        incRowExcel++;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Direksi,";
                                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        incRowExcel = incRowExcel + 8;

                                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_SignatureName(_investmentRpt.Signature1);
                                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;

                                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_SignatureName(_investmentRpt.Signature2);
                                                        worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.UnderLine = true;
                                                        incRowExcel++;


                                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_PositionSignature(_investmentRpt.Signature1);
                                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_PositionSignature(_investmentRpt.Signature2);
                                                        worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;

                                                    }


                                                    incRowExcel++;
                                                    worksheet.Row(incRowExcel).PageBreak = true;
                                                }




                                            }



                                            string _rangeA = "A:I" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 18;
                                            }


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                            worksheet.Column(1).Width = 5;
                                            worksheet.Column(2).Width = 40;
                                            worksheet.Column(3).Width = 4;
                                            worksheet.Column(4).Width = 45;
                                            worksheet.Column(5).Width = 40;
                                            worksheet.Column(6).Width = 35;
                                            worksheet.Column(7).Width = 4;
                                            worksheet.Column(8).Width = 48;
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }
                #endregion

                #region equity
                else if (_investmentRpt.ParamInstType == "1")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                string _paramFund = "";


                                if (!_host.findString(_investmentRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investmentRpt.FundFrom))
                                {
                                    _paramFund = "And A.FundPK in ( " + _investmentRpt.FundFrom + " ) ";
                                }
                                else
                                {
                                    _paramFund = "";
                                }

                                cmd.CommandText = @"
                                select C.ID FundID ,A.TrxTypeID,C.Name FundName,F.ID CustodianID ,D.BankAccountNo BankAccountNo,A.ValueDate,A.SettlementDate,B.ID InstrumentID,A.DoneVolume,A.DonePrice,A.TotalAmount,E.Name CounterpartName,
                                D.Name FundRekName,F.Fax1 Fax,F.Fax2 Fax2,F.Phone1 Telp, F.Phone2 Telp2
                                from investment A
                                left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                                left join Fund C on A.fundPK = C.FundPK and C.status in (1,2)
                                left join FundCashRef D on C.FundPK = D.fundPK and D.status in (1,2)
                                left join Counterpart E on A.CounterpartPK = E.CounterpartPK and C.status in (1,2) 
                                left join BankBranch F on D.BankBranchPK = F.BankBranchPK and F.status in (1,2)
                                left join Bank G on F.BankPK = G.BankPK and G.status in (1,2)
                                where StatusSettlement = 2 and A.InstrumentTypePK = 1 " + _paramFund + "and A.valuedate = @ValueDateFrom "
                               ;


                                cmd.Parameters.AddWithValue("@ValueDateFrom", _investmentRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Equity");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {
                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                                rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                                rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                                rSingle.Amount = dr0["TotalAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalAmount"]);
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["ValueDate"]);
                                                rSingle.InstrumentName = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                                rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                                rSingle.FaxNo = dr0["Fax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax"]);
                                                rSingle.Telp = dr0["Telp"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Telp"]);
                                                rSingle.FaxNo2 = dr0["Fax2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax2"]);
                                                rSingle.Telp2 = dr0["Telp2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Telp2"]);
                                                rSingle.FundRekName = dr0["FundRekName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundRekName"]);
                                                rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                                rSingle.CustodianID = Convert.ToString(dr0["CustodianID"]);
                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.TrxTypeID ascending
                                                group r by new { r.FundName, r.TrxTypeID, r.FaxNo, r.Telp, r.BankAccountNo, r.FundRekName, r.FundID, r.CustodianID, r.FaxNo2, r.Telp2 } into rGroup
                                                select rGroup;

                                            int incRowExcel = 5;
                                            //int _startRowDetail = 0;

                                            foreach (var rsHeader in QueryByFundID)
                                            {


                                                int _endRowDetail = incRowExcel;

                                                //area header
                                                //ThickBox Border
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Kepada ";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Bank " + rsHeader.Key.CustodianID + " Kustodian ";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Head of Settlement";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tgl./No. Surat ";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                                //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 4].Value = "SRT - " + "    " + " / Dir.1/TL/" + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("MMyyyy");
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Fax";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FaxNo + " / " + rsHeader.Key.FaxNo2;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Telp";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Telp + " / " + rsHeader.Key.Telp2;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Rek Kustodi";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                if (rsHeader.Key.FundID == "TLMMF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808154";
                                                }
                                                else if (rsHeader.Key.FundID == "BF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808153";
                                                }
                                                else if (rsHeader.Key.FundID == "TLEF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808151";
                                                }
                                                else if (rsHeader.Key.FundID == "TLFIF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808152";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "208151";
                                                }

                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                incRowExcel++;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else 
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Unit Link";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                                }
                                               

                                                incRowExcel = incRowExcel + 2;

                                                //worksheet.Row(incRowExcel).Height = 35;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami intruksikan agar Bank Mandiri Kustodian dapat melakukan transaksi rincian sebagai berikut :";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami intruksikan agar Bank Mandiri Kustodian dapat melakukan transaksi unit link di atas dengan rincian sebagai berikut :";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                }
                                                

                                                incRowExcel = incRowExcel + 2;
                                                if (rsHeader.Key.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Receive Versus Payment (RVP)/Pembelian : ";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Delivery Versus Payment (DVP)/Penjualan : ";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                }


                                                incRowExcel = incRowExcel + 2;

                                                int RowF = incRowExcel;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = "Securities Name (Equity)";
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "Trade Date";
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = "Settlement Date";
                                                worksheet.Cells[incRowExcel, 6].Value = "Quantity Shere";
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = "Avg.Price";
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = "Settlement Amount (IDR)";
                                                worksheet.Cells[incRowExcel, 9].Value = "Counterparty";
                                                worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 75;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                                incRowExcel++;


                                                worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["D" + RowF + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["D" + RowF + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                int RowD = incRowExcel;
                                                int _no = 1;
                                                int _startRowDetail = incRowExcel;
                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["D" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.InstructionDate).ToString("dd/MMM/yyyy");
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd/MMM/yyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.DoneVolume;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.DonePrice;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.CounterpartName;
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                    worksheet.Row(incRowExcel).Height = 50;

                                                    _endRowDetail = incRowExcel;
                                                    _no++;
                                                    incRowExcel++;
                                                }

                                                if (rsHeader.Key.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Subtotal Beli";
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 8].Calculate();
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                }
                                                else 
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Subtotal Jual";
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 8].Calculate();
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = " *) Coret yang tidak perlu";

                                                //worksheet.Cells["A" + RowD + ":I" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":I" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["D" + RowD + ":D" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["D" + RowD + ":I" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "*) Coret yang tidak perlu";
                                                incRowExcel = incRowExcel + 2;

                                                worksheet.Cells[incRowExcel, 1].Value = "Catatan :";
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                if (rsHeader.Key.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "1. Dana pembelian atas transaksi tersebut agar debet dari rekening sebagai berikut :";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "1. Dana penjualan atas transaksi tersebut agar ditransfer ke rekening sebagai berikut :";
                                                }

                                                incRowExcel++;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "     Atas Nama";
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Value = "PT Asuransi Jiwa Taspen";
                                                   
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Atas Nama";
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundRekName;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                }
                                               
                                                incRowExcel++;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "     Bank";
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Bank " + rsHeader.Key.CustodianID;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Bank";
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Bank " + rsHeader.Key.CustodianID;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                }
                                                
                                                incRowExcel++;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "     No. Rekening";
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankAccountNo;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "No. Rekening";
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankAccountNo;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                }
                                               
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "2. Terlampir Trade Confirmasi (TC) dari broker untuk proses settlement saudara. ";

                                                incRowExcel = incRowExcel + 2;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Untuk informasi lebih lanjut dapat menghubungi kami di telp (021-5793 3306) dengan Dyah Ayu / Immanuel Vincent";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    //worksheet.Row(incRowExcel).Height = 45;
                                                    incRowExcel = incRowExcel + 2;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terimakasih.";
                                                }
                                                else 
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Untuk informasi lebih lanjut dapat menghubungi kami di telp (021-5793 3306) dengan Dyah Ayu / Immanuel Vincent / Achmad Adam Al Wahid";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Row(incRowExcel).Height = 45;

                                                    incRowExcel = incRowExcel + 3;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terimakasih.";
                                                }
                                                

                                               

                                                incRowExcel = incRowExcel + 4;
                                                worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel++;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    //worksheet.Cells[incRowExcel, 1].Value = "Direksi,";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Direksi,";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                
                                                incRowExcel = incRowExcel + 9;
                                                if (rsHeader.Key.FundID == "TRADITIONAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = _host.Get_SignatureName(_investmentRpt.Signature1);
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 7].Value = _host.Get_SignatureName(_investmentRpt.Signature2);
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 2].Value = _host.Get_PositionSignature(_investmentRpt.Signature1);
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 7].Value = _host.Get_PositionSignature(_investmentRpt.Signature2);
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else 
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = _host.Get_SignatureName(_investmentRpt.Signature1);
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                                    worksheet.Cells[incRowExcel, 8].Value = _host.Get_SignatureName(_investmentRpt.Signature2);
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                    worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 3].Value = _host.Get_PositionSignature(_investmentRpt.Signature1);
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 8].Value = _host.Get_PositionSignature(_investmentRpt.Signature2);
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                    worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                


                                                incRowExcel++;



                                                worksheet.Row(incRowExcel).PageBreak = true;

                                            }



                                            string _rangeA = "A:I" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 20;
                                            }


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                            worksheet.Column(1).Width = 10;
                                            worksheet.Column(2).Width = 17;
                                            worksheet.Column(3).Width = 5;
                                            worksheet.Column(4).Width = 25;
                                            worksheet.Column(5).Width = 25;
                                            worksheet.Column(6).Width = 20;
                                            worksheet.Column(7).Width = 18;
                                            worksheet.Column(8).Width = 30;
                                            worksheet.Column(9).Width = 45;
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }
                #endregion

                #region Deposito
                else if (_investmentRpt.ParamInstType == "3")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                string _bitIsMature = "";
                                string _paramFund = "";

                                if (!_host.findString(_investmentRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investmentRpt.FundFrom))
                                {
                                    _paramFund = "And IV.FundPK in ( " + _investmentRpt.FundFrom + " ) ";
                                }
                                else
                                {
                                    _paramFund = "";
                                }

                                if (_investmentRpt.BitIsMature == true)
                                {
                                    _bitIsMature = @"union all

                                Select  Reference,Tenor,ClearingCode,BankAccountNo,BankDepositoName,BankCustodianContactPerson,BankCustodianFaxNo,BankCustodianPhone,ContactPerson,FaxNo,Phone,InstrumentName,FundName,valueDate,InstrumentID,  
                                FundID,InstrumentType,BankBranchName ,TrxTypeID,InstructionDate,MaturityDate,Amount,DoneAmount,OrderPrice,InterestPercent,ValueDate,AcqDate,AccruedInterest,SettlementDate,Notes,Category, Bulan
                                from InvestmentMature where Selected = 1 ";
                                }
                                else
                                {
                                    _bitIsMature = "";
                                }
                                //                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Phone,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,   
                                //                                             F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,IV.*  
                                //                                             from Investment IV   
                                //                                             left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                //                                             left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                //                                             left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                //                                             left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                //                                             left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                //                                             left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                //                                             left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                                //                                             Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  and IV.selectedSettlement = 1 "
                                //                                             + _paramFund + @" order by Refno ";


                                cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                            )
                            and status = 2

                            Select Reference, DATEDIFF (day,IV.ValueDate ,IV.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankDepositoName , BC.ID BankBranchName,isnull(BC.ContactPerson,'') BankCustodianContactPerson,
                            isnull(BC.Fax1,'') BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,isnull(B.ContactPerson,'') ContactPerson,isnull(B.Fax1,'') FaxNo,B.Phone1 Phone,I.Name InstrumentName,F.Name FundName,
                            IV.valueDate,BB.ID InstrumentID,F.ID FundID,IT.Name InstrumentType,IV.TrxTypeID,IV.InstructionDate,IV.MaturityDate,IV.Amount,IV.DoneAmount,IV.OrderPrice,
                            IV.InterestPercent,IV.ValueDate,IV.AcqDate,IV.AccruedInterest ,IV.SettlementDate, isnull(IV.Notes,'') Notes, I.Category,DATEDIFF (MONTH,IV.ValueDate ,IV.MaturityDate ) Bulan, isnull(I.BloombergCode,'') NoSeri
                            from Investment IV   
                            left join BankBranch B on IV.BankBranchPK = B.BankBranchPK and B.status = 2   
                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            left join BankBranch BC on BC.BankBranchPK = IV.BankBranchPK and BC.status = 2  
                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2
                            left join Bank C on B.BankPK = C.BankPK and C.status = 2    
                            Where IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  and IV.ValueDate =  @ParamListDate
                            " + _paramFund + @" 
                            and IV.selectedSettlement = 0 
                             " + _bitIsMature;

                                cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Deposito");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {
                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                                rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                                rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                                rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                                rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                                rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                                rSingle.DoneAmount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                                rSingle.OrderPrice = dr0["OrderPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OrderPrice"]);
                                                rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                                rSingle.BankBranchName = dr0["BankBranchName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName"]);
                                                rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                                rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                                rSingle.Phone = dr0["Phone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Phone"]);
                                                rSingle.BankCustodianName = dr0["BankDepositoName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankDepositoName"]);
                                                rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                                rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                                rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                                rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                                rSingle.ClearingCode = dr0["ClearingCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ClearingCode"]);
                                                rSingle.Tenor = dr0["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["Tenor"]);
                                                rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                                rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                                if (rSingle.TrxTypeID == "LIQUIDATE")
                                                {
                                                    rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                                }
                                                else if (rSingle.TrxTypeID == "ROLLOVER")
                                                {
                                                    rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["ValueDate"]);
                                                }
                                                rSingle.Notes = dr0["Notes"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Notes"]);
                                                rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                                rSingle.Category = dr0["Category"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Category"]);
                                                rSingle.Bulan = dr0["Bulan"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["Bulan"]);
                                                rSingle.NoSeri = dr0["NoSeri"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NoSeri"]);
                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                from r in rList
                                                group r by new
                                                {
                                                    r.FundName,
                                                    r.InstrumentID,
                                                    r.TrxTypeID,
                                                    r.Notes,
                                                    r.DoneAmount,
                                                    r.InterestPercent,
                                                    r.BankAccountNo,
                                                    r.BankCustodianID,
                                                    r.BankBranchName,
                                                    r.BankCustodianName,
                                                    r.Category,
                                                    r.Bulan,
                                                    r.NoSeri
                                                } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;

                                            foreach (var rsHeader in QueryByFundID)
                                            {

                                                //int _endRowDetail = incRowExcel;

                                                //area header

                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    incRowExcel++;
                                                    //worksheet.Cells[incRowExcel, 2].Value = "PT ASURANSI JIWA TASPEN";
                                                    ////worksheet.Cells["B" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    //worksheet.Row(incRowExcel).Height = 30;
                                                    //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 36;
                                                    incRowExcel++;
                                                    //worksheet.Cells[incRowExcel, 2].Value = "Gedung Arthaloka lantai 11";
                                                    //worksheet.Cells["B" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 25;
                                                    incRowExcel++;
                                                    //worksheet.Cells[incRowExcel, 2].Value = "Jl.Jend.Sudirman Kav.2, Jakarta 10220";
                                                    //worksheet.Cells["B" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 25;
                                                    incRowExcel++;
                                                    //worksheet.Cells[incRowExcel, 2].Value = "Telp. (102) 57933306, Faksimile. (021) 57933269";
                                                    //worksheet.Cells["B" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 25;
                                                    incRowExcel++;
                                                    //worksheet.Cells[incRowExcel, 2].Value = "Homepage : www.taspenlife.com E-mail : taspenlife@taspenlife.com";
                                                    //worksheet.Cells["B" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 25;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                                    worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Row(incRowExcel).Height = 30;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;


                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 2].Value = "Nomor";
                                                    worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 4].Value = ":";
                                                    //worksheet.Cells[incRowExcel, 5].Value = "SRT - " + _investmentRpt.NoSurat + " / Dir.3/TL/ " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("MMMyyyy");
                                                    worksheet.Cells[incRowExcel, 5].Value = "SRT -       / Dir.3/TL/ " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("MMMyyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Size = 12;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 2].Value = "Sifat";
                                                    worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 4].Value = ":";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Penting";
                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Size = 12;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 2].Value = "Lampiran";
                                                    worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 4].Value = ":";
                                                    worksheet.Cells[incRowExcel, 5].Value = "1 (Satu) Berkas";
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Size = 12;

                                                    incRowExcel = incRowExcel + 2;

                                                    worksheet.Cells[incRowExcel, 2].Value = "Kepada Yth.";
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 4].Value = ":";
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 6].Style.Font.Size = 12;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 2].Value = "Pimpinan";
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 6].Style.Font.Size = 12;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BankCustodianName;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 6].Style.Font.Size = 12;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BankBranchName;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 6].Style.Font.Size = 12;
                                                    incRowExcel = incRowExcel + 2;
                                                    if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Perihal";
                                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 4].Value = ":";
                                                        worksheet.Cells[incRowExcel, 5].Value = "Penempatan Deposito Bank " + rsHeader.Key.InstrumentID;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Size = 12;
                                                    }
                                                    else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Perihal";
                                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 4].Value = ":";
                                                        worksheet.Cells[incRowExcel, 5].Value = "Pencairan Deposito Bank " + rsHeader.Key.InstrumentID;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Size = 12;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Perihal";
                                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 4].Value = ":";
                                                        worksheet.Cells[incRowExcel, 5].Value = "Perpanjangan Deposito Bank " + rsHeader.Key.InstrumentID;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Size = 12;
                                                    }

                                                    incRowExcel++;

                                                    if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Bersama surat ini kami mohon untuk dapat dilakukan penempatan deposito pada Bank " + rsHeader.Key.BankCustodianName + " Cabang " + rsHeader.Key.BankBranchName + " dengan ketentuan sebagai berikut : ";
                                                                                              
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 6].Style.Font.Size = 12;
                                                    }
                                                    else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Bersama ini mohon bantuan untuk dapat mencairkan deposito PT Asuransi Jiwa Taspen dengan rincian sebagai berikut: ";
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 6].Style.Font.Size = 12;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Bersama ini mohon bantuan untuk perpanjangan deposito PT Asuransi Jiwa Taspen dengan rincian sebagai berikut: ";
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 6].Style.Font.Size = 12;
                                                    }


                                                    worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Row(incRowExcel).Height = 30;
                                                    incRowExcel = incRowExcel + 2;

                                                    int RowA = incRowExcel;

                                                    worksheet.Cells[incRowExcel, 2].Value = "Atas Nama ";
                                                    worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                    worksheet.Cells[incRowExcel, 5].Value = _host.Get_CompanyName();
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    incRowExcel++;
                                                    if (rsHeader.Key.Category == "Deposit Normal")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Keperluan ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = "Deposito Berjangka";
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 2].Value = "Keperluan ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = "Deposito On Call (DOC)";
                                                        worksheet.Cells[incRowExcel, 5].Style.Font.Italic = true;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    }

                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 2].Value = "Nominal ";
                                                    worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Rp " + rsHeader.Key.DoneAmount.ToString("#,##0");
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    incRowExcel++;
                                                    if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                                    {
                                                        //worksheet.Cells[incRowExcel, 2].Value = "No Seri ";
                                                        //worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        ////worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.NoSeri;
                                                        //worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        //incRowExcel=incRowExcel-1;
                                                    }
                                                    else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "No Seri ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.NoSeri;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                    }
                                                    else 
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "No Seri ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.NoSeri;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                    }
                                                    
                                                    worksheet.Cells[incRowExcel, 2].Value = "Tingkat Bunga ";
                                                    worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.InterestPercent.ToString("#,##0.00") + "" + " % ";
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 2].Value = "Jangka Waktu ";
                                                    worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.Bulan + " " + "Bulan";
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    incRowExcel++;


                                                    int RowB = incRowExcel;
                                                    //baru sampe sini

                                                    incRowExcel = incRowExcel + 1;

                                                    if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Untuk bunga deposito agar ditransfer hanya ke Rekening Giro kami : ";
                                                        worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Nomer ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.BankAccountNo;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Pada Bank ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        if (rsHeader.Key.BankAccountNo == "2079-01-000097-305")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "BRI (PERSERO) TBK, PT";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "BANK MANDIRI (PERSERO) TBK, PT";
                                                        }
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Atas Nama ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_CompanyName();
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                    }
                                                    else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Pencairan atas deposito tersebut mohon ditransfer hanya ke Rekening Giro kami:";
                                                        worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Nomer ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.BankAccountNo;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Pada Bank ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        if(rsHeader.Key.BankAccountNo == "2079-01-000097-305")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "BRI (PERSERO) TBK, PT";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "BANK MANDIRI (PERSERO) TBK, PT";
                                                        }
                                                        
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Atas Nama ";
                                                        worksheet.Cells[incRowExcel, 4].Value = " : ";
                                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_CompanyName();
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                        incRowExcel++;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    }

                                                    incRowExcel = incRowExcel + 1;

                                                    if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "Mohon bilyet penempatan deposito ini diserahkan kepada kami paling lambat 2 (dua) hari kerja setelah tanggal penempatan";
                                                        worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Row(incRowExcel).Height = 30;
                                                        incRowExcel = incRowExcel + 2;
                                                    }
                                                    else 
                                                    {
                                                       
                                                    }                                                  


                                                    worksheet.Cells[incRowExcel, 2].Value = "Melalui kerjasama ini diharapkan reciprocal business antara " + rsHeader.Key.BankCustodianName + " " + "dengan PT Asuransi Jiwa Taspen dapat direalisasikan pada kesempatan pertama.";
                                                    worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Font.Size = 12;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Row(incRowExcel).Height = 30;
                                                    incRowExcel = incRowExcel + 2;




                                                    worksheet.Cells[incRowExcel, 2].Value = "PT ASURANSI JIWA TASPEN";
                                                    worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Row(incRowExcel).Height = 26;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Size = 15;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 2].Value = "Direksi,";
                                                    worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 13;

                                                    incRowExcel = incRowExcel + 9;

                                                    worksheet.Cells[incRowExcel, 2].Value = _host.Get_SignatureName(_investmentRpt.Signature1);
                                                    worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                    worksheet.Cells[incRowExcel, 7].Value = _host.Get_SignatureName(_investmentRpt.Signature2);
                                                    worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;
                                                    incRowExcel++;


                                                    worksheet.Cells[incRowExcel, 2].Value = _host.Get_PositionSignature(_investmentRpt.Signature1);
                                                    worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;


                                                    worksheet.Cells[incRowExcel, 7].Value = _host.Get_PositionSignature(_investmentRpt.Signature2);
                                                    worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 12;

                                                    ////_endRowDetail = incRowExcel;
                                                    //incRowExcel++;
                                                    //incRowExcel = incRowExcel + 13;
                                                    ////incRowExcel++;


                                                }
                                                incRowExcel++;
                                                worksheet.Row(incRowExcel).PageBreak = true;
                                            }

                                            //string _rangeA = "A:G" + incRowExcel;
                                            //using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            //{
                                            //    r.Style.Font.Size = 25;
                                            //}

                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];

                                            worksheet.Column(1).Width = 20;
                                            worksheet.Column(2).Width = 4;
                                            worksheet.Column(3).Width = 10;
                                            worksheet.Column(4).Width = 3;
                                            worksheet.Column(5).Width = 5;
                                            worksheet.Column(6).Width = 17;
                                            worksheet.Column(7).Width = 25;
                                            worksheet.Column(8).Width = 21;

                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }
                }
                #endregion

                #region Reksadana
                else if (_investmentRpt.ParamInstType == "4")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                string _paramFund = "";


                                if (!_host.findString(_investmentRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investmentRpt.FundFrom))
                                {
                                    _paramFund = "And A.FundPK in ( " + _investmentRpt.FundFrom + " ) ";
                                }
                                else
                                {
                                    _paramFund = "";
                                }

                                cmd.CommandText = @"
                                select C.ID FundID ,A.TrxTypeID,C.Name FundName,F.ID CustodianID ,D.BankAccountNo BankAccountNo,A.ValueDate,A.SettlementDate,B.Name InstrumentName,A.DoneVolume,A.DonePrice,A.Amount,E.Name CounterpartName,
                                D.Name FundRekName,F.Fax1 Fax,F.Fax2 Fax2,F.Phone1 Telp, F.Phone2 Telp2, isnull(B.BankAccountNo,'') InstrumentAccount
                                from investment A
                                left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                                left join Fund C on A.fundPK = C.FundPK and C.status in (1,2)
                                left join FundCashRef D on C.FundPK = D.fundPK and D.status in (1,2)
                                left join Counterpart E on B.CounterpartPK = E.CounterpartPK and C.status in (1,2) 
                                left join BankBranch F on D.BankBranchPK = F.BankBranchPK and F.status in (1,2)
                                left join Bank G on F.BankPK = G.BankPK and G.status in (1,2)
                                left Join BankBranch H on A.BankBranchPK = H.BankBranchPK and H.status in (1,2)
                                where StatusDealing in (1,2) and A.InstrumentTypePK = 6 " + _paramFund + "and A.valuedate between @ValueDateFrom and @ValueDateFrom " //+2 "
                               ;


                                cmd.Parameters.AddWithValue("@ValueDateFrom", _investmentRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "SettlementListingReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "SettlementListingReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Equity");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {
                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                //rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                                rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                                rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                                rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["ValueDate"]);
                                                rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                                rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                                rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                                rSingle.FaxNo = dr0["Fax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax"]);
                                                rSingle.Telp = dr0["Telp"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Telp"]);
                                                rSingle.FaxNo2 = dr0["Fax2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax2"]);
                                                rSingle.Telp2 = dr0["Telp2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Telp2"]);
                                                rSingle.FundRekName = dr0["FundRekName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundRekName"]);
                                                rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                                rSingle.CustodianID = dr0["CustodianID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CustodianID"]);
                                                rSingle.BankBranchAccountNo = dr0["InstrumentAccount"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentAccount"]);
                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.TrxTypeID ascending
                                                group r by new { r.FundName, r.TrxTypeID, r.FaxNo, r.Telp, r.BankAccountNo, r.FundRekName, r.FundID, r.CustodianID, r.FaxNo2, r.Telp2 } into rGroup
                                                select rGroup;

                                            int incRowExcel = 5;
                                            //int _startRowDetail = 0;

                                            foreach (var rsHeader in QueryByFundID)
                                            {


                                                int _endRowDetail = incRowExcel;

                                                //area header



                                                //ThickBox Border



                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Kepada ";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Bank " + rsHeader.Key.CustodianID + " Kustodian ";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Head of Settlement";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tgl./No. Surat ";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                                //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 4].Value = "SRT - " + _investmentRpt.NoSurat + " / Dir.1/TL/" + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("MMyyyy");
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Fax";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FaxNo + " / " + rsHeader.Key.FaxNo2;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Telp";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Telp + " / " + rsHeader.Key.Telp2;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Rek Kustodi";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                if (rsHeader.Key.FundID == "TLMMF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808154";
                                                }
                                                else if (rsHeader.Key.FundID == "BF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808153";
                                                }
                                                else if (rsHeader.Key.FundID == "TLEF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808151";
                                                }
                                                else if (rsHeader.Key.FundID == "TLFIF")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "808152";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "";
                                                }

                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Unit Link";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                incRowExcel = incRowExcel + 2;

                                                //worksheet.Row(incRowExcel).Height = 35;
                                                worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami intruksikan agar Bank Mandiri Kustodian dapat melakukan transaksi unit link di atas dengan rincian sebagai berikut :";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                                incRowExcel = incRowExcel + 2;
                                                if (rsHeader.Key.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Subscription Reksadana ";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "Redemption Reksadana ";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                }


                                                incRowExcel = incRowExcel + 2;

                                                int RowF = incRowExcel;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = "No";
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                ////worksheet.Cells[incRowExcel, 2].Value = "Securities Name (Equity)";
                                                ////worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                ////worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "Trade Date";
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = "Settlement Date";
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = "Fund Name";
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = "Acc.Bank";
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = "Settlement Amount (IDR)";
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Value = "Counterparty";
                                                worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 75;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                                incRowExcel++;


                                                worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["D" + RowF + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["D" + RowF + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                int RowD = incRowExcel;
                                                int _no = 1;
                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["D" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
                                                    worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                                    worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
                                                    worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BankBranchAccountNo;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.CounterpartName;
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                    worksheet.Row(incRowExcel).Height = 50;

                                                    _endRowDetail = incRowExcel;
                                                    _no++;
                                                    incRowExcel++;
                                                }

                                                //worksheet.Cells["A" + RowD + ":I" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":I" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["D" + RowD + ":D" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["D" + RowD + ":I" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "*) Coret yang tidak perlu";
                                                incRowExcel = incRowExcel + 2;

                                                worksheet.Cells[incRowExcel, 1].Value = "Catatan :" + " " + _investmentRpt.Message;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                                incRowExcel++;
                                                if (rsHeader.Key.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "1. Dana subscription tersebut agar ditransfer ke nomer rekening di atas dari rekening sebagai berikut :";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "1. Dana redemption tersebut agar diterima dari nomer rekening di atas ke rekening sebagai berikut :";
                                                }

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Atas Nama";
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundRekName;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bank";
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Value = "Bank " + rsHeader.Key.CustodianID;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No. Rekening";
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankAccountNo;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                incRowExcel = incRowExcel + 2;
                                                if (rsHeader.Key.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "2. Terlampir form subscription yang kami kirimkan ke Manajer Investasi. ";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "2. Terlampir form redemption yang kami kirimkan ke Manajer Investasi. ";
                                                }
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Untuk informasi lebih lanjut dapat menghubungi kami di telp (021-5793 3306) dengan Dyah Ayu / Immanuel Vincent / Achmad Adam Al Wahid";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Row(incRowExcel).Height = 50;
                                                incRowExcel = incRowExcel + 3;
                                                worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terimakasih.";

                                                incRowExcel = incRowExcel + 4;
                                                worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Direksi,";
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel = incRowExcel + 9;
                                                worksheet.Cells[incRowExcel, 3].Value = _host.Get_SignatureName(_investmentRpt.Signature1);
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.UnderLine = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                                worksheet.Cells[incRowExcel, 7].Value = _host.Get_SignatureName(_investmentRpt.Signature2);
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.Font.UnderLine = true;
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = _host.Get_PositionSignature(_investmentRpt.Signature1);
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 7].Value = _host.Get_PositionSignature(_investmentRpt.Signature2);
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                incRowExcel++;



                                                worksheet.Row(incRowExcel).PageBreak = true;

                                            }



                                            string _rangeA = "A:I" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 20;
                                            }


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                            worksheet.Column(1).Width = 10;
                                            worksheet.Column(2).Width = 21;
                                            worksheet.Column(3).Width = 5;
                                            worksheet.Column(4).Width = 25;
                                            worksheet.Column(5).Width = 27;
                                            worksheet.Column(6).Width = 27;
                                            worksheet.Column(7).Width = 47;
                                            worksheet.Column(8).Width = 30;
                                            worksheet.Column(9).Width = 45;
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            Image img = Image.FromFile(Tools.ReportImage);
                                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }
                #endregion

                return false;
            }
            #endregion

            #region LPTI
            if (_investmentRpt.ReportName == "LPTI")
            {
                #region LPTIBond
                if (_investmentRpt.ParamInstType == "2")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                string _paramFund = "";

                                if (_investmentRpt.FundPK != 0)
                                {
                                    _paramFund = " And A.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                                }
                                else
                                {
                                    _paramFund = "";
                                }

                                //                                cmd.CommandText = @"Select DATEDIFF (day,IV.ValueDate ,IV.SettlementDate ) HoldingPeriod,DATEDIFF (day,IV.LastCouponDate ,IV.SettlementDate ) TenorDays,IV.TrxTypeID,Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,MV.DescOne SettlementModeDesc,MV.DescTwo SettlementModeDescTwo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.EntryUsersID CheckedBy,IV.ApprovedUsersID ApprovedBy,IV.valueDate,I.ID InstrumentID,   
                                //                            F.ID FundID,IT.Name InstrumentType,isnull( AcqDate1,'') AcqDate1,isnull(AcqDate2,'') AcqDate2,isnull(AcqDate3,'') AcqDate3,isnull(AcqDate4,'') AcqDate4,isnull(AcqDate5,'') AcqDate5,IV.*  
                                //                            from Investment IV   
                                //                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                //                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                //                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                                //                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                //                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                //                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                //                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                //                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                                //                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK in (2,3) and IV.statusSettlement = 2  
                                //                            --" + _paramFund + @" 
                                //                            order by RefNo ";

                                cmd.CommandText = @"
                                select C.Name FundName,A.InstructionDate,B.Name InstrumentName,B.ID InstrumentID,A.TrxTypeID TrxTypeID,A.TrxType, A.Amount  from investment A
                                left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                                left join Fund C on A.fundPK = C.FundPK and C.status in (1,2)
                                left join FundCashRef D on C.FundPK = D.fundPK and D.status in (1,2) 
                                where StatusSettlement = 2 and A.InstrumentTypePK not in (1,5) " + _paramFund + "and A.valuedate = @ParamListDate "
                                ;

                                cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);

                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "LPTIBond" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "LPTIBond" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Bond");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {
                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                                rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                                rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);

                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                 from r in rList
                                                 orderby r.TrxTypeID ascending
                                                 group r by new { r.TrxTypeID } into rGroup
                                                 select rGroup;

                                            int incRowExcel = 1;
                                            //int _startRowDetail = 0;

                                            foreach (var rsHeader in QueryByFundID)
                                            {


                                                int _endRowDetail = incRowExcel;

                                                //area header

                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border


                                                    incRowExcel++;
                                                    //int RowA = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel = incRowExcel + 3;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                                    //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = "Kepala Divisi Keuangan dan Investasi";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth, ";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = "Department Keuangan";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Instruksi Pembelian Obligasi";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Instruksi Penjualan Obligasi";
                                                    }

                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Pembelian Obligasi";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Penjualan Obligasi";
                                                    }

                                                    incRowExcel = incRowExcel + 2;

                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat di lakukan transaksi";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "pada tanggal";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstructionDate;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    //worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "dengan rincian sebagai berikut :";

                                                    incRowExcel = incRowExcel + 2;

                                                    int RowF = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "No";
                                                    worksheet.Cells[incRowExcel, 3].Value = "Nama Bank";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Kode Customer";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Kode Akun";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Business Area";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Nominal";
                                                    //worksheet.Row(incRowExcel).Height = 30;
                                                    incRowExcel++;


                                                    worksheet.Cells["A" + RowF + ":G" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    int RowD = incRowExcel;

                                                    worksheet.Cells[incRowExcel, 1].Value = "1";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    _endRowDetail = incRowExcel;

                                                    worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;


                                                    worksheet.Cells["C" + RowD + ":G" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowD + ":G" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    incRowExcel = incRowExcel + 4;

                                                    worksheet.Cells[incRowExcel, 1].Value = "Demikian disampaikan, atas perhatian dan kerjasamanya diucapkan terima kasih.";
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                    incRowExcel = incRowExcel + 7;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Jakarta, " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    incRowExcel = incRowExcel + 10;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Ruben Sukatendel";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Kepala Divisi Investasi";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel++;

                                                }

                                                worksheet.Row(incRowExcel).PageBreak = true;

                                            }



                                            string _rangeA = "A:G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 24;
                                            }


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                            worksheet.Column(1).Width = 25;
                                            worksheet.Column(2).Width = 5;
                                            worksheet.Column(3).Width = 50;
                                            worksheet.Column(4).Width = 30;
                                            worksheet.Column(5).Width = 25;
                                            worksheet.Column(6).Width = 40;
                                            worksheet.Column(7).Width = 40;
                                            //worksheet.Column(8).Width = 35;
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }

                #endregion

                #region LPTIReksadana
                else if (_investmentRpt.ParamInstType == "1")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                string _paramFund = "";

                                if (_investmentRpt.FundPK != 0)
                                {
                                    _paramFund = " And A.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                                }
                                else
                                {
                                    _paramFund = "";
                                }
                                //                                cmd.CommandText = @" Select MV.DescOne SettlementModeDesc,Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName, 
                                //                                            F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,BB.Name BankCustodianName,BC.ContactPerson ContactPerson,BC.Fax1 FaxNo,FC.BankAccountNo,BC.BankAccountName,IV.* 
                                //                                            from Investment IV  
                                //                                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                //                                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                //                                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                                //                                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                //                                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                //                                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                //                                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                //                                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                                //                                            
                                //                                            " + _paramFund + @" order by TrxType ";
                                cmd.CommandText = @"
                                select C.Name FundName,A.InstructionDate,B.Name InstrumentName,B.ID InstrumentID,A.TrxTypeID TrxTypeID,A.TrxType, A.Amount  from investment A
                                left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                                left join Fund C on A.fundPK = C.FundPK and C.status in (1,2)
                                left join FundCashRef D on C.FundPK = D.fundPK and D.status in (1,2) 
                                where StatusSettlement = 2 and A.InstrumentTypePK = 1 " + _paramFund + "and A.valuedate = @ParamListDate "
                               ;


                                cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "LPTIReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "LPTIReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Reksadana");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {
                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                                rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                                rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.TrxTypeID ascending
                                                group r by new { r.TrxTypeID } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;
                                            //int _startRowDetail = 0;

                                            foreach (var rsHeader in QueryByFundID)
                                            {


                                                int _endRowDetail = incRowExcel;

                                                //area header

                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border


                                                    incRowExcel++;
                                                    //int RowA = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel = incRowExcel + 3;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                                    //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Keuangan dan Investasi";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth, ";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Department Keuangan";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Instruksi Pembelian Reksadana";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Instruksi Penjualan Obligasi";
                                                    }

                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Subscription Reksadana";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Penjualan Reksadana";
                                                    }

                                                    incRowExcel = incRowExcel + 4;

                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat di lakukan transaksi";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "pada tanggal";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstructionDate;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 5].Value = "dengan rincian sebagai berikut :";

                                                    incRowExcel = incRowExcel + 2;

                                                    int RowF = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "No";
                                                    worksheet.Cells[incRowExcel, 2].Value = "Nama Bank";
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = "Kode Customer";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Kode Akun";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Business Area";
                                                    worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    //worksheet.Row(incRowExcel).Height = 30;
                                                    incRowExcel++;


                                                    worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    int RowD = incRowExcel;

                                                    worksheet.Cells[incRowExcel, 1].Value = "1";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Row(incRowExcel).Height = 35;
                                                    _endRowDetail = incRowExcel;

                                                    worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowD + ":H" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowD + ":H" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                    incRowExcel = incRowExcel + 4;

                                                    worksheet.Cells[incRowExcel, 1].Value = "Demikian disampaikan, atas perhatian dan kerjasamanya diucapkan terima kasih.";
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                    incRowExcel = incRowExcel + 7;
                                                    worksheet.Cells[incRowExcel, 7].Value = "Jakarta, " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    incRowExcel = incRowExcel + 7;
                                                    worksheet.Cells[incRowExcel, 7].Value = "Ruben Sukatendel";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 7].Value = "Kepala Divisi Investasi";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel++;

                                                }

                                                worksheet.Row(incRowExcel).PageBreak = true;

                                            }



                                            string _rangeA = "A:H" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 12;
                                            }


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                            worksheet.Column(1).Width = 8;
                                            worksheet.Column(2).Width = 8;
                                            worksheet.Column(3).Width = 5;
                                            worksheet.Column(4).Width = 15;
                                            worksheet.Column(5).Width = 18;
                                            worksheet.Column(6).Width = 15;
                                            worksheet.Column(7).Width = 15;
                                            worksheet.Column(8).Width = 20;
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }
                #endregion

                #region LPTIDeposito
                else if (_investmentRpt.ParamInstType == "3")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                //string _bitIsMature = "";
                                string _paramFund = "";

                                if (_investmentRpt.FundPK != 0)
                                {
                                    _paramFund = " And A.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                                }
                                else
                                {
                                    _paramFund = "";
                                }
                                //                                if (_investmentRpt.BitIsMature == true)
                                //                                {
                                //                                    _bitIsMature = @"union all
                                //
                                //                                Select  Reference,Tenor,ClearingCode,BankAccountNo,BankCustodianName,BankCustodianContactPerson,BankCustodianFaxNo,BankCustodianPhone,ContactPerson,FaxNo,Phone,InstrumentName,FundName,valueDate,InstrumentID,  
                                //                                FundID,InstrumentType,BankBranchName ,TrxTypeID,InstructionDate,MaturityDate,Amount,DoneAmount,OrderPrice,InterestPercent,ValueDate,AcqDate,AccruedInterest,SettlementDate 
                                //                                from InvestmentMature where Selected = 1 ";
                                //                                }
                                //                                else
                                //                                {
                                //                                    _bitIsMature = "";
                                //                                }
                                //                                //                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Phone,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,   
                                //                                //                                             F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,IV.*  
                                //                                //                                             from Investment IV   
                                //                                //                                             left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                //                                //                                             left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                //                                //                                             left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                //                                //                                             left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                //                                //                                             left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                //                                //                                             left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                //                                //                                             left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                                //                                //                                             Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  and IV.selectedSettlement = 1 "
                                //                                //                                             + _paramFund + @" order by Refno ";


                                //                                cmd.CommandText = @"
                                //                            Declare @TrailsPK int
                                //                            Declare @MaxDateEndDayFP datetime
                                //
                                //                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                                //                            where ValueDate = 
                                //                            (
                                //                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                                //                            )
                                //                            and status = 2
                                //
                                //                            Select Reference, DATEDIFF (day,IV.ValueDate ,IV.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,isnull(BC.ContactPerson,'') BankCustodianContactPerson,isnull(BC.Fax1,'') BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,isnull(B.ContactPerson,'') ContactPerson,isnull(B.Fax1,'') FaxNo,B.Phone1 Phone,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,  
                                //                            F.ID FundID,IT.Name InstrumentType,C.Name BankBranchName,IV.TrxTypeID,IV.InstructionDate,IV.MaturityDate,IV.Amount,IV.DoneAmount,IV.OrderPrice,IV.InterestPercent,IV.ValueDate,IV.AcqDate,IV.AccruedInterest ,IV.SettlementDate 
                                //                            from Investment IV   
                                //                            left join BankBranch B on IV.BankBranchPK = B.BankBranchPK and B.status = 2   
                                //                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                //                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                //                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                //                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                //                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                //                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2
                                //                            left join Bank C on B.BankPK = C.BankPK and C.status = 2    
                                //                            Where IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  
                                //                            " + _paramFund + @" 
                                //                            --and IV.selectedSettlement = 1 
                                //                             " + _bitIsMature;

                                cmd.CommandText = @"
                                select A.InvestmentPK,C.Name FundName,  'BANK'+ ' ' + E.ID BankName,A.InstructionDate,B.Name InstrumentName,B.ID InstrumentID,A.TrxTypeID TrxTypeID,A.TrxType, A.Amount  from investment A
                                left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                                left join Fund C on A.fundPK = C.FundPK and C.status in (1,2)
                                left join FundCashRef D on C.FundPK = D.fundPK and D.status in (1,2) 
                                left join Bank E on A.BankPK = E.BankPK and E.status in (1,2)
                                where StatusSettlement = 2 and A.InstrumentTypePK = 5 " + _paramFund + "and A.valuedate = @ParamListDate "
                              ;

                                cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "LPTIDeposito" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "LPTIDeposito" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Deposito");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {

                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                                rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                                rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                                rSingle.InvestmentPK = Convert.ToInt32(dr0["InvestmentPK"]);
                                                rSingle.BankBranchName = dr0["BankName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName"]);

                                                //if (rSingle.TrxTypeID == "LIQUIDATE") 
                                                //{
                                                //    rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                                //}
                                                //else if (rSingle.TrxTypeID == "ROLLOVER")
                                                //{
                                                //    rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["ValueDate"]);
                                                //}

                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.TrxTypeID, r.InvestmentPK ascending
                                                group r by new { r.TrxTypeID, r.InvestmentPK } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;
                                            //int _startRowDetail = 0;

                                            foreach (var rsHeader in QueryByFundID)
                                            {


                                                int _endRowDetail = incRowExcel;

                                                //area header

                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border


                                                    incRowExcel++;
                                                    //int RowA = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel = incRowExcel + 3;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                                    //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = "Kepala Divisi Keuangan dan Investasi";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth, ";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = "Department Keuangan";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Instruksi Penempatan Deposito";
                                                    }
                                                    else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Instruksi Pencairan Deposito";
                                                    }
                                                    else
                                                    { }

                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Penempatan Deposito";
                                                    }
                                                    else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                                    {
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Value = "Pencairan Deposito";
                                                    }
                                                    else
                                                    { }

                                                    incRowExcel = incRowExcel + 2;

                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat di lakukan transaksi";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "pada tanggal";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstructionDate;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    //worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "dengan rincian sebagai berikut :";

                                                    incRowExcel = incRowExcel + 2;

                                                    int RowF = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "No";
                                                    worksheet.Cells[incRowExcel, 3].Value = "Nama Bank";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Kode Customer";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Kode Akun";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Business Area";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Nominal";
                                                    //worksheet.Row(incRowExcel).Height = 30;
                                                    incRowExcel++;


                                                    worksheet.Cells["A" + RowF + ":G" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    int RowD = incRowExcel;

                                                    worksheet.Cells[incRowExcel, 1].Value = "1";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchName;
                                                    worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    _endRowDetail = incRowExcel;

                                                    worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;


                                                    worksheet.Cells["C" + RowD + ":G" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowD + ":G" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    incRowExcel = incRowExcel + 4;

                                                    worksheet.Cells[incRowExcel, 1].Value = "Demikian disampaikan, atas perhatian dan kerjasamanya diucapkan terima kasih.";
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                    incRowExcel = incRowExcel + 7;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Jakarta, " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    incRowExcel = incRowExcel + 10;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Ruben Sukatendel";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Kepala Divisi Investasi";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel++;

                                                }

                                                worksheet.Row(incRowExcel).PageBreak = true;

                                            }



                                            string _rangeA = "A:G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 24;
                                            }


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                            worksheet.Column(1).Width = 25;
                                            worksheet.Column(2).Width = 5;
                                            worksheet.Column(3).Width = 50;
                                            worksheet.Column(4).Width = 30;
                                            worksheet.Column(5).Width = 25;
                                            worksheet.Column(6).Width = 40;
                                            worksheet.Column(7).Width = 40;
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }
                }

                #endregion

                #region LPTISaham
                else if (_investmentRpt.ParamInstType == "1")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                string _paramFund = "";

                                if (_investmentRpt.FundPK != 0)
                                {
                                    _paramFund = " And A.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                                }
                                else
                                {
                                    _paramFund = "";
                                }
                                //                                cmd.CommandText = @" Select MV.DescOne SettlementModeDesc,Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName, 
                                //                                            F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,BB.Name BankCustodianName,BC.ContactPerson ContactPerson,BC.Fax1 FaxNo,FC.BankAccountNo,BC.BankAccountName,IV.* 
                                //                                            from Investment IV  
                                //                                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                //                                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                //                                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                                //                                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                //                                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                //                                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                //                                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                //                                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                                //                                            
                                //                                            " + _paramFund + @" order by TrxType ";
                                cmd.CommandText = @"
                                select C.Name FundName,A.InstructionDate,B.Name InstrumentName,B.ID InstrumentID,A.TrxTypeID TrxTypeID,A.TrxType, A.Amount  from investment A
                                left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                                left join Fund C on A.fundPK = C.FundPK and C.status in (1,2)
                                left join FundCashRef D on C.FundPK = D.fundPK and D.status in (1,2) 
                                where StatusSettlement = 2 and A.InstrumentTypePK = 6 " + _paramFund + "and A.valuedate = @ParamListDate "
                               ;


                                cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "LPTIReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "LPTIReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }

                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "InvestmentReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Reksadana");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                            while (dr0.Read())
                                            {
                                                InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                                rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                                rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                                rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                                rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                                rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                                rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                                rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                                rList.Add(rSingle);

                                            }


                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.TrxTypeID ascending
                                                group r by new { r.TrxTypeID } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;
                                            //int _startRowDetail = 0;

                                            foreach (var rsHeader in QueryByFundID)
                                            {


                                                int _endRowDetail = incRowExcel;

                                                //area header

                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border


                                                    incRowExcel++;
                                                    //int RowA = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel = incRowExcel + 3;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                                    //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Keuangan dan Investasi";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth, ";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Department Keuangan";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Instruksi Pembelian Reksadana";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Instruksi Penjualan Obligasi";
                                                    }

                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = ":";
                                                    if (rsHeader.Key.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Subscription Reksadana";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Penjualan Reksadana";
                                                    }

                                                    incRowExcel = incRowExcel + 4;

                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat di lakukan transaksi";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1].Value = "pada tanggal";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstructionDate;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 5].Value = "dengan rincian sebagai berikut :";

                                                    incRowExcel = incRowExcel + 2;

                                                    int RowF = incRowExcel;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "No";
                                                    worksheet.Cells[incRowExcel, 2].Value = "Nama Bank";
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = "Kode Customer";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Kode Akun";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Business Area";
                                                    worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    //worksheet.Row(incRowExcel).Height = 30;
                                                    incRowExcel++;


                                                    worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    int RowD = incRowExcel;

                                                    worksheet.Cells[incRowExcel, 1].Value = "1";
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Row(incRowExcel).Height = 35;
                                                    _endRowDetail = incRowExcel;

                                                    worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowD + ":H" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["C" + RowD + ":H" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                    incRowExcel = incRowExcel + 4;

                                                    worksheet.Cells[incRowExcel, 1].Value = "Demikian disampaikan, atas perhatian dan kerjasamanya diucapkan terima kasih.";
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                    incRowExcel = incRowExcel + 7;
                                                    worksheet.Cells[incRowExcel, 7].Value = "Jakarta, " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    incRowExcel = incRowExcel + 7;
                                                    worksheet.Cells[incRowExcel, 7].Value = "Ruben Sukatendel";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.UnderLine = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 7].Value = "Kepala Divisi Investasi";
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel++;

                                                }

                                                worksheet.Row(incRowExcel).PageBreak = true;

                                            }



                                            string _rangeA = "A:H" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 12;
                                            }


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                            worksheet.Column(1).Width = 8;
                                            worksheet.Column(2).Width = 8;
                                            worksheet.Column(3).Width = 5;
                                            worksheet.Column(4).Width = 15;
                                            worksheet.Column(5).Width = 18;
                                            worksheet.Column(6).Width = 15;
                                            worksheet.Column(7).Width = 15;
                                            worksheet.Column(8).Width = 20;
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            // worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                            //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                            package.Save();
                                            if (_investmentRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }
                                            return true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }
                #endregion





                return false;
            }
            #endregion

            #region LPTI Saham
            if (_investmentRpt.ReportName.Equals("LPTI Saham"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_investmentRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investmentRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _investmentRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"
                              SELECT 
A.InstructionDate,
A.SettlementDate,
C.Name InstrumentName,
C.ID InstrumentID,
H.Name CounterpartName,
I.BankAccountNo,
ISNULL(F.ID,'21211201')  AccountSAP,
'J000' BusinesArea,
case when D.BaseDebit <> 0 then BaseDebit else BaseCredit end Nominal,
case when A.InstrumentTypePK = 5 then isnull(G.SAPCustID,'') else  isnull(C.SAPCustID,'') end CustomerCode, A.TrxTypeID 
from Investment A
left join FundJournal B on A.Reference = B.Reference and B.status = 2
left join Instrument C on A.instrumentPK = C.InstrumentPK and C.Status in (1,2)
left join FundJournalDetail D on B.FundJournalPK = D.FundJournalPK and D.Status = 2
left join ZSAP_BridgeJournal E on D.FundJournalAccountPK = E.FundJournalAccountPK and E.Status in (1,2)
left join ZSAP_MS_Account F on E.SAPAccountID = F.ID
left join Bank G on A.BankPK = G.BankPK and G.Status in (1,2)
left join Counterpart H on A.CounterpartPK = H.CounterpartPK and H.status in (1,2)
left join FundCashRef I on A.FundPK = I.FundPK and I.status in (1,2)
where B.Type = 5 and B.Posted = 1 and B.Reversed = 0 and A.StatusSettlement = 2 and A.ValueDate = @Date and A.InstrumentTypePK not in (5)
and A.SelectedSAP = 0  and C.InstrumentTypePK = 1 and F.ID not in ('21212702','12221115') " + _paramFund + @" 
group by A.InstrumentPK,F.ID,D.BaseDebit,A.InstrumentTypePK,G.SAPCustID,C.SAPCustID,A.TrxTypeID,BaseDebit,BaseCredit,
C.Name,C.ID,H.Name,A.InstructionDate,I.BankAccountNo,A.SettlementDate ";


                            cmd.Parameters.AddWithValue("@Date", _investmentRpt.ValueDateFrom);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LPTISaham" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LPTISaham" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Saham");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.AccountSAP = dr0["AccountSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountSAP"]);
                                            rSingle.BusinesArea = dr0["BusinesArea"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinesArea"]);
                                            rSingle.Nominal = dr0["Nominal"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Nominal"]);
                                            rSingle.CustomerCode = dr0["CustomerCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CustomerCode"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);                                           
                                            
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.TrxTypeID ascending
                                            group r by new { r.TrxTypeID, r.BankAccountNo, r.SettlementDate, r.TotalSettle } into rGroup
                                            //group r by new { r.FundName, r.TrxTypeID, r.FaxNo, r.Telp, r.BankAccountNo, r.FundRekName, r.FundID, r.CustodianID, r.FaxNo2, r.Telp2 } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        //int _startRowDetail = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            incRowExcel = incRowExcel + 6;


                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Investasi";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth. ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Departemen Keuangan";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Pembelian Saham";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Penjualan Saham";
                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Pembelian Saham TUD (Tersedia Untuk Dibeli) Pada Pasar Sekunder";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Penjualan Saham TUD (Tersedia Untuk Dijual) Pada Pasar Sekunder";
                                            }

                                            incRowExcel = incRowExcel + 4;
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon dikirimkan dana atas Pembelian Saham untuk settlement tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy")  + "" + " atas broker sebagai terlampir.";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 32;
                                                
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon diterima dana atas Penjualan Saham untuk settlement";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Reference;
                                            }

                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells[incRowExcel, 1].Value = "tanggal";
                                            //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.SettlementDate;
                                            //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd MMMM yyyy";
                                            //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            ////worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            ////worksheet.Cells[incRowExcel, 4].Value = "sebesar Rp " + rsHeader.Key.Amount.ToString("N0") + " atas broker sebagai terlampir.";
                                            //worksheet.Cells[incRowExcel, 4].Value = "sebesar Rp " + "" + " atas broker sebagai terlampir.";

                                            //incRowExcel++;
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Adapun rincian kebutuhan adalah sebagai berikut :";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Adapun rincian penerimaan adalah sebagai berikut :";
                                            }


                                            incRowExcel = incRowExcel + 2;

                                            int RowF = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Emiten";
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Kode Customer";
                                            worksheet.Cells[incRowExcel, 6].Value = "Kode Akun";
                                            worksheet.Cells[incRowExcel, 7].Value = "Business Area";
                                            worksheet.Cells[incRowExcel, 8].Value = "Broker";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Row(incRowExcel).Height = 30;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel,9].Style.Font.Bold = true;
                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            int RowD = incRowExcel;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.CustomerCode;
                                                    worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccountSAP;
                                                    worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BusinesArea;
                                                    worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.CounterpartName;
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Nominal;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                             

                                               
                                                worksheet.Row(incRowExcel).Height = 26;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }
                                            incRowExcel++;
                                            //int _A = incRowExcel;
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 9].Calculate();
                                            //incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Value = "Atas transaksi tersebut mohon bantuannya untuk melaksanakan hal-hal berikut :";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = "1. ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; 

                                                worksheet.Cells[incRowExcel, 2].Value = "Menerima saham selambat-lambatnya tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;                                               
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "1. ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; 

                                                worksheet.Cells[incRowExcel, 2].Value = "Menyerahkan saham selambat-lambatnya tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                //worksheet.Cells[incRowExcel, 3].Value = "Menyerahkan saham selambat-lambatnya tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            }


                                            incRowExcel++;
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "2. ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; 

                                                worksheet.Cells[incRowExcel, 2].Value = "Mengirimkan uang selambat-lambatnya tanggal  " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                //worksheet.Cells[incRowExcel, 3].Value = "Mengirimkan uang selambat-lambatnya tanggal  " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            }
                                            else
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = "2. ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; 

                                                worksheet.Cells[incRowExcel, 2].Value = "Menerima uang selambat-lambatnya tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                //worksheet.Cells[incRowExcel, 3].Value = "Menerima uang selambat-lambatnya tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            }


                                            incRowExcel++;

                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "3. ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                worksheet.Cells[incRowExcel, 2].Value = "Dana Pembelian Saham ditransfer ke rekening yang digunakan untuk pembayaran (sesuai surat terlampir) yaitu Bank Mandiri No. Rek " + rsHeader.Key.BankAccountNo + " A/N PT. Asuransi Jiwa Taspen";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                //worksheet.Cells[incRowExcel, 3].Value = "Dana Pembelian Saham ditransfer ke rekening yang digunakan untuk pembayaran (sesuai surat terlampir) yaitu Bank Mandiri No. Rek " + rsHeader.Key.BankAccountNo + " A/N PT. Asuransi Jiwa Taspen";
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                //worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 34;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "3. ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                worksheet.Cells[incRowExcel, 2].Value = "Dana hasil Penjualan Saham diterima di rekening penerima (sesuai surat terlampir) Bank Mandiri No. Rek " + rsHeader.Key.BankAccountNo + " A/N PT. Asuransi Jiwa Taspen";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                //worksheet.Cells[incRowExcel, 3].Value = "Dana hasil Penjualan Saham diterima di rekening penerima (sesuai surat terlampir) Bank Mandiri No. Rek " + rsHeader.Key.BankAccountNo + " A/N PT. Asuransi Jiwa Taspen";
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                //worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 34;
                                            }


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terima kasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 7;
                                            worksheet.Cells[incRowExcel, 8].Value = "Jakarta, " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 10;
                                            worksheet.Cells[incRowExcel, 8].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Kepala Divisi Investasi";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Row(incRowExcel).PageBreak = _investmentRpt.PageBreak;

                                        }


                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 6;
                                        worksheet.Column(2).Width = 10;
                                        worksheet.Column(3).Width = 4;
                                        worksheet.Column(4).Width = 7;
                                        worksheet.Column(5).Width = 17;
                                        worksheet.Column(6).Width = 16;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 27;
                                        worksheet.Column(9).Width = 18;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_investmentRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region LPTI Bond
            if (_investmentRpt.ReportName.Equals("LPTI Bond"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (_investmentRpt.FundPK != 0)
                            {
                                _paramFund = " And B.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                            }
                            else
                            {
                                _paramFund = "";
                            }


                            cmd.CommandText = @"
                            select A.FundJournalAccountPK,A.InstrumentName,A.InstrumentID,A.BusinesArea,A.AccountSAP,A.CustomerCode,
                            A.TrxTypeID,A.TrxType,A.InstructionDate,A.SettlementDate,A.FundName,
                            A.Amount,A.JournalTypeSAP  from (
                        SELECT
                            B.FundJournalAccountPK,case when E.ID in ('11700001') then C.Name else E.Name + ' ' + C.Name  end InstrumentName,C.ID InstrumentID,'J000' BusinesArea,E.ID AccountSAP,isnull(C.SAPCustID,'') CustomerCode,
                            Z.TrxTypeID,Z.TrxType,Z.InstructionDate,Z.SettlementDate,'TRADITIONAL FUND' FundName,
                            B.Amount,'JM' JournalTypeSAP
                        FROM
                        Investment Z
                            INNER JOIN FundJournal A on Z.Reference = A.Reference and A.status = 2
                            INNER JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK and A.status = 2
	                        INNER JOIN instrument C on B.InstrumentPK = C.instrumentpk and C.status = 2
	                        INNER JOIN ZSAP_BridgeJournal D on B.FundJournalAccountPK = D.FundJournalAccountPK
	                        INNER JOIN ZSAP_MS_Account E on D.SAPAccountID = E.ID
	                        where A.ValueDate = @ParamListDate and A.TrxName = 'transaction' and A.Description like '%T0 BOND%'  and C.InstrumentTypePK not in (1,5,6,8) and B.Amount <>0 " + _paramFund + @" 
                        GROUP BY
                            B.FundJournalAccountPK,E.Name,C.ID,E.ID,C.Name,C.SAPCustID,Z.TrxTypeID,Z.TrxType,Z.InstructionDate,Z.SettlementDate,B.Amount 

	                        union ALL

                        SELECT
                            B.FundJournalAccountPK,case when E.ID in ('11700001') then C.Name else E.Name + ' ' + C.Name   end InstrumentName,C.ID InstrumentID,'J000' BusinesArea,E.ID AccountSAP,isnull(C.SAPCustID,'') CustomerCode,
                            ZZ.TrxTypeID,ZZ.TrxType,ZZ.InstructionDate,ZZ.SettlementDate,'TRADITIONAL FUND' FundName,
                            B.Amount,'JI' JournalTypeSAP
                        FROM
                        Investment ZZ
                            INNER JOIN FundJournal A on ZZ.Reference = A.Reference and A.status = 2
                            INNER JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK and A.status = 2
	                        INNER JOIN instrument C on B.InstrumentPK = C.instrumentpk and C.status = 2
	                        INNER JOIN ZSAP_BridgeJournal D on B.FundJournalAccountPK = D.FundJournalAccountPK
	                        INNER JOIN ZSAP_MS_Account E on D.SAPAccountID = E.ID
	                        where A.ValueDate = @ParamListDate and A.TrxName = 'transaction' and A.Description like '%T-Settled BOND%'  and C.InstrumentTypePK not in (1,5,6,8) and B.Amount <>0 " + _paramFund + @" 
                        GROUP BY
                            B.FundJournalAccountPK,E.Name,C.ID,E.ID,C.Name,C.SAPCustID,ZZ.TrxTypeID,ZZ.TrxType,ZZ.InstructionDate,ZZ.SettlementDate,B.Amount

                        ) A 

                            ";

                            cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                            //cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LPTIBond" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LPTIBond" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Bond");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.FundJournalAccountPK = Convert.ToInt32(dr0["FundJournalAccountPK"]);
                                            rSingle.AccountSAP = dr0["AccountSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountSAP"]);
                                            rSingle.BusinesArea = dr0["BusinesArea"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinesArea"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.CustomerCode = dr0["CustomerCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CustomerCode"]);                                            
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.JournalTypeSAP = dr0["JournalTypeSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["JournalTypeSAP"]);                                            
                                            rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                           
                                          
                                            
                                          
                                           
                                
                                           
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.TrxTypeID ascending
                                            group r by new { r.TrxTypeID, r.JournalTypeSAP, r.SettlementDate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        //int _startRowDetail = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel = incRowExcel + 4;
                                            //int RowA = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Investasi";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth. ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Departmen Keuangan";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Pembelian Obligasi";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Penjualan Obligasi";
                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Pembelian Obligasi";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Penjualan Obligasi";
                                            }

                                            incRowExcel = incRowExcel + 4;
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat dilakukan transaksi";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Reference;
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat dilakukan transaksi";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Reference;
                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "pada tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy") + " " + " dengan rincian sebagai berikut : "; ;

                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;


                                            incRowExcel = incRowExcel + 2;

                                            int RowF = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Emiten";
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Kode Customer";
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Kode Akun";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Business Area";
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            
                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                            //int RowD = incRowExcel;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //ThickBox Border  
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CustomerCode;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccountSAP;
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BusinesArea;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Row(incRowExcel).Height = 30;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                                

                                            }

                                            

                                            //incRowExcel = incRowExcel + 4;


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian disampaikan, atas perhatian dan kerjasamanya diucapkan terima kasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 4;
                                            worksheet.Cells[incRowExcel, 8].Value = "Jakarta, " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 7;
                                            worksheet.Cells[incRowExcel, 8].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Kepala Divisi Investasi";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }



                                        string _rangeA = "A:H" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 6;
                                        worksheet.Column(2).Width = 6;
                                        worksheet.Column(3).Width = 4;
                                        worksheet.Column(4).Width = 19;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 26;
                                        //worksheet.Column(9).Width = 30;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_investmentRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region LPTI Deposito
            else if (_investmentRpt.ReportName.Equals("LPTI Deposito"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            //string _bitIsMature = "";
                            string _paramFund = "";

                            if (_investmentRpt.FundPK != 0)
                            {
                                _paramFund = " And A.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                            }
                            else
                            {
                                _paramFund = "";
                            }
                            //                                if (_investmentRpt.BitIsMature == true)
                            //                                {
                            //                                    _bitIsMature = @"union all
                            //
                            //                                Select  Reference,Tenor,ClearingCode,BankAccountNo,BankCustodianName,BankCustodianContactPerson,BankCustodianFaxNo,BankCustodianPhone,ContactPerson,FaxNo,Phone,InstrumentName,FundName,valueDate,InstrumentID,  
                            //                                FundID,InstrumentType,BankBranchName ,TrxTypeID,InstructionDate,MaturityDate,Amount,DoneAmount,OrderPrice,InterestPercent,ValueDate,AcqDate,AccruedInterest,SettlementDate 
                            //                                from InvestmentMature where Selected = 1 ";
                            //                                }
                            //                                else
                            //                                {
                            //                                    _bitIsMature = "";
                            //                                }
                            //                                //                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Phone,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,   
                            //                                //                                             F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,IV.*  
                            //                                //                                             from Investment IV   
                            //                                //                                             left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                            //                                //                                             left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            //                                //                                             left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                            //                                //                                             left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            //                                //                                             left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            //                                //                                             left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            //                                //                                             left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                            //                                //                                             Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  and IV.selectedSettlement = 1 "
                            //                                //                                             + _paramFund + @" order by Refno ";


                            //                                cmd.CommandText = @"
                            //                            Declare @TrailsPK int
                            //                            Declare @MaxDateEndDayFP datetime
                            //
                            //                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            //                            where ValueDate = 
                            //                            (
                            //                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                            //                            )
                            //                            and status = 2
                            //
                            //                            Select Reference, DATEDIFF (day,IV.ValueDate ,IV.MaturityDate ) Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,isnull(BC.ContactPerson,'') BankCustodianContactPerson,isnull(BC.Fax1,'') BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,isnull(B.ContactPerson,'') ContactPerson,isnull(B.Fax1,'') FaxNo,B.Phone1 Phone,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,  
                            //                            F.ID FundID,IT.Name InstrumentType,C.Name BankBranchName,IV.TrxTypeID,IV.InstructionDate,IV.MaturityDate,IV.Amount,IV.DoneAmount,IV.OrderPrice,IV.InterestPercent,IV.ValueDate,IV.AcqDate,IV.AccruedInterest ,IV.SettlementDate 
                            //                            from Investment IV   
                            //                            left join BankBranch B on IV.BankBranchPK = B.BankBranchPK and B.status = 2   
                            //                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            //                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                            //                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            //                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            //                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            //                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2
                            //                            left join Bank C on B.BankPK = C.BankPK and C.status = 2    
                            //                            Where IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  
                            //                            " + _paramFund + @" 
                            //                            --and IV.selectedSettlement = 1 
                            //                             " + _bitIsMature;

                            cmd.CommandText = @"
                                select A.InvestmentPK,E.SAPCustID CustomerCode,  '11100003' AccountCode,  'J000' BusinessArea,
                                A.InstructionDate,B.Name InstrumentName,B.ID InstrumentID,A.TrxTypeID TrxTypeID,A.TrxType, A.Amount  from investment A
                                left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                                left join Fund C on A.fundPK = C.FundPK and C.status in (1,2)
                                left join FundCashRef D on C.FundPK = D.fundPK and D.status in (1,2) 
                                left join Bank E on A.BankPK = E.BankPK and E.status in (1,2)
                                where A.StatusSettlement = 2 and A.InstrumentTypePK = 5 
                                " + _paramFund + @"
                                and A.valuedate = @ParamListDate
                                group by A.BankPK,A.InvestmentPK,E.SAPCustID,A.InstructionDate,B.Name,B.ID ,A.TrxTypeID ,A.TrxType, A.Amount ";

                            cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LPTIDeposito" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LPTIDeposito" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Deposito");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                        while (dr0.Read())
                                        {

                                            InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                            rSingle.CustomerCode = dr0["CustomerCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CustomerCode"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.InvestmentPK = Convert.ToInt32(dr0["InvestmentPK"]);
                                            rSingle.AccountCode = dr0["AccountCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountCode"]);
                                            rSingle.BusinessArea = dr0["BusinessArea"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinessArea"]);
                                            rList.Add(rSingle);

                                        }
                                       

                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.TrxTypeID ascending
                                            group r by new { r.CustomerCode, r.TrxTypeID, r.InstructionDate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        //int _startRowDetail = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            incRowExcel = incRowExcel + 4;
                                            ////int RowA = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 5;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Investasi";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth. ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Departemen Keuangan";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Penempatan Deposito";
                                            }
                                            else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Pencairan Deposito";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Perpanjangan Deposito";
                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Penempatan Deposito";
                                            }
                                            else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Pencairan Deposito";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Perpanjangan Deposito";
                                            }

                                            incRowExcel = incRowExcel + 4;
                                            if (rsHeader.Key.TrxTypeID == "PLACEMENT")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon dibayarkan dana untuk Penempatan Deposito ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                            }
                                            else if (rsHeader.Key.TrxTypeID == "LIQUIDATE")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon diterima dana atas Pencairan Deposito pada tanggal " + Convert.ToDateTime(rsHeader.Key.InstructionDate).ToString("dd MMMM yyyy") + " dengan rincian sebagai berikut : ";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 37;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon diterima dana atas Perpanjangan Deposito";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                            }

                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells[incRowExcel, 1].Value = "pada tanggal " + Convert.ToDateTime(rsHeader.Key.InstructionDate).ToString("dd MMMM yyyy") + " dengan rincian sebagai berikut : ";
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 1;

                                            ////int RowF = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Bank";
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Kode Customer";
                                            worksheet.Cells[incRowExcel, 6].Value = "Kode Akun";
                                            worksheet.Cells[incRowExcel, 7].Value = "Business Area";
                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Row(incRowExcel).Height = 24;




                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;



                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //ThickBox Border
                                                //int RowD = incRowExcel;

                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                               

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CustomerCode;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccountCode;
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BusinessArea;
                                                worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Row(incRowExcel).Height = 28;

                                            
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;                                            
                                                                                            

                                               

                                            }

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terima kasih.";

                                            incRowExcel = incRowExcel + 10;
                                            worksheet.Cells[incRowExcel, 7].Value = "Jakarta, " + Convert.ToDateTime(rsHeader.Key.InstructionDate).ToString("dd MMMM yyyy");
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 10;
                                            worksheet.Cells[incRowExcel, 7].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 7].Value = "Kepala Divisi Investasi";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;

                                            //incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = true;

                                  

                                        }




                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 7;
                                        worksheet.Column(3).Width = 3;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 18;
                                        worksheet.Column(6).Width = 16;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_investmentRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region LPTI Reksadana
            else if (_investmentRpt.ReportName.Equals("LPTI Reksadana"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (_investmentRpt.FundPK != 0)
                            {
                                _paramFund = " And A.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                            }
                            else
                            {
                                _paramFund = "";
                            }
     
                            cmd.CommandText = @"
                                Declare @PostingDate nvarchar(10)
Declare @TransactionPK int
Declare @DocType nvarchar(10)
Declare @ItemText nvarchar(100)
Declare @HeaderText nvarchar(100)
Declare @RefNo nvarchar(100)
Declare @ItemAgeng nvarchar(100)  
        
DECLARE @A TABLE
(
InvestmentPK int,Date nvarchar(100),
JurnalTypeSAP nvarchar(100),
InstrumentName nvarchar(100),AutoNo nvarchar(100),AccountSAP nvarchar(100),Description nvarchar(100),
BusinesArea nvarchar(100),
Amount nvarchar(100),AccountType nvarchar(100),
CustomerCode nvarchar(100),TrxTypeID nvarchar(100),SettlementDate datetime, AccountNameSAP nvarchar(100)
        
)

		

        
Insert into @A
SELECT A.InvestmentPk,CONVERT(VARCHAR(10), B.ValueDate, 112) Date,          
CASE WHEN ISNULL(F.BitIsBank,0) = 1  AND  D.BaseCredit <> 0 THEN 'JO' else CASE WHEN ISNULL(F.BitIsBank,0) = 1  AND  D.BaseDebit <> 0 THEN 'JI' ELSE
'JM' END END JurnalTypeSAP,        
C.Name InstrumentName,
D.AutoNo AutoNo,ISNULL(F.ID,'21211201')  AccountSAP,D.DetailDescription Description,'J000' BusinesArea,
case when D.BaseDebit <> 0 then BaseDebit else BaseCredit end Amount,AccountType AccountType, case when A.InstrumentTypePK = 5 then isnull(G.SAPCustID,'') else  isnull(C.SAPCustID,'') end CustomerCode  
,A.TrxTypeID TrxTypeID, B.ValueDate SettlementDate,case when F.ID in ('11300005','11300002') then C.Name else F.Name +' '+ C.Name end AccountNameSAP
from Investment A
left join FundJournal B on A.Reference = B.Reference and B.status = 2
left join Instrument C on A.instrumentPK = C.InstrumentPK and C.Status in (1,2)
left join FundJournalDetail D on B.FundJournalPK = D.FundJournalPK and D.Status = 2
left join ZSAP_BridgeJournal E on D.FundJournalAccountPK = E.FundJournalAccountPK and E.Status in (1,2)
left join ZSAP_MS_Account F on E.SAPAccountID = F.ID
left join Bank G on A.BankPK = G.BankPK and G.Status in (1,2)
where B.Type = 5 and B.Posted = 1 and B.Reversed = 0 and A.StatusSettlement = 2 and A.ValueDate = @Date and A.InstrumentTypePK = 6 " + _paramFund + @"
--and A.SelectedSAP = 1        
        
Declare Z Cursor For 
        
select InvestmentPK,JurnalTypeSAP,Date,Description from @A 
group by InvestmentPK,JurnalTypeSAP,Date ,Description
order by JurnalTypeSAP asc
        
Open Z                  
Fetch Next From Z                  
Into @TransactionPK,@DocType,@PostingDate,@ItemAgeng
While @@FETCH_STATUS = 0                  
Begin 

Update @A set JurnalTypeSAP = @DocType where InvestmentPk = @TransactionPK and Date = @PostingDate and JurnalTypeSAP = 'JM' and Description = @ItemAgeng

Fetch next From Z                   
Into @TransactionPK,@DocType,@PostingDate,@ItemAgeng
END                  
Close Z                  
Deallocate z

-- buat deposito
Declare A Cursor For 
        
select InvestmentPK,JurnalTypeSAP,Description from @A where InstrumentName = 'TIME DEPOSIT'
group by InvestmentPK,JurnalTypeSAP,Description
order by InvestmentPK asc
    
                 
Deallocate A


select * from @A where InstrumentName <> 'TIME DEPOSIT'
union all
SELECT InvestmentPK,Date ,
JurnalTypeSAP ,
InstrumentName ,ROW_NUMBER() OVER (PARTITION BY Description ORDER BY InvestmentPK) AS ITEMNO_ACC,AccountSAP ,Description ,
BusinesArea ,
Amount ,AccountType ,
CustomerCode, TrxTypeID, SettlementDate, AccountNameSAP
       
FROM   @A where InstrumentName = 'TIME DEPOSIT'
ORDER  BY Description  ";


                            cmd.Parameters.AddWithValue("@Date", _investmentRpt.ValueDateFrom);
                            //cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LPTIReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LPTIReksadana" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Reksadana");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                            rSingle.InvestmentPk = Convert.ToInt32(dr0["InvestmentPk"]);
                                            rSingle.Date = dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]);
                                            rSingle.JurnalTypeSAP = dr0["JurnalTypeSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["JurnalTypeSAP"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.AutoNo = Convert.ToInt32(dr0["AutoNo"]);
                                            rSingle.AccountSAP = dr0["AccountSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountSAP"]);
                                            rSingle.description = dr0["description"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["description"]);
                                            rSingle.BusinessArea = dr0["BusinesArea"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinesArea"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.CustomerCode = dr0["CustomerCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CustomerCode"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.AccountNameSAP = dr0["AccountNameSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountNameSAP"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.TrxTypeID ascending
                                            group r by new { r.JurnalTypeSAP, r.TrxTypeID, r.SettlementDate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        //int _startRowDetail = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //ThickBox Border


                                            incRowExcel = incRowExcel + 6;
                                            //int RowA = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Keuangan dan Investasi";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth, ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Departemen Keuangan";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Subscription Reksadana";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Penjualan Reksadana";
                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Subscription Reksadana";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Penjualan Reksadana";
                                            }

                                            incRowExcel = incRowExcel + 4;

                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon dibayarkan dana untuk Pembelian Reksadana ";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon diterima dana atas Penjualan Reksadana";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                            }

                                            incRowExcel++;
                                            if (rsHeader.Key.JurnalTypeSAP == "JM")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "pada tanggal " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd MMMM yyyy") + " dengan rincian sebagai berikut : ";
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            }
                                            else if (rsHeader.Key.JurnalTypeSAP == "JI")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "pada tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy") + " dengan rincian sebagai berikut : ";
                                                worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            }

                                            //rsDetail.SettlementDate.ToString("dd MMMM yyyy");
                                            incRowExcel = incRowExcel + 2;

                                            int RowF = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Bank";
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Kode Customer";
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Kode Akun";
                                            worksheet.Cells[incRowExcel, 7].Value = "Business Area";
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Row(incRowExcel).Height = 34;

                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                                                                
                                                int RowD = incRowExcel;

                                                worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + RowD + ":H" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + RowD + ":H" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":A" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                if (rsDetail.JurnalTypeSAP == "JM")
                                                {
                                                    if (_no == 2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.CustomerCode;
                                                        worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else
                                                    {

                                                    }

                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountNameSAP;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccountSAP;
                                                    worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BusinessArea;
                                                    worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    
                                                    worksheet.Row(incRowExcel).Height = 30;

                                                    _endRowDetail = incRowExcel;
                                                    _no++;
                                                    incRowExcel++;
                                                }
                                                else 
                                                {


                                                    if (_no == 1)
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = "1";
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.CustomerCode;
                                                        worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else
                                                    {

                                                    }
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.AccountNameSAP;
                                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccountSAP;
                                                    worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BusinessArea;
                                                    worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Row(incRowExcel).Height = 30;

                                                    _endRowDetail = incRowExcel;
                                                    _no++;
                                                    incRowExcel++;
                                                }

                                                 
                                                                                        

                                            }

                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terima kasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 7;
                                            worksheet.Cells[incRowExcel, 8].Value = "Jakarta, " + Convert.ToDateTime(_investmentRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 7;
                                            worksheet.Cells[incRowExcel, 8].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Kepala Divisi Investasi";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }



                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 7;
                                        worksheet.Column(3).Width = 3;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 14;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 19;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        if (_investmentRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region LPTI EBA
            if (_investmentRpt.ReportName.Equals("LPTI EBA"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (_investmentRpt.FundPK != 0)
                            {
                                _paramFund = " And B.FundPK in ( " + _investmentRpt.FundPK + " ) ";

                            }
                            else
                            {
                                _paramFund = "";
                            }

                           

                            cmd.CommandText = @"
select A.FundJournalAccountPK,A.InstrumentName,A.InstrumentID,A.BusinesArea,A.AccountSAP,A.CustomerCode,
    A.TrxTypeID,A.TrxType,A.InstructionDate,A.SettlementDate,A.FundName,
    A.Amount,A.JournalTypeSAP  from (
SELECT
    B.FundJournalAccountPK,case when E.ID in ('11700001') then C.Name else E.Name + ' ' + C.Name  end InstrumentName,C.ID InstrumentID,'J000' BusinesArea,E.ID AccountSAP,isnull(C.SAPCustID,'') CustomerCode,
    Z.TrxTypeID,Z.TrxType,Z.InstructionDate,Z.SettlementDate,'TRADITIONAL FUND' FundName,
    B.Amount,'JM' JournalTypeSAP
FROM
Investment Z
    INNER JOIN FundJournal A on Z.Reference = A.Reference and A.status = 2
    INNER JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK and A.status = 2
	INNER JOIN instrument C on B.InstrumentPK = C.instrumentpk and C.status = 2
	INNER JOIN ZSAP_BridgeJournal D on B.FundJournalAccountPK = D.FundJournalAccountPK
	INNER JOIN ZSAP_MS_Account E on D.SAPAccountID = E.ID
	where A.ValueDate = @ParamListDate and A.TrxName = 'transaction' and A.Description like '%T0 BOND%'  and C.InstrumentTypePK = 8 and B.Amount <>0 " + _paramFund + @" 
GROUP BY
    B.FundJournalAccountPK,E.Name,C.ID,E.ID,C.Name,C.SAPCustID,Z.TrxTypeID,Z.TrxType,Z.InstructionDate,Z.SettlementDate,B.Amount 

	union ALL

SELECT
    B.FundJournalAccountPK,case when E.ID in ('11700001') then C.Name else E.Name + ' ' + C.Name   end InstrumentName,C.ID InstrumentID,'J000' BusinesArea,E.ID AccountSAP,isnull(C.SAPCustID,'') CustomerCode,
    ZZ.TrxTypeID,ZZ.TrxType,ZZ.InstructionDate,ZZ.SettlementDate,'TRADITIONAL FUND' FundName,
    B.Amount,'JI' JournalTypeSAP
FROM
Investment ZZ
    INNER JOIN FundJournal A on ZZ.Reference = A.Reference and A.status = 2
    INNER JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK and A.status = 2
	INNER JOIN instrument C on B.InstrumentPK = C.instrumentpk and C.status = 2
	INNER JOIN ZSAP_BridgeJournal D on B.FundJournalAccountPK = D.FundJournalAccountPK
	INNER JOIN ZSAP_MS_Account E on D.SAPAccountID = E.ID
	where A.ValueDate = @ParamListDate and A.TrxName = 'transaction' and A.Description like '%T-Settled BOND%'  and C.InstrumentTypePK = 8 and B.Amount <>0 " + _paramFund + @" 
GROUP BY
    B.FundJournalAccountPK,E.Name,C.ID,E.ID,C.Name,C.SAPCustID,ZZ.TrxTypeID,ZZ.TrxType,ZZ.InstructionDate,ZZ.SettlementDate,B.Amount

) A

                            ";

                            cmd.Parameters.AddWithValue("@ParamListDate", _investmentRpt.ValueDateFrom);
                            //cmd.Parameters.AddWithValue("@ParamInstType", _investmentRpt.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LPTIEBA" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LPTIEBA" + "_" + _investmentRpt.ValueDateFrom.ToShortDateString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI EBA");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListingTaspen> rList = new List<InvestmentListingTaspen>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListingTaspen rSingle = new InvestmentListingTaspen();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.FundJournalAccountPK = Convert.ToInt32(dr0["FundJournalAccountPK"]);
                                            rSingle.AccountSAP = dr0["AccountSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountSAP"]);
                                            rSingle.BusinesArea = dr0["BusinesArea"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinesArea"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.CustomerCode = dr0["CustomerCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CustomerCode"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.TrxType = Convert.ToInt32(dr0["TrxType"]);
                                            rSingle.JournalTypeSAP = dr0["JournalTypeSAP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["JournalTypeSAP"]);

                                            
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.TrxTypeID ascending
                                            group r by new { r.TrxTypeID, r.JournalTypeSAP, r.SettlementDate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        //int _startRowDetail = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel = incRowExcel + 4;
                                            //int RowA = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 3;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Dari ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Investasi";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth. ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "Departmen Keuangan";
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Lampiran";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Pembelian KIK EBA";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Instruksi Penjualan KIK EBA";
                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Pembelian KIK EBA";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "Penjualan KIK EBA";
                                            }

                                            incRowExcel = incRowExcel + 4;
                                            if (rsHeader.Key.TrxTypeID == "BUY")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat dilakukan transaksi";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Reference;
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut di atas, dengan ini mohon dapat dilakukan transaksi";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Reference;
                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "pada tanggal " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy") + " " + " dengan rincian sebagai berikut : "; ;

                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;


                                            incRowExcel = incRowExcel + 2;

                                            int RowF = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Emiten";
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Kode Customer";
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Kode Akun";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Business Area";
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;

                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                            //int RowD = incRowExcel;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //ThickBox Border  
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CustomerCode;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccountSAP;
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BusinesArea;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Row(incRowExcel).Height = 30;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;



                                            }



                                            //incRowExcel = incRowExcel + 4;


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian disampaikan, atas perhatian dan kerjasamanya diucapkan terima kasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 7;
                                            worksheet.Cells[incRowExcel, 8].Value = "Jakarta, " + Convert.ToDateTime(rsHeader.Key.SettlementDate).ToString("dd MMMM yyyy");
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 7;
                                            worksheet.Cells[incRowExcel, 8].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Kepala Divisi Investasi";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }



                                        string _rangeA = "A:H" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 11;
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 6;
                                        worksheet.Column(2).Width = 6;
                                        worksheet.Column(3).Width = 4;
                                        worksheet.Column(4).Width = 19;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 26;
                                        //worksheet.Column(9).Width = 30;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_investmentRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }
        }

        public Boolean GenerateReportFundAccounting(string _userID, FundAccountingRpt _FundAccountingRpt)
        {

            //TRIAL BALANCE 
            #region Nav Report
            if (_FundAccountingRpt.ReportName.Equals("Nav Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @" 
                               

                            DECLARE A CURSOR FOR 
                            select FundPK from Fund 
                            where status = 2  " + _paramFund + @"


                            Open A
                            Fetch Next From A
                            Into @FundPK

                            While @@FETCH_STATUS = 0
                            BEGIN    

                            Select @Date Date,ROW,Description,sum(dbo.FGetGroupFundJournalAccountBalanceByFundPK(@Date,A.FundJournalAccountPK,@FundPK)) Amount  From NAVmappingReport A  
                            left join FundJournalAccount B on  A.FundJournalAccountPK = B.FundJournalAccountPK and B.Status	 =  2  
                            Group By ROW,Description
                            order by Row

                            Fetch next From A Into @FundPK
                            END
                            Close A
                            Deallocate A ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NavReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NavReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Nav Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NavReportListing> rList = new List<NavReportListing>();
                                        while (dr0.Read())
                                        {

                                            NavReportListing rSingle = new NavReportListing();
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.Row = Convert.ToInt32(dr0["Row"]);
                                            rSingle.Description = Convert.ToString(dr0["Description"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.Row ascending
                                            group r by new { r.Date, r.CurrencyID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        //incRowExcel = incRowExcel + 1;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 1;
                                            //worksheet.Row(incRowExcel).Height = 30;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Formulir Nomor : ";
                                            //worksheet.Cells[incRowExcel, 2].Value = "X.D.1-1";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Manager Investasi : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_CompanyName();
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Bank Kustodian : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_BankCustodianName(_FundAccountingRpt.FundFrom);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Nama Unit Link : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_FundName(_FundAccountingRpt.FundFrom);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Jenis Unit Link : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_FundType(_FundAccountingRpt.FundFrom);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Tanggal : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Mata Uang : ";
                                            worksheet.Cells[incRowExcel, 2].Value = _host.Get_CurrencyID(_FundAccountingRpt.FundFrom);
                                            incRowExcel = incRowExcel + 2;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[RowB, 1].Style.Font.Bold = true;
                                            worksheet.Cells[RowB, 1].Value = "LAPORAN AKTIVA DAN KEWAJIBAN";
                                            worksheet.Cells[RowB, 2].Style.Font.Bold = true;
                                            worksheet.Cells[RowB, 2].Value = "AMOUNT";
                                            worksheet.Cells[10, 1].Style.Font.Bold = true;
                                            worksheet.Cells[10, 1].Value = "AKTIVA";
                                            worksheet.Cells[23, 1].Style.Font.Bold = true;
                                            worksheet.Cells[23, 1].Value = "KEWAJIBAN";

                                            string _range = "A" + incRowExcel + ":B" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _description = "";
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":B" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail

                                                //if (_description != rsDetail.Description && rsDetail.Amount != 0)
                                                //{
                                                worksheet.Cells[rsDetail.Row, 1].Value = rsDetail.Description;
                                                worksheet.Cells[rsDetail.Row, 2].Value = rsDetail.Amount;
                                                worksheet.Cells[rsDetail.Row, 2].Style.Numberformat.Format = "#,####0.00";
                                                //}

                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;
                                                _description = rsDetail.Description;





                                            }

                                            //decimal _totalAktiva = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 20);
                                            //decimal _totalKewajiban = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 25);


                                            //decimal _subs = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 29);
                                            //decimal _redemp = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 30);
                                            //decimal _retainEarning = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 31);
                                            //decimal _dividen = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 32);
                                            //decimal _realised = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 33);
                                            //decimal _unrealised = _host.Get_AccountBalanceForNav(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo, 34);

                                            decimal _totalAUM = _host.Get_FundAUM(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo);
                                            decimal _totalUnit = _host.Get_FundUnitPosition(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo);
                                            decimal _nav;
                                            if (_totalUnit == 0)
                                            {
                                                _nav = 1000;
                                            }
                                            else
                                            {
                                                _nav = _totalAUM / _totalUnit;
                                            }

                                            //worksheet.Cells[27, 1].Value = "TOTAL AKTIVA BERSIH";
                                            //worksheet.Cells[27, 2].Value = _totalAktiva - _totalKewajiban;
                                            //worksheet.Cells[27, 2].Style.Numberformat.Format = "#,####0";
                                            //worksheet.Cells[33, 2].Value = (_realised);
                                            //worksheet.Cells[33, 2].Style.Numberformat.Format = "#,####0";
                                            //worksheet.Cells[34, 2].Value = (_unrealised);
                                            //worksheet.Cells[34, 2].Style.Numberformat.Format = "#,####0";
                                            //worksheet.Cells[35, 1].Value = "PENDAPATAN INVESTASI BERSIH";
                                            //worksheet.Cells[35, 2].Value = (_totalAktiva - _totalKewajiban) - (_subs + _redemp + _retainEarning + _dividen + _realised + _unrealised);
                                            //worksheet.Cells[35, 2].Style.Numberformat.Format = "#,####0";

                                            //worksheet.Cells[_endRowDetail + 6, 1].Value = "TOTAL SAHAM/UNIT PENYERTAAN DAN LABA/RUGI";
                                            //worksheet.Cells[_endRowDetail + 6, 2].Value = _totalAktiva - _totalKewajiban;
                                            //worksheet.Cells[_endRowDetail + 6, 2].Style.Numberformat.Format = "#,####0.0000";

                                            worksheet.Cells[_endRowDetail + 8, 1].Value = "JUMLAH SAHAM/UNIT PENYERTAAN YANG BEREDAR";
                                            worksheet.Cells[_endRowDetail + 8, 2].Value = _totalUnit;
                                            worksheet.Cells[_endRowDetail + 8, 2].Style.Numberformat.Format = "#,####0.0000";




                                            worksheet.Cells[_endRowDetail + 9, 1].Value = "NILAI AKTIVA BERSIH PER SAHAM/UNIT PENYERTAAN";
                                            worksheet.Cells[_endRowDetail + 9, 2].Value = _nav;
                                            worksheet.Cells[_endRowDetail + 9, 2].Style.Numberformat.Format = "#,####0.0000";

                                            int RowF = _endRowDetail + 7;
                                            int RowH = _endRowDetail + 9;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowH].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowH].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowH].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowH].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowH].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowH].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";

                                            incRowExcel = incRowExcel + 10;

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:B";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 3];
                                        worksheet.Column(3).Width = 1;
                                        worksheet.Column(1).Width = 60;
                                        worksheet.Column(2).AutoFit();

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 NAV REPORT";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Fund Portfolio
            else if (_FundAccountingRpt.ReportName.Equals("Fund Portfolio"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"

                            select FP.InstrumentPK SysNo ,I.BloombergCode NoBilyet,FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
	                        F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,case when I.InstrumentTypePK = 6 then isnull(I.MaturityDate,'') else FP.MaturityDate end MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
	                        FP.ClosePrice ClosePrice
	                        ,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
	                        ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) 
	                        else 0 end AccrualHarian
	                        ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate)
	                        * datediff(day,DATEADD(month, DATEDIFF(month, 0, @ValueDate), 0),@ValueDate )
	                        else FP.InterestPercent end Accrual
                            , case when I.InstrumentTypePK = 1 then 'Equity' else case when I.InstrumentTypePK = 5 then 'Timedeposito' else case when I.InstrumentTypePK = 6 then 'Reksadana' else case when I.InstrumentTypePK in (2,3,13) then 'Bond' else '' end end end end Tipe

	                        ,FP.InterestPercent 
	                        ,FP.MarketValue MarketValue,
	                        sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
	                        case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav  
	                        from fundposition FP   
	                        left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
	                        left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
	                        left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
	                        left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status in (1,2)  
	                        left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType'
	                        where FP.status in (1,2)  and FP.Date = @ValueDate  " + _paramFund + @"
	                        group by FP.InstrumentPK,I.BloombergCode,Fp.AVgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
	                        FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,I.MaturityDate,Fp.MaturityDate,M.DescOne
	                        order by Tipe ,I.ID
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Portfolio");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundPortfolioTaspen> rList = new List<FundPortfolioTaspen>();
                                        while (dr0.Read())
                                        {
                                            FundPortfolioTaspen rSingle = new FundPortfolioTaspen();
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.AvgPrice = Convert.ToDecimal(dr0["AvgPrice"]);
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.CostValue = Convert.ToDecimal(dr0["CostValue"]);
                                            rSingle.ClosePrice = dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.MarketValue = dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]);
                                            rSingle.Unrealised = dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]);
                                            rSingle.PercentOfNav = dr0["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentOfNav"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.PeriodeActual = Convert.ToString(dr0["PeriodeActual"]);
                                            rSingle.AccrualHarian = dr0["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccrualHarian"]);
                                            rSingle.Accrual = dr0["Accrual"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Accrual"]);
                                            rSingle.SysNo = Convert.ToInt32(dr0["SysNo"]);
                                            rSingle.NoBilyet = dr0["NoBilyet"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NoBilyet"]);
                                            rSingle.Tipe = dr0["Tipe"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Tipe"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                orderby r.Tipe, r.FundName, r.InstrumentTypePK, r.Date ascending
                                                group r by new { r.Tipe, r.FundName, r.InstrumentTypeName, r.Date, r.InstrumentTypePK } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "FUND : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "INSTRUMENT TYPE : ";
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "DATE : ";
                                            worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.Date;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                                worksheet.Cells[incRowExcel, 6].Value = "AVG PRICE";
                                                worksheet.Cells[incRowExcel, 4].Value = "BALANCE";
                                                worksheet.Cells[incRowExcel, 5].Value = "MATURITY DATE";
                                                worksheet.Cells[incRowExcel, 7].Value = "COST VALUE";
                                                worksheet.Cells[incRowExcel, 8].Value = "CLOSE PRICE";
                                                worksheet.Cells[incRowExcel, 9].Value = "MARKET VALUE";
                                                worksheet.Cells[incRowExcel, 10].Value = "UNREALISED";
                                                worksheet.Cells[incRowExcel, 11].Value = "INTEREST %";
                                                worksheet.Cells[incRowExcel, 12].Value = "(%) of NAV";

                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 5)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                                worksheet.Cells[incRowExcel, 4].Value = "TOTAL AMOUNT";
                                                worksheet.Cells[incRowExcel, 5].Value = "MATURITY DATE";
                                                worksheet.Cells[incRowExcel, 6].Value = "SysNo";
                                                worksheet.Cells[incRowExcel, 7].Value = "INTEREST %";
                                                worksheet.Cells[incRowExcel, 8].Value = "PERIODE ACCRUAL";
                                                worksheet.Cells[incRowExcel, 9].Value = "ACCRUAL HARIAN";
                                                worksheet.Cells[incRowExcel, 10].Value = "BUNGA YANG DI ACCRUAL";
                                                worksheet.Cells[incRowExcel, 11].Value = "NO BILYET";
                                                worksheet.Cells[incRowExcel, 12].Value = "(%) of NAV";

                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 2 || rsHeader.Key.InstrumentTypePK == 3 || rsHeader.Key.InstrumentTypePK == 13)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                                worksheet.Cells[incRowExcel, 4].Value = "NOMINAL FACE VALUE";
                                                worksheet.Cells[incRowExcel, 5].Value = "MATURITY DATE";
                                                worksheet.Cells[incRowExcel, 6].Value = "AVG COST";
                                                worksheet.Cells[incRowExcel, 7].Value = "COST (IDR)";
                                                //worksheet.Cells[incRowExcel, 8].Value = "TERM OF INTEREST";
                                                worksheet.Cells[incRowExcel, 8].Value = "CLOSE PRICE";
                                                worksheet.Cells[incRowExcel, 9].Value = "MARKET VALUE";
                                                worksheet.Cells[incRowExcel, 10].Value = "UNREALISED";
                                                worksheet.Cells[incRowExcel, 11].Value = "INTEREST %";
                                                worksheet.Cells[incRowExcel, 12].Value = "(%) of NAV";
                                            }

                                            else
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                                worksheet.Cells[incRowExcel, 4].Value = "NOMINAL FACE VALUE";
                                                worksheet.Cells[incRowExcel, 5].Value = "MATURITY DATE";
                                                worksheet.Cells[incRowExcel, 6].Value = "AVG COST";
                                                worksheet.Cells[incRowExcel, 7].Value = "COST (IDR)";
                                                //worksheet.Cells[incRowExcel, 8].Value = "TERM OF INTEREST";
                                                worksheet.Cells[incRowExcel, 8].Value = "CLOSE PRICE";
                                                worksheet.Cells[incRowExcel, 9].Value = "MARKET VALUE";
                                                worksheet.Cells[incRowExcel, 10].Value = "UNREALISED";
                                                worksheet.Cells[incRowExcel, 11].Value = "INTEREST %";
                                                worksheet.Cells[incRowExcel, 12].Value = "(%) of NAV";
                                            }

                                            string _range = "A" + incRowExcel + ":L" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                if (rsDetail.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AvgPrice;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,####0.0000";
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CostValue;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    if (rsHeader.Key.InstrumentTypePK == 6)
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(" + rsDetail.Balance + "*" + rsDetail.ClosePrice + ")";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(" + rsDetail.CostValue + " -I" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.Unrealised;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                                    }
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";


                                                }
                                                else if (rsDetail.InstrumentTypePK == 5)
                                                {

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.SysNo;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.PeriodeActual;
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.AccrualHarian;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Accrual;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.NoBilyet;
                                                }
                                                else if (rsHeader.Key.InstrumentTypePK == 2 || rsHeader.Key.InstrumentTypePK == 3 || rsHeader.Key.InstrumentTypePK == 13)
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AvgPrice;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,####0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CostValue;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 8].Value = rsDetail.Accrual;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,####0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Unrealised;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                }

                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AvgPrice;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,####0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.CostValue;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    //worksheet.Cells[incRowExcel, 8].Value = rsDetail.Accrual;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,####0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Unrealised;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                }

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentOfNav;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,####0.00";
                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;





                                            }

                                            int RowF = incRowExcel - 1;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowB + ":K" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowB + ":L" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16 || rsHeader.Key.InstrumentTypePK == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 5)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();

                                            }
                                            else if (rsHeader.Key.InstrumentTypePK == 2 || rsHeader.Key.InstrumentTypePK == 3 || rsHeader.Key.InstrumentTypePK == 13)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                            }

                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                            }
                                            incRowExcel = incRowExcel + 2;



                                        }

                                        worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        string _rangeDetail = "A:L";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 12;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).Width = 30;
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(12).Width = 15;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND PORTFOLIO";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Accrued Interest Report
            else if (_FundAccountingRpt.ReportName.Equals("Accrued Interest Report"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                                Create Table #A
                                (
                                InstrumentID nvarchar(100),
                                InstrumentName  nvarchar(500),
                                InstrumentTypePK int,
                                MaturityDate datetime,
                                Balance numeric(18,4),
                                LastCoupon datetime,
                                NextCoupon datetime,
                                AcqDate datetime,
                                Tenor int,
                                InterestPercent numeric(18,4),
                                DailyInterest numeric(18,4),
                                AccDays int,
                                TaxExpensePercent numeric(18,4),
                                )


                                Create Table #B
                                (
                                InstrumentID nvarchar(100),
                                InstrumentName  nvarchar(500),
                                InstrumentTypeName nvarchar(50),
                                MaturityDate datetime,
                                Balance numeric(18,4),
                                LastCoupon datetime,
                                NextCoupon datetime,
                                AcqDate datetime,
                                Tenor int,
                                InterestPercent numeric(18,4),
                                DailyInterest numeric(18,4),
                                AccDays int,
                                TaxDays int,
                                InterestAmount numeric(18,4),
                                TaxAmount numeric(18,4),
                                )


                                insert into #A (InstrumentID,InstrumentName,InstrumentTypePK,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,TaxExpensePercent)
                                select B.ID,B.Name,B.InstrumentTypePK,A.MaturityDate,A.Balance,case when B.InstrumentTypePK = 5 then AcqDate else case when B.InstrumentTypePK = 3 and datediff(day,@date,A.MaturityDate) <= 10 then A.AcqDate else dbo.FgetLastCouponDate(@date,A.InstrumentPK) end end LastCoupon,
                                case when B.InstrumentTypePK = 5 then A.MaturityDate else case when datediff(day,dbo.FgetNextCouponDate(@date,A.InstrumentPK),A.MaturityDate) < 10 then A.MaturityDate else dbo.FgetNextCouponDate(@date,A.InstrumentPK) end end NextCoupon,A.AcqDate,0 Tenor,A.InterestPercent,
                                case when B.InstrumentTypePK = 5 then A.Balance * (A.InterestPercent/100)/B.InterestDaysType else A.Balance * (A.InterestPercent/100)/360 end DailyInterest,0 AccDays,A.TaxExpensePercent from FundPosition A 
                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                                where Date = @Date
                                 " + _paramFund + @"
                                  and A.status = 2
                                and B.InstrumentTypePK not in (1,4,16)
                                order by B.ID


                                insert into #B (InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount)
                                select InstrumentID,InstrumentName,B.Name,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate, dbo.[FgetDateDiffCorporateBond](@Date,NextCoupon) Tenor,InterestPercent,DailyInterest,dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) AccDays,
                                DailyInterest * dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) InterestAmount, case when AcqDate > LastCoupon then  dbo.[FgetDateDiffCorporateBond](AcqDate,@Date) else  dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) end TaxDays,
                                case when AcqDate > LastCoupon then (DailyInterest * TaxExpensePercent/100) * dbo.[FgetDateDiffCorporateBond](AcqDate,@Date) else (DailyInterest * TaxExpensePercent/100) * dbo.[FgetDateDiffCorporateBond](LastCoupon,@Date) end TaxAmount
                                from #A A
                                left join InstrumentType B on A.InstrumentTypePK = B.InstrumentTypePK and B.Status = 2
                                where A.InstrumentTypePK not in (1,5)
                                Union all
                                select InstrumentID,InstrumentName,B.Name,MaturityDate,Balance,LastCoupon,NextCoupon,AcqDate, datediff(day,NextCoupon,@Date) Tenor,InterestPercent,DailyInterest,datediff(day,LastCoupon,@Date) AccDays,
                                DailyInterest * datediff(day,LastCoupon,@Date) InterestAmount,  datediff(day,LastCoupon,@Date)  TaxDays,
                                (DailyInterest * TaxExpensePercent/100) * datediff(day,LastCoupon,@Date)  TaxAmount
                                from #A A
                                left join InstrumentType B on A.InstrumentTypePK = B.InstrumentTypePK and B.Status = 2
                                where A.InstrumentTypePK in (5)
                                order by InstrumentID

                                select InstrumentID,InstrumentName,InstrumentTypeName,MaturityDate,Balance,LastCoupon,NextCoupon,
                                AcqDate,Tenor,InterestPercent,DailyInterest,AccDays,InterestAmount,TaxDays,TaxAmount,InterestAmount-TaxAmount NetAmount 
                                from #B order by InstrumentID
                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccruedInterestReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccruedInterestReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccruedInterestReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Accrued Interest Report");

                                        int incRowExcel = 3;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();

                                        worksheet.Cells[incRowExcel, 13].Value = "Print Date ";
                                        worksheet.Cells[incRowExcel, 14].Value = " : ";
                                        worksheet.Cells[incRowExcel, 15].Value = Convert.ToDateTime(_dateTimeNow).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 13, incRowExcel, 15].Style.Font.Bold = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Custodian Bank";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = _host.Get_BankCustodianName(_FundAccountingRpt.FundFrom);

                                        worksheet.Cells[incRowExcel, 13].Value = "Print Time ";
                                        worksheet.Cells[incRowExcel, 14].Value = " : ";
                                        worksheet.Cells[incRowExcel, 15].Value = Convert.ToDateTime(_dateTimeNow).ToString("HH:mm") + " WIB";
                                        worksheet.Cells[incRowExcel, 13, incRowExcel, 15].Style.Font.Bold = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(_FundAccountingRpt.FundFrom);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundType(_FundAccountingRpt.FundFrom);
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Account No";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundSinvestCode(_FundAccountingRpt.FundFrom);
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Period";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                        worksheet.Cells[incRowExcel, 2].Value = " : ";
                                        worksheet.Cells[incRowExcel, 3].Value = "IDR";
                                        incRowExcel++;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccruedInterestReport> rList = new List<AccruedInterestReport>();
                                        while (dr0.Read())
                                        {
                                            AccruedInterestReport rSingle = new AccruedInterestReport();
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]));
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentTypeName"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.LastCoupon = Convert.ToString(dr0["LastCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastCoupon"]));
                                            rSingle.NextCoupon = Convert.ToString(dr0["NextCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NextCoupon"]));
                                            rSingle.AcqDate = Convert.ToString(dr0["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AcqDate"]));
                                            rSingle.Tenor = Convert.ToDecimal(dr0["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Tenor"]));
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.DailyInterest = Convert.ToDecimal(dr0["DailyInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DailyInterest"]));
                                            rSingle.AccDays = Convert.ToDecimal(dr0["AccDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccDays"]));
                                            rSingle.InterestAmount = Convert.ToDecimal(dr0["InterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestAmount"]));
                                            rSingle.TaxDays = Convert.ToDecimal(dr0["TaxDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxDays"]));
                                            rSingle.TaxAmount = Convert.ToDecimal(dr0["TaxAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TaxAmount"]));
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetAmount"]));

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.InstrumentTypeName } into rGroup
                                         select rGroup;


                                        //int incRowExcel = 9;

                                        incRowExcel = incRowExcel + 1;

                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            incRowExcel++;



                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;


                                            if (rsHeader.Key.InstrumentTypeName == "Corporate Bond")
                                            {

                                                worksheet.Row(incRowExcel).Height = 30;
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Securities Code";
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = "Securities Name";
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = "Term of Interest";
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 9].Value = "Tenor";
                                                worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 12].Value = "Interest Rate %";
                                                worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 13].Value = "Daily Interest";
                                                worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 14].Value = "Accrued Days";
                                                worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 15].Value = "Accrued Interest";
                                                worksheet.Cells[incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 16].Value = "Accrued Tax";
                                                worksheet.Cells[incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 17].Value = "Net Accrued Interest";
                                                worksheet.Cells[incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            }

                                            else
                                            {
                                                worksheet.Row(incRowExcel).Height = 30;
                                                worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = "Securities Code";
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = "Securities Name";
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = "Term of Interest";
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 9].Value = "Tenor";
                                                worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 12].Value = "Interest Rate %";
                                                worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 13].Value = "Daily Interest";
                                                worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 14].Value = "Accrued Days";
                                                worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 15].Value = "Accrued Interest";
                                                worksheet.Cells[incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 16].Value = "Accrued Tax";
                                                worksheet.Cells[incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 17].Value = "Net Accrued Interest";
                                                worksheet.Cells[incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 18].Value = "Days";
                                                worksheet.Cells[incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 19].Value = "Total Penerimaan Per Bulan";
                                                worksheet.Cells[incRowExcel, 19].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            }



                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsHeader.Key.InstrumentTypeName == "Corporate Bond")
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.NextCoupon).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    //worksheet.Cells[incRowExcel, 9].Value = rsDetail.AccDays;
                                                    worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 10].Value = " / ";
                                                    //worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Tenor;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.DailyInterest;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.AccDays;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.InterestAmount;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.TaxAmount;
                                                    worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.NetAmount;
                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                }

                                                else
                                                {

                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.NextCoupon).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    //worksheet.Cells[incRowExcel, 9].Value = rsDetail.AccDays;
                                                    worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                                    //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 10].Value = " / ";
                                                    //worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Tenor;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";


                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.DailyInterest;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.AccDays;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.InterestAmount;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.TaxAmount;
                                                    worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.NetAmount;
                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 18].Value = Convert.ToDecimal("31");
                                                    worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                    worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 19].Calculate();

                                                    worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                }


                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            if (rsHeader.Key.InstrumentTypeName == "Corporate Bond")
                                            {
                                                //worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 15].Calculate();
                                                worksheet.Cells[incRowExcel, 16].Calculate();
                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Font.Bold = true;


                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 15].Calculate();
                                                worksheet.Cells[incRowExcel, 16].Calculate();
                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                worksheet.Cells[incRowExcel, 19].Calculate();
                                                worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Font.Bold = true;

                                            }


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 19];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 5;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 50;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 5;
                                        worksheet.Column(10).Width = 5;
                                        worksheet.Column(11).Width = 5;
                                        worksheet.Column(12).Width = 8;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 8;
                                        worksheet.Column(15).Width = 15;
                                        worksheet.Column(16).Width = 15;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 15;
                                        worksheet.Column(19).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 ACCRUED INTEREST REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Portfolio Saham
            else if (_FundAccountingRpt.ReportName.Equals("Portfolio Saham"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And FP.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            cmd.CommandText =
                            @"
                            select FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                            F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,FP.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
                            FP.ClosePrice ClosePrice
                            ,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
                            ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) 
                            else 0 end AccrualHarian
                            ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate)
                            * datediff(day,DATEADD(month, DATEDIFF(month, 0, @ValueDate), 0),@ValueDate )
                            else FP.InterestPercent end Accrual

                            ,FP.InterestPercent 
                            ,FP.MarketValue MarketValue,
                            sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                            case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav  
                            from fundposition FP   
                            left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status = 2   
                            left join Fund F on FP.FundPK = F.FundPK and F.status = 2   
                            left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                            left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status = 2  
                            left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType' and M.Status = 2
                            where FP.status in (1,2)  and FP.Date = @ValueDate and I.instrumenttypePK = 1 " + _paramFund + 
                            @"group by Fp.AVgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                            FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne
                            order by I.ID
                             ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PortfolioSaham" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "PortfolioSaham" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "PortfolioSaham";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Portfolio Saham");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PortfolioSaham> rList = new List<PortfolioSaham>();
                                        while (dr0.Read())
                                        {
                                            PortfolioSaham rSingle = new PortfolioSaham();
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.AvgPrice = Convert.ToDecimal(dr0["AvgPrice"]);
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.CostValue = Convert.ToDecimal(dr0["CostValue"]);
                                            rSingle.ClosePrice = dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.MarketValue = dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]);
                                            rSingle.Unrealised = dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]);
                                            rSingle.PercentOfNav = dr0["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentOfNav"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.PeriodeActual = Convert.ToString(dr0["PeriodeActual"]);
                                            rSingle.AccrualHarian = dr0["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccrualHarian"]);
                                            rSingle.Accrual = dr0["Accrual"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Accrual"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                        from r in rList
                                                        orderby r.FundName, r.InstrumentTypePK, r.Date ascending
                                                        group r by new { r.FundName, r.InstrumentTypeName, r.Date, r.InstrumentTypePK } into rGroup
                                                        select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "FUND : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "INSTRUMENT TYPE : ";
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "DATE : ";
                                            worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.Date;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "NO";
                                                worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                                worksheet.Cells[incRowExcel, 5].Value = "AVG PRICE";
                                                worksheet.Cells[incRowExcel, 4].Value = "BALANCE";
                                                worksheet.Cells[incRowExcel, 6].Value = "COST VALUE";
                                                worksheet.Cells[incRowExcel, 7].Value = "CLOSE PRICE";
                                                worksheet.Cells[incRowExcel, 8].Value = "MARKET VALUE";
                                                worksheet.Cells[incRowExcel, 9].Value = "UNREALISED";
                                                worksheet.Cells[incRowExcel, 10].Value = "(%) of NAV";

                                            }
                                            
                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                if (rsDetail.InstrumentTypePK == 1 || rsDetail.InstrumentTypePK == 4 || rsDetail.InstrumentTypePK == 16)
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.AvgPrice;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,####0.00";
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.CostValue;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Unrealised;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0.00";

                                                }
                                                
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.PercentOfNav;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;





                                            }

                                            int RowF = incRowExcel - 1;
                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                            {
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 8].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                            }
                                            
                                            incRowExcel = incRowExcel + 2;
                                        }


                                        worksheet.Row(incRowExcel).PageBreak = true;

                                        string _rangeDetail = "A:J";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(11).Width = 1;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND PORTFOLIO";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }
                                }
                            }
                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Accrued Interest Deposito
            else if (_FundAccountingRpt.ReportName.Equals("Accrued Interest Deposito"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            cmd.CommandText =
                            @"
                             CREATE TABLE #A
                            (
                            InstrumentPK int,
                            InstrumentID nvarchar(50),
                            NoBilyet nvarchar(50),
                            AcqDate datetime,
                            InterestDays int,
                            DateofMonth datetime,
                            DateLastMont datetime,
                            EndOfMonth datetime,
                            MaturityDate datetime,
                            InterestPercent numeric(18,6),
                            Balance numeric(22,2),
                            Daily  numeric(22,2),
                            --TotalPerBulan  numeric(22,2),
                            DateBeg  int,
                            AcqDateBeg int,
                            BitBreakable int,
                            BankID nvarchar(50),
                            --BungaSebelumnya  numeric(22,2),
                            ValuedateBeg int,
                            DatePreviousMonth datetime,
                            InformationMature nvarchar(50)
                            )

                            insert into #A(InstrumentPK,InstrumentID,NoBilyet,AcqDate,InterestDays,DateofMonth,DateLastMont,EndOfMonth,MaturityDate,InterestPercent,Balance,Daily,DateBeg,AcqDateBeg,BitBreakable,BankID,ValuedateBeg, DatePreviousMonth,InformationMature)
                            select A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,case when A.InterestDaysType in (1,2,3) then 360 else 365 end InterestDays,

                            case when datepart(day,A.AcqDate) > day(eomonth(@ValueDateBeg)) then eomonth(@ValueDateBeg) else 
                            CONVERT(DATETIME,CAST(cast(datepart(month,@ValueDateBeg) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@ValueDateBeg) as nvarchar(4)) as nvarchar(10)),101) end,

                            case when datepart(day,A.AcqDate) > day(eomonth(@ValueDate)) then eomonth(@ValueDate) else 
                            CONVERT(DATETIME,CAST(cast(datepart(month,@ValueDate) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@ValueDate) as nvarchar(4)) as nvarchar(10)),101) end,

                            EOMONTH(@ValueDate,0),A.MaturityDate,A.InterestPercent,A.Balance,
                            --sum((A.Balance * A.InterestPercent/100/D.InterestDays* 0.8)) Daily,
                            case when A.InterestDaysType in (1,2,3) then sum((A.Balance * A.InterestPercent/100/360 * 0.8)) else sum((A.Balance * A.InterestPercent/100/365 * 0.8)) end Daily,

                            --sum(A.Balance * A.InterestPercent/100/D.InterestDays* datediff(day,dateadd(month,-1,@ValueDate),@ValueDate) * 0.8) TotalPerBulan,
                            day(@ValueDateBeg) DateBeg,day(A.AcqDate) AcqDateBeg,
                            A.BitBreakable,isnull(D.ID,'Master Bank No ID') BankID
                            --,case when day(@ValueDateBeg) <= day(A.AcqDate) then 0  else case when @ValueDateBeg <= A.AcqDate then 0 else ((day(@ValueDateBeg) - day(A.AcqDate)) * sum(A.Balance * A.InterestPercent/100/D.InterestDays* 0.8)) end end  BungaSebelumnya --
                            ,case when @ValueDateBeg <= A.AcqDate then 1 else 0 end ValuedateBeg,DATEADD(MONTH, DATEDIFF(MONTH, -1, @ValueDate)-1, -1) DatePreviousMonth,
                            case when DATEPART(MONTH,@ValueDate) = DATEPART(MONTH,A.MaturityDate) and DATEPART(YEAR,@ValueDate) = DATEPART(YEAR,A.MaturityDate) then 'X' else 'L' end InformationMature
                            from FundPosition A
                            left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
                            left join Bank D on B.BankPK = D.BankPK and D.status in (1,2)
                            where 
                            A.date  =
                            (
                            Select max(ValueDate) from endDayTrailsFundPortfolio where
                            valuedate <= @ValueDate  and status = 2
                            ) 

                            and A.status = 2 and C.InstrumentTypePK = 5 " + _paramFund + @"
                             --and  C.BloombergCode = ' BD 026689'
                            group by  A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,A.MaturityDate,A.InterestPercent,A.Balance,A.BitBreakable,D.ID,D.InterestDays,A.InterestDaysType

                            select 
                            --@ValueDate,AcqDate,DateofMonth,DatePreviousMonth,DateLastMont,
                            case when AcqDate < @ValueDate and DATEPART(MONTH,AcqDate) = DATEPART(MONTH,@ValueDate) then 0
                            else case when @ValueDate < DateLastMont then datediff(day,DateofMonth,DatePreviousMonth) * Daily
                            else datediff(day,DateLastMont,@ValueDate) * Daily end end PiutangSebelumnya,
                            case when @ValueDate < DateLastMont then datediff(day,DatePreviousMonth,@ValueDate) * Daily else datediff(day,DateLastMont,@ValueDate) * Daily end PiutangBerjalan , 
                            case when (AcqDate <= @ValueDate and DATEPART(MONTH,AcqDate) = DATEPART(MONTH,@ValueDate)) then datediff(day,AcqDate,@ValueDate) * Daily
                            else datediff(day,DateofMonth,@ValueDate) * Daily end TotalDeposito ,
                            * from #A
                             ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@ValueDateBeg", _FundAccountingRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccruedInterestDeposito" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccruedInterestDeposito" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccruedInterestDeposito";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Accrued Interest Deposito");

                                        int incRowExcel = 1;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT ACCRUED DEPOSITO";
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd MMMM yyyy"); ;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT";
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "NO BILYET";
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "ACQ DATE";
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "MATURITY DATE";
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "INTEREST PERCENT";
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "BALANCE";
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "Interest Days";
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "";
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "SysNomber";
                                        worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "ACCRUAL HARIAN";
                                        worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "PIUTANG";
                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Value = "TOTAL HASIL DEPOSITO";
                                        worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccruedInterestDeposito> rList = new List<AccruedInterestDeposito>();
                                        while (dr0.Read())
                                        {
                                            AccruedInterestDeposito rSingle = new AccruedInterestDeposito();
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.AcqDate = Convert.ToString(dr0["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AcqDate"]));
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.DailyInterest = Convert.ToDecimal(dr0["Daily"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Daily"]));
                                            //rSingle.TotalPerBulan = Convert.ToDecimal(dr0["TotalPerBulan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalPerBulan"]));
                                            rSingle.NoBilyet = Convert.ToString(dr0["NoBilyet"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NoBilyet"]));
                                            rSingle.PiutangBerjalan = Convert.ToDecimal(dr0["PiutangBerjalan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PiutangBerjalan"]));
                                            rSingle.DateBeg = Convert.ToInt32(dr0["DateBeg"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["DateBeg"]));
                                            rSingle.AcqDateBeg = Convert.ToInt32(dr0["AcqDateBeg"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["AcqDateBeg"]));
                                            rSingle.DateofMonth = Convert.ToString(dr0["DateofMonth"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DateofMonth"]));
                                            rSingle.EndOfMonth = Convert.ToString(dr0["EndOfMonth"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EndOfMonth"]));
                                            rSingle.BankID = Convert.ToString(dr0["BankID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankID"]));
                                            //rSingle.BungaSebelumnya = Convert.ToDecimal(dr0["BungaSebelumnya"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BungaSebelumnya"]));
                                            rSingle.ValuedateBeg = Convert.ToInt32(dr0["ValuedateBeg"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ValuedateBeg"]));
                                            rSingle.TotalDeposito = Convert.ToDecimal(dr0["TotalDeposito"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalDeposito"]));
                                            rSingle.InterestDays = Convert.ToInt32(dr0["InterestDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["InterestDays"]));
                                            rSingle.InstrumentPK = Convert.ToInt32(dr0["InstrumentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["InstrumentPK"]));
                                            rSingle.InformationMature = Convert.ToString(dr0["InformationMature"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InformationMature"]));
                                            //
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.BankID, r.InstrumentID } into rGroup
                                         select rGroup;




                                        incRowExcel = incRowExcel + 1;

                                        //int _X1 = incRowExcel;
                                        int _A = 0;
                                        int _B = 0;


                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            //incRowExcel++;


                                            if (rsHeader.Key.BankID == "MANDIRI")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "BANK " + rsHeader.Key.BankID;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "BANK " + rsHeader.Key.BankID;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            }


                                            incRowExcel++;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NoBilyet;
                                                worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd MMM yyyy");
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                if (rsDetail.InformationMature == "X")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd MMM yyyy");
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd MMM yyyy");
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.InterestDays;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.InstrumentPK;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.DailyInterest;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Calculate();

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.PiutangBerjalan;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalDeposito;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Calculate();


                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                _endRowDetail = incRowExcel;
                                                _no++;


                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            _A = incRowExcel;


                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;




                                            //incRowExcel = incRowExcel + 1;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }
                                        //  Trx deposito

                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "REKAP DEPOSITO BERJANGKA";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(F" + 6 + ":F" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL PENCAIRAN";
                                        //worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + _A + 3 + ":L" + _B + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Value = _host.Get_TotalPencairanDeposito(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL PIUTANG";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(K" + 6 + ":K" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL HASIL DEPOSITO";
                                        if (_B == 0)
                                        {
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _A + ")/2";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                        }
                                        else
                                        {
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _B + ")/2";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                        }

                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 12;
                                        worksheet.Column(3).Width = 12;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 0;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 18;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 REPORT ACCRUED DEPOSITO";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Accrued Interest Bond
            else if (_FundAccountingRpt.ReportName.Equals("Accrued Interest Bond"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"
                            Select A.BitHTM,B.ID,B.ID + ' - ' + B.Name Name 
                            ,A.Balance FaceAmount,B.MaturityDate,B.InterestPercent
                            ,CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) <= @DateTo THEN dbo.FgetNextCouponDate(@DateTo,A.InstrumentPK) 
                             ELSE CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) = @DateTo THEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) 
                             ELSE dbo.FgetNextCouponDate(@DateTo,A.InstrumentPK) END END LastCoupon
                            ,dbo.FgetNextCouponDate(@DateTo,A.InstrumentPK) NextCouponDate
                            ,A.AvgPrice DonePrice,A.CostValue Principle
                            ,A.AcqDate SettledDate
                            ,A.MarketValue - A.CostValue Unrealized 
                            ,A.Balance * B.InterestPercent / 100 * 0.85 / 365 CouponPerHari
                            --,A.Balance * B.InterestPercent / 100 * 0.85 / 365 * datepart(day,@DateTo) Piutang
                            ,case when A.AcqDate >= @Datefrom then (A.Balance * B.InterestPercent / 100 * 0.85 / 365 * Datediff(day,A.AcqDate,@DateTo)) 
                             else (A.Balance * B.InterestPercent / 100 * 0.85 / 365 *  datepart(day,@DateTo)) end Piutang
                            ,case when A.AcqDate >= @Datefrom then 0 else A.Balance * B.InterestPercent / 100 * 0.85 / 365 * day(EOMONTH(@DateTo)) end TotalHasil
                            ,A.CostValue - A.Balance Premium
                            ,Datediff(day,A.AcqDate,B.MaturityDate) Hari
                            ,(A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate) AmortisasiPerHari
                            -----------------------------------------------
                            ,CASE WHEN c.InstrumentTypePK <> 13 THEN isnull([dbo].[FgetTotalAmortizeEffectiveByDateFromTo]
                            (
                            @Datefrom,@DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0) ELSE  ((A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate) * datepart(day,@DateTo)) * -1 END TotalAmortize
                            -----------------------------------------------
                            ,isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ) + (A.Balance - A.CostValue),0) BookValue, 
                            CASE WHEN C.InstrumentTypePK <> 13 then  (
                            isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0)) ELSE (Datediff(day,A.AcqDate,@DateTo) * ((A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate)) ) END NetAmortisasiDariAwal,
                            A.ClosePrice, A.MarketValue, C.ID InstrumentTypeID,datepart(day,@DateTo) HariSebulan, Datediff(day,A.AcqDate,@DateTo) TotalDate,
                            CASE WHEN C.InstrumentTypePK <> 13 then A.CostValue - A.Balance - isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0) ELSE (A.CostValue - A.Balance) - ((Datediff(day,A.AcqDate,@DateTo) * (A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate))*-1)  END NetAmortisasi,
                            --sebelumnya
                            --CASE WHEN C.InstrumentTypePK <> 13 THEN (A.MarketValue - A.Balance) + isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            --(
                            --@DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            --A.Balance,A.CostValue
                            --),0) ELSE  ((A.MarketValue - A.Balance) + ((Datediff(day,A.AcqDate,@DateTo) * (A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate)))* -1)  END  TotalUnrealized,

                            ---------
                            --sekarang
                            CASE WHEN C.InstrumentTypePK <> 13 THEN A.MarketValue - (A.Balance + (A.CostValue - A.Balance - isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0))) ELSE  A.MarketValue - (A.Balance + ((A.CostValue - A.Balance) -((Datediff(day,A.AcqDate,@DateTo) * (A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate))*-1)))  END  TotalUnrealized,
                            ---------
                            CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) = @DateTo THEN (
                            CASE WHEN A.InterestPaymentType in (7,8,9) THEN (A.Balance * B.InterestPercent / 100 * 0.85 / 365) * 180 
                            ELSE CASE WHEN A.InterestPaymentType in (10,11,12) THEN (A.Balance * B.InterestPercent / 100 * 0.85 / 365) * 90 
                            ELSE (A.Balance * B.InterestPercent / 100 * 0.85 / 365) * 30 END END ) ELSE '0' END CouponAmount,

                            CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) = @DateTo THEN 'X' ELSE 'L' END FlagRecCoupon
                            from FundPosition A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)
                            where
                             A.date  = 
                            (
                            Select max(ValueDate) from endDayTrailsFundPortfolio where
                            valuedate <= @DateTo  and status = 2
                            )


                            and B.InstrumentTypePK not in (1,5,6,8) 
                            and A.status = 2 " + _paramFund + @"
                            order by B.ID "
                            ;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccruedInterestBond" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccruedInterestBond" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccruedInterestBond";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Accrued Interest Bond");

                                        int incRowExcel = 1;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT ACCRUED BOND";
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy"); 
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Cells[incRowExcel, 1].Value = "NAMA";
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "FACE AMOUNT";
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "MATURITY";
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "RATE";
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "PRICE";
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "PRINCIPLE";
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "COUPON DATE";
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "SETTLE DATE";
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "CLOSE PRICE";
                                        worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "PRINCIPLE ENDING";
                                        worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "TOTAL UNREALIZED GAIN/LOSS";
                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 12].Value = "PIUTANG";
                                        worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Value = "COUPON/ HARI";
                                        worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Value = "TOTAL HASIL ";
                                        worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Value = "Premium/Discount";
                                        worksheet.Cells[incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 16].Value = "Hari";
                                        worksheet.Cells[incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 17].Value = "AMORTISASI/HARI";
                                        worksheet.Cells[incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 18].Value = "TOTAL AMORTISASI"; // dari awal sampai bulan ini
                                        worksheet.Cells[incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 19].Value = "NET AMORTISASI";
                                        worksheet.Cells[incRowExcel, 19].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 20].Value = "Total amortisasi dari awal ke Tgl tarik";
                                        worksheet.Cells[incRowExcel, 20].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 21].Value = "TERIMA COUPON";
                                        worksheet.Cells[incRowExcel, 21].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["T" + incRowExcel + ":T" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["T" + incRowExcel + ":T" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["T" + incRowExcel + ":T" + incRowExcel].Merge = true;


                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccruedInterestBond> rList = new List<AccruedInterestBond>();
                                        while (dr0.Read())
                                        {
                                            AccruedInterestBond rSingle = new AccruedInterestBond();
                                            rSingle.BitHTM = Convert.ToDecimal(dr0["BitHTM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BitHTM"]));
                                            rSingle.ID = Convert.ToString(dr0["ID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ID"]));
                                            rSingle.Name = Convert.ToString(dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]));
                                            rSingle.FaceAmount = Convert.ToDecimal(dr0["FaceAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["FaceAmount"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.LastCoupon = Convert.ToString(dr0["LastCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastCoupon"]));
                                            rSingle.NextCouponDate = Convert.ToString(dr0["NextCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NextCouponDate"]));
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]));
                                            rSingle.Principle = Convert.ToDecimal(dr0["Principle"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Principle"]));
                                            rSingle.SettlementDate = Convert.ToString(dr0["SettledDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettledDate"]));
                                            rSingle.Unrealized = Convert.ToDecimal(dr0["Unrealized"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealized"]));
                                            rSingle.CouponPerHari = Convert.ToDecimal(dr0["CouponPerHari"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CouponPerHari"]));
                                            rSingle.Piutang = Convert.ToDecimal(dr0["Piutang"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Piutang"]));
                                            rSingle.TotalHasil = Convert.ToDecimal(dr0["TotalHasil"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalHasil"]));
                                            rSingle.Premium = Convert.ToDecimal(dr0["Premium"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Premium"]));
                                            rSingle.hari = Convert.ToDecimal(dr0["hari"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["hari"]));
                                            rSingle.AmortisasiPerHari = Convert.ToDecimal(dr0["AmortisasiPerHari"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AmortisasiPerHari"]));
                                            rSingle.TotalAmortize = Convert.ToDecimal(dr0["TotalAmortize"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalAmortize"]));
                                            rSingle.BookValue = Convert.ToDecimal(dr0["BookValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BookValue"]));
                                            rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]));
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]));
                                            rSingle.InstrumentTypeID = Convert.ToString(dr0["InstrumentTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentTypeID"]));
                                            rSingle.NetAmortisasi = Convert.ToDecimal(dr0["NetAmortisasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetAmortisasi"]));
                                            rSingle.HariSebulan = Convert.ToDecimal(dr0["HariSebulan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["HariSebulan"]));
                                            rSingle.TotalDate = Convert.ToDecimal(dr0["TotalDate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalDate"]));

                                            rSingle.TotalUnrealized = Convert.ToDecimal(dr0["TotalUnrealized"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalUnrealized"]));
                                            rSingle.NetAmortisasiDariAwal = Convert.ToDecimal(dr0["NetAmortisasiDariAwal"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetAmortisasiDariAwal"]));
                                            rSingle.CouponAmount = Convert.ToDecimal(dr0["CouponAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CouponAmount"]));
                                            rSingle.FlagRecCoupon = Convert.ToString(dr0["FlagRecCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FlagRecCoupon"]));
                                            // 
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.BitHTM ascending
                                         group r by new { r.BitHTM, r.InstrumentTypeID, r.ID } into rGroup
                                         select rGroup;


                                        //int incRowExcel = 9;

                                        incRowExcel++;
                                        int _A = 0;
                                        //int _B = 0;

                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            //incRowExcel++;
                                            if (rsHeader.Key.BitHTM == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "OBLIGASI AFS";
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                                //incRowExcel++;

                                               

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "OBLIGASI HTM";
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            }


                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;



                                            foreach (var rsDetail in rsHeader)
                                            {

                                                if (rsHeader.Key.BitHTM == 0)
                                                {
                                                    if (rsHeader.Key.InstrumentTypeID == "G-BOND")
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }

                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy"); 
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";

                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                        //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                        //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    }
                                                    else if (rsHeader.Key.InstrumentTypeID == "C-BOND")
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                        //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                        //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                    }
                                                    else if (rsHeader.Key.InstrumentTypeID == "SBSN")
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.ID;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + ((rsDetail.TotalDate * rsDetail.AmortisasiPerHari) * -1);
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 18].Value = (rsDetail.AmortisasiPerHari * rsDetail.HariSebulan) * -1;
                                                        //worksheet.Cells[incRowExcel, 18].Calculate();
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Premium - ((rsDetail.TotalDate * rsDetail.AmortisasiPerHari) * -1);
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 20].Value = (rsDetail.TotalDate * rsDetail.AmortisasiPerHari) * -1;
                                                        //worksheet.Cells[incRowExcel, 20].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";



                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                        //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                        //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    }
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    if (rsDetail.FlagRecCoupon == "X")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                    //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                    worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                    worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Calculate();
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                    worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                    worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                    //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Calculate();

                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }




                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            //worksheet.Cells[incRowExcel, 1].Value = "SUB TOTAL";

                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";

                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            worksheet.Cells[incRowExcel, 15].Calculate();
                                            worksheet.Cells[incRowExcel, 17].Calculate();
                                            worksheet.Cells[incRowExcel, 18].Calculate();
                                            worksheet.Cells[incRowExcel, 19].Calculate();
                                            worksheet.Cells[incRowExcel, 20].Calculate();
                                            _A = incRowExcel;

                                            worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;


                                            //incRowExcel ++;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        } // dibawah sini 

                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "REKAP OBLIGASI";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + 6 + ":B" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL PIUTANG";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL AMORTISASI";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(R" + 6 + ":R" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL NET AMORTISASI";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(S" + 6 + ":S" + _A + ")/2";
                                        //if (_B == 0)
                                        //{
                                        //    worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _A + ")/2";
                                        //    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        //    worksheet.Cells[incRowExcel, 2].Calculate();
                                        //}
                                        //else
                                        //{
                                        //    worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _B + ")/2";
                                        //    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        //    worksheet.Cells[incRowExcel, 2].Calculate();
                                        //}
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 21];
                                        worksheet.Column(1).Width = 60;
                                        worksheet.Column(2).Width = 18;
                                        worksheet.Column(3).Width = 12;
                                        worksheet.Column(4).Width = 8;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 12;
                                        worksheet.Column(9).Width = 12;
                                        worksheet.Column(10).Width = 18;
                                        worksheet.Column(11).Width = 18;
                                        worksheet.Column(12).Width = 18;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 18;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 8;
                                        worksheet.Column(17).Width = 12;
                                        worksheet.Column(18).Width = 18;
                                        worksheet.Column(19).Width = 18;
                                        worksheet.Column(20).Width = 18;
                                        worksheet.Column(21).Width = 18;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 REPORT ACCRUED BOND";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Accrued Interest EBA
            else if (_FundAccountingRpt.ReportName.Equals("Accrued Interest EBA"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"
                            Select A.BitHTM,B.ID,B.ID + ' - ' + B.Name Name 
                            ,A.Balance FaceAmount,B.MaturityDate,B.InterestPercent
                            ,CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) <= @DateTo THEN dbo.FgetNextCouponDate(@DateTo,A.InstrumentPK) 
                             ELSE CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) = @DateTo THEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) 
                             ELSE dbo.FgetNextCouponDate(@DateTo,A.InstrumentPK) END END LastCoupon
                            ,dbo.FgetNextCouponDate(@DateTo,A.InstrumentPK) NextCouponDate
                            ,A.AvgPrice DonePrice,A.CostValue Principle
                            ,A.AcqDate SettledDate
                            ,A.MarketValue - A.CostValue Unrealized 
                            ,A.Balance * B.InterestPercent / 100 * 0.85 / 365 CouponPerHari
                            --,A.Balance * B.InterestPercent / 100 * 0.85 / 365 * datepart(day,@DateTo) Piutang
                            ,case when A.AcqDate >= @Datefrom then (A.Balance * B.InterestPercent / 100 * 0.85 / 365 * Datediff(day,A.AcqDate,@DateTo)) 
                             else (A.Balance * B.InterestPercent / 100 * 0.85 / 365 *  datepart(day,@DateTo)) end Piutang
                            ,case when A.AcqDate >= @Datefrom then 0 else A.Balance * B.InterestPercent / 100 * 0.85 / 365 * day(EOMONTH(@DateTo)) end TotalHasil
                            ,A.CostValue - A.Balance Premium
                            ,Datediff(day,A.AcqDate,B.MaturityDate) Hari
                            ,(A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate) AmortisasiPerHari
                            -----------------------------------------------
                            ,CASE WHEN c.InstrumentTypePK <> 13 THEN isnull([dbo].[FgetTotalAmortizeEffectiveByDateFromTo]
                            (
                            @Datefrom,@DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0) ELSE  ((A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate) * datepart(day,@DateTo)) * -1 END TotalAmortize
                            -----------------------------------------------
                            ,isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ) + (A.Balance - A.CostValue),0) BookValue, 
                            CASE WHEN C.InstrumentTypePK <> 13 then  (
                            isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0)) ELSE (Datediff(day,A.AcqDate,@DateTo) * ((A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate)) ) END NetAmortisasiDariAwal,
                            A.ClosePrice, A.MarketValue, C.ID InstrumentTypeID,datepart(day,@DateTo) HariSebulan, Datediff(day,A.AcqDate,@DateTo) TotalDate,
                            CASE WHEN C.InstrumentTypePK <> 13 then A.CostValue - A.Balance - isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0) ELSE (A.CostValue - A.Balance) - ((Datediff(day,A.AcqDate,@DateTo) * (A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate))*-1)  END NetAmortisasi,
                            --sebelumnya
                            --CASE WHEN C.InstrumentTypePK <> 13 THEN (A.MarketValue - A.Balance) + isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            --(
                            --@DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            --A.Balance,A.CostValue
                            --),0) ELSE  ((A.MarketValue - A.Balance) + ((Datediff(day,A.AcqDate,@DateTo) * (A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate)))* -1)  END  TotalUnrealized,

                            ---------
                            --sekarang
                            CASE WHEN C.InstrumentTypePK <> 13 THEN A.MarketValue - (A.Balance + (A.CostValue - A.Balance - isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
                            (
                            @DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
                            A.Balance,A.CostValue
                            ),0))) ELSE  A.MarketValue - (A.Balance + ((A.CostValue - A.Balance) -((Datediff(day,A.AcqDate,@DateTo) * (A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate))*-1)))  END  TotalUnrealized,
                            ---------
                            CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) = @DateTo THEN (
                            CASE WHEN A.InterestPaymentType in (7,8,9) THEN (A.Balance * B.InterestPercent / 100 * 0.85 / 365) * 180 
                            ELSE CASE WHEN A.InterestPaymentType in (10,11,12) THEN (A.Balance * B.InterestPercent / 100 * 0.85 / 365) * 90 
                            ELSE (A.Balance * B.InterestPercent / 100 * 0.85 / 365) * 30 END END ) ELSE '0' END CouponAmount,

                            CASE WHEN dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) = @DateTo THEN 'X' ELSE 'L' END FlagRecCoupon
                            from FundPosition A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)
                            where
                             A.date  = 
                            (
                            Select max(ValueDate) from endDayTrailsFundPortfolio where
                            valuedate <= @DateTo  and status = 2
                            )


                            and B.InstrumentTypePK = 8 
                            and A.status = 2 " + _paramFund + @"
                            order by B.ID "
                            ;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccruedInterestEBA" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccruedInterestEBA" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccruedInterestBond";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Accrued Interest EBA");

                                        int incRowExcel = 1;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT ACCRUED EBA";
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy"); ;
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Cells[incRowExcel, 1].Value = "NAMA";
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "FACE AMOUNT";
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "MATURITY";
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "RATE";
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "PRICE";
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "PRINCIPLE";
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "COUPON DATE";
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "SETTLE DATE";
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "CLOSE PRICE";
                                        worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "PRINCIPLE ENDING";
                                        worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "TOTAL UNREALIZED GAIN/LOSS";
                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 12].Value = "PIUTANG";
                                        worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Value = "COUPON/ HARI";
                                        worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Value = "TOTAL HASIL ";
                                        worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Value = "Premium/Discount";
                                        worksheet.Cells[incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 16].Value = "Hari";
                                        worksheet.Cells[incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 17].Value = "AMORTISASI/HARI";
                                        worksheet.Cells[incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 18].Value = "TOTAL AMORTISASI"; // dari awal sampai bulan ini
                                        worksheet.Cells[incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 19].Value = "NET AMORTISASI";
                                        worksheet.Cells[incRowExcel, 19].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 20].Value = "Total amortisasi dari awal ke Tgl tarik";
                                        worksheet.Cells[incRowExcel, 20].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 21].Value = "TERIMA COUPON";
                                        worksheet.Cells[incRowExcel, 21].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["T" + incRowExcel + ":T" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["T" + incRowExcel + ":T" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["T" + incRowExcel + ":T" + incRowExcel].Merge = true;


                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccruedInterestBond> rList = new List<AccruedInterestBond>();
                                        while (dr0.Read())
                                        {
                                            AccruedInterestBond rSingle = new AccruedInterestBond();
                                            rSingle.BitHTM = Convert.ToDecimal(dr0["BitHTM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BitHTM"]));
                                            rSingle.ID = Convert.ToString(dr0["ID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ID"]));
                                            rSingle.Name = Convert.ToString(dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]));
                                            rSingle.FaceAmount = Convert.ToDecimal(dr0["FaceAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["FaceAmount"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.LastCoupon = Convert.ToString(dr0["LastCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastCoupon"]));
                                            rSingle.NextCouponDate = Convert.ToString(dr0["NextCouponDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NextCouponDate"]));
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]));
                                            rSingle.Principle = Convert.ToDecimal(dr0["Principle"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Principle"]));
                                            rSingle.SettlementDate = Convert.ToString(dr0["SettledDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettledDate"]));
                                            rSingle.Unrealized = Convert.ToDecimal(dr0["Unrealized"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealized"]));
                                            rSingle.CouponPerHari = Convert.ToDecimal(dr0["CouponPerHari"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CouponPerHari"]));
                                            rSingle.Piutang = Convert.ToDecimal(dr0["Piutang"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Piutang"]));
                                            rSingle.TotalHasil = Convert.ToDecimal(dr0["TotalHasil"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalHasil"]));
                                            rSingle.Premium = Convert.ToDecimal(dr0["Premium"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Premium"]));
                                            rSingle.hari = Convert.ToDecimal(dr0["hari"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["hari"]));
                                            rSingle.AmortisasiPerHari = Convert.ToDecimal(dr0["AmortisasiPerHari"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AmortisasiPerHari"]));
                                            rSingle.TotalAmortize = Convert.ToDecimal(dr0["TotalAmortize"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalAmortize"]));
                                            rSingle.BookValue = Convert.ToDecimal(dr0["BookValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BookValue"]));
                                            rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]));
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]));
                                            rSingle.InstrumentTypeID = Convert.ToString(dr0["InstrumentTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentTypeID"]));
                                            rSingle.NetAmortisasi = Convert.ToDecimal(dr0["NetAmortisasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetAmortisasi"]));
                                            rSingle.HariSebulan = Convert.ToDecimal(dr0["HariSebulan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["HariSebulan"]));
                                            rSingle.TotalDate = Convert.ToDecimal(dr0["TotalDate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalDate"]));

                                            rSingle.TotalUnrealized = Convert.ToDecimal(dr0["TotalUnrealized"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalUnrealized"]));
                                            rSingle.NetAmortisasiDariAwal = Convert.ToDecimal(dr0["NetAmortisasiDariAwal"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NetAmortisasiDariAwal"]));
                                            rSingle.CouponAmount = Convert.ToDecimal(dr0["CouponAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CouponAmount"]));
                                            rSingle.FlagRecCoupon = Convert.ToString(dr0["FlagRecCoupon"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FlagRecCoupon"]));
                                            // 
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.BitHTM ascending
                                         group r by new { r.BitHTM, r.InstrumentTypeID, r.ID } into rGroup
                                         select rGroup;


                                        //int incRowExcel = 9;

                                        incRowExcel++;
                                        int _A = 0;
                                        //int _B = 0;

                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            //incRowExcel++;
                                            if (rsHeader.Key.BitHTM == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "EBA AFS";
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                                //incRowExcel++;



                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "EBA HTM";
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            }


                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;



                                            foreach (var rsDetail in rsHeader)
                                            {

                                                if (rsHeader.Key.BitHTM == 0)
                                                {
                                                    if (rsHeader.Key.InstrumentTypeID == "G-BOND" || rsHeader.Key.InstrumentTypeID == "EBA")
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }

                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";

                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                        //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                        //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    }
                                                    else if (rsHeader.Key.InstrumentTypeID == "C-BOND")
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                        //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                        //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                    }
                                                    else if (rsHeader.Key.InstrumentTypeID == "SBSN")
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.ID;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + ((rsDetail.TotalDate * rsDetail.AmortisasiPerHari) * -1);
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 18].Value = (rsDetail.AmortisasiPerHari * rsDetail.HariSebulan) * -1;
                                                        //worksheet.Cells[incRowExcel, 18].Calculate();
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Premium - ((rsDetail.TotalDate * rsDetail.AmortisasiPerHari) * -1);
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 20].Value = (rsDetail.TotalDate * rsDetail.AmortisasiPerHari) * -1;
                                                        //worksheet.Cells[incRowExcel, 20].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";



                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                        if (rsDetail.FlagRecCoupon == "X")
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                        //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                        //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                        //worksheet.Cells[incRowExcel, 19].Calculate();

                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    }
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.FaceAmount;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Principle;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    if (rsDetail.FlagRecCoupon == "X")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.LastCoupon).ToString("dd-MMM-yyyy");
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 11].Value = rsDetail.Unrealized + rsDetail.NetAmortisasi;
                                                    //worksheet.Cells[incRowExcel, 11].Calculate();
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalUnrealized;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Piutang;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.CouponPerHari;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.hari;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.AmortisasiPerHari;
                                                    worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmortize;
                                                    worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Value = rsDetail.Principle - rsDetail.FaceAmount - rsDetail.NetAmortisasi;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.NetAmortisasi;
                                                    worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Calculate();
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.NetAmortisasiDariAwal;
                                                    worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.CouponAmount;
                                                    worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";

                                                    //worksheet.Cells[incRowExcel, 19].Formula = "SUM(M" + incRowExcel + "*R" + incRowExcel + ") *0.8";
                                                    //worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 19].Calculate();

                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }




                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            //worksheet.Cells[incRowExcel, 1].Value = "SUB TOTAL";

                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";

                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            worksheet.Cells[incRowExcel, 15].Calculate();
                                            worksheet.Cells[incRowExcel, 17].Calculate();
                                            worksheet.Cells[incRowExcel, 18].Calculate();
                                            worksheet.Cells[incRowExcel, 19].Calculate();
                                            worksheet.Cells[incRowExcel, 20].Calculate();
                                            _A = incRowExcel;

                                            worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;


                                            //incRowExcel ++;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        } // dibawah sini 

                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "REKAP EBA";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + 6 + ":B" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL PIUTANG";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL AMORTISASI";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(R" + 6 + ":R" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL NET AMORTISASI";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(S" + 6 + ":S" + _A + ")/2";
                                        //if (_B == 0)
                                        //{
                                        //    worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _A + ")/2";
                                        //    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        //    worksheet.Cells[incRowExcel, 2].Calculate();
                                        //}
                                        //else
                                        //{
                                        //    worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _B + ")/2";
                                        //    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        //    worksheet.Cells[incRowExcel, 2].Calculate();
                                        //}
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 21].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":U" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 21];
                                        worksheet.Column(1).Width = 60;
                                        worksheet.Column(2).Width = 18;
                                        worksheet.Column(3).Width = 12;
                                        worksheet.Column(4).Width = 8;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 12;
                                        worksheet.Column(9).Width = 12;
                                        worksheet.Column(10).Width = 18;
                                        worksheet.Column(11).Width = 18;
                                        worksheet.Column(12).Width = 18;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 18;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 8;
                                        worksheet.Column(17).Width = 12;
                                        worksheet.Column(18).Width = 18;
                                        worksheet.Column(19).Width = 18;
                                        worksheet.Column(20).Width = 18;
                                        worksheet.Column(21).Width = 18;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 REPORT ACCRUED EBA";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Posisi Reksadana
            else if (_FundAccountingRpt.ReportName.Equals("Posisi Reksadana"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                                Declare @PeriodPK int

select @PeriodPK = PeriodPK from period where status  = 2 and
@Date between DateFrom and DateTo

Select B.Name Reksadana,isnull(C.Date,'') IssueDate,isnull(C.ExpiredDate,'') MaturityDate,A.AvgPrice CostPrice,isnull(A.ClosePrice,0) ClosePrice
, A.CostValue  BookValue
,isnull(A.MarketValue,0) MarketValue
,isnull(C.InterestPercent,0) ImbalHasil
,isnull(E.SellAmount,0) Penjualan
, isnull(A.MarketValue,0) - isnull(A.CostValue,0)  Unrealised
,case when datepart(MONTH,C.Date) = datepart(MONTH,@Date) and datepart(YEAR,C.Date) = datepart(YEAR,@Date) then (isnull(A.CostValue,0) * C.InterestPercent/100 * Datediff(day,C.Date,@Date)) / C.Totaldays else (isnull(A.CostValue,0) * C.InterestPercent/100 * datepart(day,@Date)) / C.Totaldays end  PiutangImbaHasil
, ''PiutangImbaHasilSell
,isnull(D.ID,'') UnderlineInstrumentID, A.BitBreakable
from FundPosition A
left join instrument B on A.InstrumentPK = B.instrumentPK and B.status in (1,2)
left join ReksadanaInstrument C on A.InstrumentPK = C.ReksadanaPK and C.status in (1,2)
left join Instrument D on C.InstrumentPK = D.InstrumentPK and D.status in (1,2)
left join 
(
Select InstrumentPK,sum(isnull(DoneAmount,0)) SellAmount  from investment where StatusSettlement = 2 and instrumentPK = 6 and trxtype = 2
and ValueDate <= @Date and PeriodPK = @PeriodPK
group by InstrumentPK
		
)E on A.InstrumentPK = E.InstrumentPK
left join Fund F on A.FundPK = F.FundPK and F.status in (1,2)
Where A.Date = 

(
Select max(ValueDate) from endDayTrailsFundPortfolio where
valuedate <= @Date  and status = 2
)

and A.status = 2 " + _paramFund + @"
and B.InstrumentTypePK = 6 "
                                //--and A.InstrumentPK = @InstrumentPK "
                                ;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PosisiReksadana" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "PosisiReksadana" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "PosisiReksadana";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Posisi Reksadana");

                                        int incRowExcel = 1;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "POSISI REKSADANA";
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy"); ;
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "REKSADANA";
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "ASSET UNDERLYINH";
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "PELUNCURAN";
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "JATUH TEMPO";
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "NAV AWAL";
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "NAV AKHIR";
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "BOOK VALUE";
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "IMBAL HASIL";
                                        worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "PENJUALAN";
                                        worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "MARKET VALUE";
                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Value = "UNREALISED";
                                        worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Value = "PIUTANG IMBAL HASIL";
                                        worksheet.Cells[incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Value = "GAIN REKSADANA";
                                        worksheet.Cells[incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Value = "KOREKSI";
                                        worksheet.Cells[incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PosisiReksadana> rList = new List<PosisiReksadana>();
                                        while (dr0.Read())
                                        {
                                            PosisiReksadana rSingle = new PosisiReksadana();
                                            rSingle.Reksadana = Convert.ToString(dr0["Reksadana"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reksadana"]));
                                            rSingle.IssueDate = Convert.ToString(dr0["IssueDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IssueDate"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.CostPrice = Convert.ToDecimal(dr0["CostPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CostPrice"]));
                                            rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]));
                                            rSingle.BookValue = Convert.ToDecimal(dr0["BookValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BookValue"]));
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]));
                                            rSingle.ImbalHasil = Convert.ToDecimal(dr0["ImbalHasil"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ImbalHasil"]));
                                            rSingle.Penjualan = Convert.ToDecimal(dr0["Penjualan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Penjualan"]));
                                            rSingle.Unrealised = Convert.ToDecimal(dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]));
                                            rSingle.PiutangImbaHasil = Convert.ToDecimal(dr0["PiutangImbaHasil"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PiutangImbaHasil"]));
                                            rSingle.UnderlineInstrumentID = Convert.ToString(dr0["UnderlineInstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnderlineInstrumentID"]));
                                            rSingle.BitBreakable = Convert.ToInt32(dr0["BitBreakable"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["BitBreakable"]));
                                            //
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.BitBreakable } into rGroup
                                         select rGroup;


                                        //int incRowExcel = 9;

                                        incRowExcel = incRowExcel + 1;

                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            //incRowExcel++;

                                            //if (rsHeader.Key.BitBreakable == 1)
                                            //{
                                            //    worksheet.Cells[incRowExcel, 1].Value = "REKSADANA AFS";
                                            //    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //    worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            //    worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            //    incRowExcel++;
                                            //}
                                            //else
                                            //{
                                            worksheet.Cells[incRowExcel, 1].Value = "REKSADANA";
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            incRowExcel++;

                                            //}

                                            //incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                if (rsHeader.Key.BitBreakable == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Reksadana;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.UnderlineInstrumentID;
                                                    worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.IssueDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.CostPrice;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.ImbalHasil;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Penjualan;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Unrealised;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.PiutangImbaHasil;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                    //worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                    //worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";



                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Reksadana;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.UnderlineInstrumentID;
                                                    worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.IssueDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.CostPrice;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.ClosePrice;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.BookValue;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.ImbalHasil;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Penjualan;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.MarketValue;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Unrealised;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.PiutangImbaHasil;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 14].Value = rsDetail.TotalHasil;
                                                    //worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 15].Value = rsDetail.Premium;
                                                    //worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";



                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                }





                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();

                                            worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;




                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 65;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 25;
                                        worksheet.Column(15).Width = 10;





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 POSISI REKSADANA";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Transaksi Pencairan Deposito
            else if (_FundAccountingRpt.ReportName.Equals("Transaksi Pencairan Deposito"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            cmd.CommandText =
                            @"
                              CREATE TABLE #A
(
InstrumentPK int,
InstrumentID nvarchar(50),
NoBilyet nvarchar(50),
AcqDate datetime,
DateofMonth datetime,
DateLastMont datetime,
EndOfMonth datetime,
MaturityDate datetime,
InterestPercent numeric(18,6),
Amount numeric(22,2),
Daily  numeric(22,2),
TotalPerBulan  numeric(22,2),
DateBeg  int,
AcqDateBeg int,
BitBreakable int,
BankID nvarchar(50),
BungaSebelumnya  numeric(22,2),
ValuedateBeg int,
DatePreviousMonth datetime
)

insert into #A(InstrumentPK,InstrumentID,NoBilyet,AcqDate,DateofMonth,DateLastMont,EndOfMonth,MaturityDate,InterestPercent,Amount,Daily,TotalPerBulan,DateBeg,AcqDateBeg,BitBreakable,BankID,BungaSebelumnya,ValuedateBeg, DatePreviousMonth)
select A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,

case when datepart(day,A.AcqDate) > day(eomonth(@ValueDateBeg)) then eomonth(@ValueDateBeg) else 
CONVERT(DATETIME,CAST(cast(datepart(month,@ValueDateBeg) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@ValueDateBeg) as nvarchar(4)) as nvarchar(10)),101) end,

case when datepart(day,A.AcqDate) > day(eomonth(@ValueDate)) then eomonth(@ValueDate) else 
CONVERT(DATETIME,CAST(cast(datepart(month,@ValueDate) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@ValueDate) as nvarchar(4)) as nvarchar(10)),101) end,

EOMONTH(@ValueDate,0),A.MaturityDate,A.InterestPercent,A.Amount,
sum(A.Amount * A.InterestPercent/100/C.InterestDaysType* 0.8) Daily,
sum(A.Amount * A.InterestPercent/100/C.InterestDaysType* datediff(day,dateadd(month,-1,@ValueDate),@ValueDate) * 0.8) TotalPerBulan,day(@ValueDateBeg) DateBeg,day(A.AcqDate) AcqDateBeg,
A.BitBreakable,isnull(D.ID,'Master Bank No ID') BankID
,case when day(@ValueDateBeg) <= day(A.AcqDate) then 0  else case when @ValueDateBeg <= A.AcqDate then 0 else ((day(@ValueDateBeg) - day(A.AcqDate)) * sum(A.Amount * A.InterestPercent/100/C.InterestDaysType* 0.8)) end end  BungaSebelumnya --
,case when @ValueDateBeg <= A.AcqDate then 1 else 0 end ValuedateBeg,DATEADD(MONTH, DATEDIFF(MONTH, -1, @ValueDate)-1, -1) DatePreviousMonth
from Investment A
left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
left join Bank D on B.BankPK = D.BankPK and D.status in (1,2)
where A.ValueDate between @ValueDateBeg+1 and @ValueDate and A.StatusSettlement = 2 and C.InstrumentTypePK = 5 " + _paramFund + @"
and A.TrxType = 2
group by  A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,A.MaturityDate,A.InterestPercent,A.Amount,A.BitBreakable,D.ID

select 
--@ValueDate,AcqDate,DateofMonth,DatePreviousMonth,DateLastMont,
case when AcqDate < @ValueDate and DATEPART(MONTH,AcqDate) = DATEPART(MONTH,@ValueDate) then 0
else case when @ValueDate < DateLastMont then datediff(day,DateofMonth,DatePreviousMonth) * Daily
else datediff(day,DateLastMont,@ValueDate) * Daily end end PiutangSebelumnya,case when @ValueDate < DateLastMont then datediff(day,DatePreviousMonth,@ValueDate) * Daily
else datediff(day,DateLastMont,@ValueDate) * Daily end PiutangBerjalan , 
case when (AcqDate <= @ValueDate and DATEPART(MONTH,AcqDate) = DATEPART(MONTH,@ValueDate)) then datediff(day,AcqDate,@ValueDate) * Daily
else datediff(day,DateofMonth,@ValueDate) * Daily end TotalDeposito ,
* from #A
                             ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@ValueDateBeg", _FundAccountingRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransaksiPencairanDeposito" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransaksiPencairanDeposito" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "TransaksiPencairanDeposito";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Transaksi Pencairan Deposito");

                                        int incRowExcel = 1;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT PENCAIRAN DEPOSITO";
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd MMMM yyyy"); ;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT";
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "NO BILYET";
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "ACQ DATE";
                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "MATURITY DATE";
                                        worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "INTEREST PERCENT";
                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "BALANCE";
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "";
                                        worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "";
                                        worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "";
                                        worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "ACCRUAL HARIAN";
                                        worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "PIUTANG";
                                        worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Value = "TOTAL HASIL DEPOSITO";
                                        worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccruedInterestDeposito> rList = new List<AccruedInterestDeposito>();
                                        while (dr0.Read())
                                        {
                                            AccruedInterestDeposito rSingle = new AccruedInterestDeposito();
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]));
                                            rSingle.AcqDate = Convert.ToString(dr0["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AcqDate"]));
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.DailyInterest = Convert.ToDecimal(dr0["Daily"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Daily"]));
                                            rSingle.TotalPerBulan = Convert.ToDecimal(dr0["TotalPerBulan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalPerBulan"]));
                                            rSingle.NoBilyet = Convert.ToString(dr0["NoBilyet"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NoBilyet"]));
                                            rSingle.PiutangBerjalan = Convert.ToDecimal(dr0["PiutangBerjalan"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PiutangBerjalan"]));
                                            rSingle.DateBeg = Convert.ToInt32(dr0["DateBeg"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["DateBeg"]));
                                            rSingle.AcqDateBeg = Convert.ToInt32(dr0["AcqDateBeg"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["AcqDateBeg"]));
                                            rSingle.DateofMonth = Convert.ToString(dr0["DateofMonth"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DateofMonth"]));
                                            rSingle.EndOfMonth = Convert.ToString(dr0["EndOfMonth"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EndOfMonth"]));
                                            rSingle.BankID = Convert.ToString(dr0["BankID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankID"]));
                                            rSingle.BungaSebelumnya = Convert.ToDecimal(dr0["BungaSebelumnya"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BungaSebelumnya"]));
                                            rSingle.ValuedateBeg = Convert.ToInt32(dr0["ValuedateBeg"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ValuedateBeg"]));
                                            rSingle.TotalDeposito = Convert.ToDecimal(dr0["TotalDeposito"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalDeposito"]));
                                            //
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.BankID, r.InstrumentID } into rGroup
                                         select rGroup;




                                        incRowExcel = incRowExcel + 1;

                                        //int _X1 = incRowExcel;
                                        int _A = 0;
                                        int _B = 0;


                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            //incRowExcel++;


                                            if (rsHeader.Key.BankID == "MANDIRI")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "BANK " + rsHeader.Key.BankID;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "BANK " + rsHeader.Key.BankID;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            }


                                            incRowExcel++;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NoBilyet;
                                                worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd MMM yyyy");
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd MMM yyyy");
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 7].Value = rsDetail.TotalPerBulan;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.BungaSebelumnya;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.DailyInterest;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Calculate();

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.PiutangBerjalan;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalDeposito;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Calculate();


                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;




                                                _endRowDetail = incRowExcel;
                                                _no++;


                                                incRowExcel++;

                                            }

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            _A = incRowExcel;


                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;




                                            //incRowExcel = incRowExcel + 1;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }
                                        //  Trx deposito

                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;

                                        //worksheet.Cells[incRowExcel, 1].Value = "REKAP DEPOSITO BERJANGKA";
                                        //worksheet.Cells[incRowExcel, 2].Formula = "SUM(F" + 6 + ":F" + _A + ")/2";
                                        //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 2].Calculate();
                                        //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        //worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL PENCAIRAN";
                                        //worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + _A + 3 + ":L" + _B + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Value = _host.Get_TotalPencairanDeposito(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL PIUTANG";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(K" + 6 + ":K" + _A + ")/2";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL HASIL DEPOSITO";
                                        if (_B == 0)
                                        {
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _A + ")/2";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                        }
                                        else
                                        {
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(L" + 6 + ":L" + _B + ")/2";
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                        }

                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 12;
                                        worksheet.Column(3).Width = 12;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 0;
                                        worksheet.Column(8).Width = 0;
                                        worksheet.Column(9).Width = 0;
                                        worksheet.Column(10).Width = 18;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 REPORT PENCAIRAN DEPOSITO";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Report Rekap Investasi
            else if (_FundAccountingRpt.ReportName.Equals("Report Rekap Investasi"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            cmd.CommandText =

                            @"Declare @ValueDateBeg datetime
set @ValueDateBeg =  CONVERT(varchar,dateadd(d,-(day(@DateTo)),@DateTo),106)


Declare @PeriodPK int

select @PeriodPK = PeriodPK from period where status  = 2 and
@DateTo between DateFrom and DateTo

declare @RealisedEquity int
select @RealisedEquity = RealisedEquity from FundAccountingSetup where status in (1,2)


CREATE TABLE #Deposito
(
InstrumentPK int,
InstrumentID nvarchar(50),
NoBilyet nvarchar(50),
AcqDate datetime,
InterestDays int,
DateofMonth datetime,
DateLastMont datetime,
EndOfMonth datetime,
MaturityDate datetime,
InterestPercent numeric(18,6),
Balance numeric(22,2),
Daily  numeric(22,2),
DateBeg  int,
AcqDateBeg int,
BitBreakable int,
BankID nvarchar(50),
ValuedateBeg int,
DatePreviousMonth datetime
)

insert into #Deposito(InstrumentPK,InstrumentID,NoBilyet,AcqDate,InterestDays,DateofMonth,DateLastMont,EndOfMonth,MaturityDate,InterestPercent,Balance,Daily,DateBeg,AcqDateBeg,BitBreakable,BankID,ValuedateBeg, DatePreviousMonth)
select A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,case when A.InterestDaysType in (1,2,3) then 360 else 365 end InterestDays,

case when datepart(day,A.AcqDate) > day(eomonth(@ValueDateBeg)) then eomonth(@ValueDateBeg) else 
CONVERT(DATETIME,CAST(cast(datepart(month,@ValueDateBeg) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@ValueDateBeg) as nvarchar(4)) as nvarchar(10)),101) end,

case when datepart(day,A.AcqDate) > day(eomonth(@DateTo)) then eomonth(@DateTo) else 
CONVERT(DATETIME,CAST(cast(datepart(month,@DateTo) as nvarchar(2)) + '/' + cast(datepart(day,A.AcqDate) as nvarchar(2)) + '/' + cast(datepart(year,@DateTo) as nvarchar(4)) as nvarchar(10)),101) end,

EOMONTH(@DateTo,0),A.MaturityDate,A.InterestPercent,A.Balance,
case when A.InterestDaysType in (1,2,3) then sum((A.Balance * A.InterestPercent/100/360 * 0.8)) else sum((A.Balance * A.InterestPercent/100/365 * 0.8)) end Daily,

day(@ValueDateBeg) DateBeg,day(A.AcqDate) AcqDateBeg,
A.BitBreakable,isnull(D.ID,'Master Bank No ID') BankID
,case when @ValueDateBeg <= A.AcqDate then 1 else 0 end ValuedateBeg,DATEADD(MONTH, DATEDIFF(MONTH, -1, @DateTo)-1, -1) DatePreviousMonth
from FundPosition A
left join BankBranch B on A.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2)
left join Bank D on B.BankPK = D.BankPK and D.status in (1,2)
where 
A.date  =
(
Select max(ValueDate) from endDayTrailsFundPortfolio where
valuedate <= @DateTo  and status = 2
)  

and A.status = 2 and C.InstrumentTypePK = 5 
" + _paramFund + @"
group by  A.InstrumentPK,B.ID,C.BloombergCode,A.AcqDate,A.MaturityDate,A.InterestPercent,A.Balance,A.BitBreakable,D.ID,D.InterestDays,A.InterestDaysType



Declare @Rekap table
(
DepositoBerjangka numeric(22,2),Obligasi numeric(22,2),Reksadana numeric(22,2),KontrakPengelolaanDanaKPD numeric(22,2),Saham numeric(22,2),
PenyertaanLangsung numeric(22,2),PenjualanObligasi numeric(22,2),PenjualanReksadana numeric(22,2),
KoreksiReksadana numeric(22,2),KoreksiObligasi numeric(22,2),KoreksiDeposito numeric(22,2),
Amortisasi numeric(22,2),Deviden numeric(22,2),OCIobligasi numeric(22,2),OCIreksadana numeric(22,2),OCIsaham numeric(22,2),
PremiumDisconOBLIGASI numeric(22,2),LRpelepasanSahamUNITLINK numeric(22,2),
TotalHasilDepositoBerjangka numeric(22,2),TotalHasilObligasi numeric(22,2),TotalHasilReksadana numeric(22,2),TotalHasilSaham numeric(22,2)
)

insert into @Rekap

-- DEPOSITO
select sum(Balance) Balance,0,0,0,0,
0,0,0,
0,0,0,
0,0,0,0,0,
0,0,
sum(case when (AcqDate <= @DateTo and DATEPART(MONTH,AcqDate) = DATEPART(MONTH,@DateTo)) then datediff(day,AcqDate,@DateTo) * Daily
else datediff(day,DateofMonth,@DateTo) * Daily end) TotalDeposito,0,0,0  from #Deposito

union all

-- BOND
select 0,sum(B.Balance) Balance,0,0,0,
0,0,0,
0,0,0,
sum(B.NetAmortisasi) NetAmortisasi,0,sum(B.Unrealised) Unrealised,0,0,
0,0,
0,sum(B.Piutang) Piutang,0,0  from 
(
select sum(A.FaceAmount) Balance,case when A.InstrumentTypePK in (13) then sum(A.Unrealized + ((A.TotalDate * A.AmortisasiPerHari) * -1)) else sum(A.Unrealized + A.NetAmortisasi) end Unrealised,
sum(A.Piutang) Piutang,
case when A.InstrumentTypePK in (13) then sum(A.Premium - ((A.TotalDate * A.AmortisasiPerHari) * -1))  else sum(A.Principle - A.FaceAmount - A.NetAmortisasi) end NetAmortisasi
 from 
(
Select C.InstrumentTypePK,A.BitHTM,B.ID,B.ID + ' - ' + B.Name Name 
,A.Balance FaceAmount,B.MaturityDate,B.InterestPercent
,dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) LastCoupon
,dbo.FgetNextCouponDate(@DateTo,A.InstrumentPK) NextCouponDate
,A.AvgPrice DonePrice,A.CostValue Principle
,A.AcqDate SettledDate
,A.MarketValue - A.CostValue Unrealized 
,A.Balance * B.InterestPercent / 100 * 0.85 / 365 CouponPerHari
,case when A.AcqDate >= @Datefrom then (A.Balance * B.InterestPercent / 100 * 0.85 / 365 * Datediff(day,A.AcqDate,@DateTo)) 
 else (A.Balance * B.InterestPercent / 100 * 0.85 / 365 *  datepart(day,@DateTo)) end Piutang
--,A.Balance * B.InterestPercent / 100 * 0.85 / 365 * datepart(day,@DateTo) Piutang
,A.Balance * B.InterestPercent / 100 * 0.85 / 365 * day(EOMONTH(@DateTo)) TotalHasil
,A.CostValue - A.Balance Premium
,Datediff(day,A.AcqDate,B.MaturityDate) Hari
,(A.Balance - A.CostValue) / Datediff(day,A.AcqDate,B.MaturityDate) AmortisasiPerHari
,isnull([dbo].[FgetTotalAmortizeEffectiveByDateFromTo]
(
@Datefrom,@DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
A.Balance,A.CostValue
),0) TotalAmortize
,isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
(
@DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
A.Balance,A.CostValue
) + (A.Balance - A.CostValue),0) BookValue, 
isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
(
@DateTo,A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
A.Balance,A.CostValue
),0) NetAmortisasi,
A.ClosePrice, A.MarketValue, C.ID InstrumentTypeID,datepart(day,@DateTo) HariSebulan, Datediff(day,A.AcqDate,@DateTo) TotalDate
from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)
where 
A.date  =
(
Select max(ValueDate) from endDayTrailsFundPortfolio where
valuedate <= @DateTo  and status = 2
)  
and B.InstrumentTypePK not in (1,5,6) 
and A.status = 2
" + _paramFund + @"
) A
Group by A.InstrumentTypePK
) B 

union all


-- REKSADANA
Select 0,0,sum(A.CostValue) Balance,0,0,
0,0,0,
0,0,0,
0,0,0,sum( isnull(A.MarketValue,0) - isnull(A.CostValue,0))  Unrealised,0,
0,0,
0,0,isnull(sum((isnull(A.CostValue,0) * C.InterestPercent/100 * datepart(day,@DateTo)) / C.Totaldays),0) PiutangImbaHasil,0
from FundPosition A
left join instrument B on A.InstrumentPK = B.instrumentPK and B.status in (1,2)
left join ReksadanaInstrument C on A.InstrumentPK = C.ReksadanaPK and C.status in (1,2)
left join Instrument D on C.InstrumentPK = D.InstrumentPK and D.status in (1,2)
left join 
(
Select InstrumentPK,sum(isnull(DoneAmount,0)) SellAmount  from investment where StatusSettlement = 2 and instrumentPK = 6 and trxtype = 2
and ValueDate <= @DateTo and PeriodPK = @PeriodPK
group by InstrumentPK
		
)E on A.InstrumentPK = E.InstrumentPK
left join Fund F on A.FundPK = F.FundPK and F.status in (1,2)
Where 
A.date  =
(
Select max(ValueDate) from endDayTrailsFundPortfolio where
valuedate <= @DateTo  and status = 2
)  
and A.status = 2 
" + _paramFund + @"
and B.InstrumentTypePK = 6

union all

-- EQUITY 
select 0,0,0,0,sum(Balance) Balance,
0,0,0,
0,0,0,
0,0,0,0, sum(Unrealised) Unrealised,
0,0,
0,0,0,sum(Realised) Realised from (
select sum(Balance) Balance, sum(A.MarketValue - A.CostValue) Unrealised,0 Realised from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
where B.InstrumentTypePK in (1,4,16) and A.status = 2 and Date = @DateTo " + _paramFund + @"
union all
select 0,0,sum(BaseDebit-BaseCredit) * -1 Realised from FundJournalDetail A
left join FundJournal B on A.FundJournalPK = B.FundJournalPK and B.status = 2
where B.Posted = 1 and B.Reversed = 0 and ValueDate between @Datefrom and @DateTo and FundJournalAccountPk = @RealisedEquity " + _paramFund + @"
) A


select sum(DepositoBerjangka) DepositoBerjangka,sum(Obligasi) Obligasi ,sum(Reksadana) Reksadana ,
sum(KontrakPengelolaanDanaKPD) KontrakPengelolaanDanaKPD ,sum(Saham) Saham ,
sum(PenyertaanLangsung) PenyertaanLangsung ,sum(PenjualanObligasi) PenjualanObligasi ,sum(PenjualanReksadana) PenjualanReksadana ,
sum(KoreksiReksadana) KoreksiReksadana ,sum(KoreksiObligasi) KoreksiObligasi ,sum(KoreksiDeposito) KoreksiDeposito ,
sum(Amortisasi) Amortisasi ,sum(Deviden) Deviden ,
sum(OCIobligasi) OCIobligasi ,sum(OCIreksadana) OCIreksadana ,sum(OCIsaham) OCIsaham ,
sum(PremiumDisconOBLIGASI) PremiumDisconOBLIGASI ,sum(LRpelepasanSahamUNITLINK) LRpelepasanSahamUNITLINK ,
sum(TotalHasilDepositoBerjangka) TotalHasilDepositoBerjangka ,sum(TotalHasilObligasi) TotalHasilObligasi ,sum(TotalHasilReksadana) TotalHasilReksadana ,sum(TotalHasilSaham) TotalHasilSaham 
 from @Rekap

 ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportRekapInvestasi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportRekapInvestasi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportRekapInvestasi";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ReportRekapInvestasi");

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportRekapInvestasi> rList = new List<ReportRekapInvestasi>();
                                        while (dr0.Read())
                                        {
                                            ReportRekapInvestasi rSingle = new ReportRekapInvestasi();
                                            rSingle.DepositoBerjangka = dr0["DepositoBerjangka"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DepositoBerjangka"]);
                                            rSingle.Obligasi = dr0["Obligasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Obligasi"]);
                                            rSingle.Reksadana = dr0["Reksadana"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Reksadana"]);
                                            rSingle.KontrakPengelolaanDanaKPD = dr0["KontrakPengelolaanDanaKPD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KontrakPengelolaanDanaKPD"]);
                                            rSingle.Saham = dr0["Saham"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Saham"]);
                                            rSingle.PenyertaanLangsung = dr0["PenyertaanLangsung"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PenyertaanLangsung"]);
                                            rSingle.PenjualanObligasi = dr0["PenjualanObligasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PenjualanObligasi"]);
                                            rSingle.PenjualanReksadana = dr0["PenjualanReksadana"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PenjualanReksadana"]);
                                            rSingle.KoreksiReksadana = dr0["KoreksiReksadana"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KoreksiReksadana"]);
                                            rSingle.KoreksiObligasi = dr0["KoreksiObligasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KoreksiObligasi"]);
                                            rSingle.KoreksiDeposito = dr0["KoreksiDeposito"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KoreksiDeposito"]);
                                            rSingle.Amortisasi = dr0["Amortisasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amortisasi"]);
                                            rSingle.Deviden = dr0["Deviden"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Deviden"]);
                                            rSingle.OCIobligasi = dr0["OCIobligasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OCIobligasi"]);
                                            rSingle.OCIreksadana = dr0["OCIreksadana"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OCIreksadana"]);
                                            rSingle.OCIsaham = dr0["OCIsaham"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OCIsaham"]);
                                            rSingle.PremiumDisconOBLIGASI = dr0["PremiumDisconOBLIGASI"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PremiumDisconOBLIGASI"]);
                                            rSingle.LRpelepasanSahamUNITLINK = dr0["LRpelepasanSahamUNITLINK"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["LRpelepasanSahamUNITLINK"]);
                                            rSingle.TotalHasilDepositoBerjangka = dr0["TotalHasilDepositoBerjangka"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalHasilDepositoBerjangka"]);
                                            rSingle.TotalHasilObligasi = dr0["TotalHasilObligasi"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalHasilObligasi"]);
                                            rSingle.TotalHasilReksadana = dr0["TotalHasilReksadana"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalHasilReksadana"]);
                                            rSingle.TotalHasilSaham = dr0["TotalHasilSaham"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalHasilSaham"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "";


                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "JENIS INVESTASI";
                                            worksheet.Cells[incRowExcel, 3].Value = "TOTAL INVESTASI";
                                            worksheet.Cells[incRowExcel, 4].Value = "TOTAL HASIL";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = "1";
                                                worksheet.Cells[incRowExcel, 2].Value = "Deposito Berjangka";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DepositoBerjangka;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalHasilDepositoBerjangka;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "2";
                                                worksheet.Cells[incRowExcel, 2].Value = "Obligasi";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Obligasi;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalHasilObligasi;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "3";
                                                worksheet.Cells[incRowExcel, 2].Value = "Reksadana";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reksadana;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalHasilReksadana;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "4";
                                                worksheet.Cells[incRowExcel, 2].Value = "Kontrak Pengelolaan Dana (KPD)";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.KontrakPengelolaanDanaKPD;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "5";
                                                worksheet.Cells[incRowExcel, 2].Value = "Saham";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Saham;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalHasilSaham;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "6";
                                                worksheet.Cells[incRowExcel, 2].Value = "Penyertaan Langsung";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.PenyertaanLangsung;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "7";
                                                worksheet.Cells[incRowExcel, 2].Value = "Penjualan Obligasi";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.PenjualanObligasi;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "8";
                                                worksheet.Cells[incRowExcel, 2].Value = "Penjualan Reksadana";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.PenjualanReksadana;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "9";
                                                worksheet.Cells[incRowExcel, 2].Value = "Koreksi Reksadana";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.KoreksiReksadana;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "10";
                                                worksheet.Cells[incRowExcel, 2].Value = "Koreksi Obligasi";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.KoreksiObligasi;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "11";
                                                worksheet.Cells[incRowExcel, 2].Value = "Koreksi Deposito";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.KoreksiDeposito;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "12";
                                                worksheet.Cells[incRowExcel, 2].Value = "AMORTISASI";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Amortisasi;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "13";
                                                worksheet.Cells[incRowExcel, 2].Value = "DEVIDEN";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Deviden;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "14";
                                                worksheet.Cells[incRowExcel, 2].Value = "OCI OBLIGASI";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.OCIobligasi;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "15";
                                                worksheet.Cells[incRowExcel, 2].Value = "OCI REKSADANA";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.OCIreksadana;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "16";
                                                worksheet.Cells[incRowExcel, 2].Value = "OCI SAHAM";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.OCIsaham;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "17";
                                                worksheet.Cells[incRowExcel, 2].Value = "PREMIUM/DISKON OBLIGASI";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.PremiumDisconOBLIGASI;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "18";
                                                worksheet.Cells[incRowExcel, 2].Value = "L/R PELEPASAN SAHAM UNIT LINK";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.LRpelepasanSahamUNITLINK;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;


                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL INVESTASI :";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + first.ToString() + ":C" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + first.ToString() + ":D" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            incRowExcel++;




                                            incRowExcel = incRowExcel + 5;

                                            worksheet.Cells[incRowExcel, 4].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();                                                                 
                                            worksheet.Cells[incRowExcel, 4].Style.Font.UnderLine = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel = incRowExcel + 8;

                                            worksheet.Cells[incRowExcel, 4].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 4].Value = "Finance & Investment Div. Head";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 4];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKAPITULASI POSISI INVESTASI \n " + "&12 PT ASURANSI JIWA TASPEN ";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Laporan OJK
            else if (_FundAccountingRpt.ReportName.Equals("Laporan OJK"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"  

                            Declare @FundPK int
                            Declare @TotalMarketValue numeric(26,6)
                            Declare @ExposureValue numeric(22,8)

                            select @TotalMarketValue = isnull(A.AUM,1) From closeNav A
                            where A.Date = (
	                             select max(A.date) from CloseNAV A where A.date < @Date 
                                 " + _paramFund + @" and A.status = 2
                            ) " + _paramFund + @"
                            and A.status = 2 

                            select @ExposureValue = isnull(sum(A.MaxExposurePercent/100 * @TotalMarketValue),0)
                            from FundExposure A where A.status in (1,2) " + _paramFund + @" and A.Type = 4 and A.Parameter = 1 -- EQUITY


                            select B.ID KodeEmiten,B.Name NamaEmiten,isnull(C.Name,'') SektorEkonomi,F.ID Kategori,A.MarketValue/1000000 Balance,
                            case when A.MarketValue <= @ExposureValue then A.MarketValue/1000000 else @ExposureValue/1000000 end AYD,
                            case when A.MarketValue <= @ExposureValue then A.MarketValue/1000000 else @ExposureValue/1000000 end AYDTahun from FundPosition A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            left join Sector C on B.SectorPK = C.SectorPK and C.Status in (1,2)
                            left join Market D on B.MarketPK = D.MarketPK and D.Status in (1,2)
                            left join InstrumentIndex E on A.InstrumentPK = E.InstrumentPK and E.status in (1,2)
                            left join [Index] F on E.IndexPK = F.IndexPK and F.status in (1,2)
                            where A.date  = 
                            (
                            Select max(ValueDate) from endDayTrailsFundPortfolio where
                            valuedate <= @Date  and status = 2
                            ) and A.status = 2 and B.InstrumentTypePK = 1 " + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {

                                    string filePath = Tools.ReportsPath + "LaporanOJK" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "\\11\\" + "11_OJK_Taspen.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets["Rincian 103 Saham"];

                                        List<LaporanOJK> rList = new List<LaporanOJK>();
                                        while (dr0.Read())
                                        {
                                            LaporanOJK rSingle = new LaporanOJK();
                                            rSingle.KodeEmiten = dr0["KodeEmiten"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodeEmiten"]);
                                            rSingle.NamaEmiten = dr0["NamaEmiten"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NamaEmiten"]);
                                            rSingle.SektorEkonomi = dr0["SektorEkonomi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SektorEkonomi"]);
                                            rSingle.Kategori = dr0["Kategori"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Kategori"]);
                                            rSingle.Balance = dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.AYD = dr0["AYD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AYD"]);
                                            rSingle.AYDTahun = dr0["AYDTahun"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AYDTahun"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                           from r in rList
                                           group r by new { r } into rGroup
                                           select rGroup;

                                        int incRowExcel = 16;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            ////area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.KodeEmiten;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NamaEmiten;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.SektorEkonomi;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Kategori;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Balance;
                                                incRowExcel++;
                                            }
                                        }
                                        incRowExcel = incRowExcel + 1;
                                        //------ Sheet ke 2
                                        using (SqlConnection subCon1 = new SqlConnection(Tools.conString))
                                        {
                                            subCon1.Open();
                                            using (SqlCommand subCmd1 = subCon1.CreateCommand())
                                            {
//                                                subCmd1.CommandText = @"
//                                                Declare @FundPK int
//                                                Declare @TotalMarketValue numeric(26,6)
//                                                Declare @ExposureValue numeric(22,8)
//
//                                                select @TotalMarketValue = isnull(A.AUM,1) From closeNav A
//                                                where A.Date = (
//	                                                 select max(A.date) from CloseNAV A where A.date < @Date 
//                                                     " + _paramFund + @" and A.status = 2
//                                                ) " + _paramFund + @"
//                                                and A.status = 2 
//
//                                                select @ExposureValue = isnull(sum(A.MaxExposurePercent/100 * @TotalMarketValue),0)
//                                                from FundExposure A where A.status in (1,2) " + _paramFund + @" and A.Type = 4 and Parameter = 2 -- CORP BOND
//
//
//                                                select B.Name NamaEmiten,isnull(C.Name,'') SektorEkonomi,'SERI B' SeriObligasi,isnull(B.BondRating,'') Peringkat,
//                                                '1' Klaster ,D.ID Kategori,sum(A.MarketValue)/1000000 Balance,
//                                                case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYD,
//                                                case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYDTahun from FundPosition A
//                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
//                                                left join Sector C on B.SectorPK = C.SectorPK and C.Status in (1,2)
//                                                left join Market D on B.MarketPK = D.MarketPK and D.Status in (1,2)
//                                                left join InstrumentIndex E on A.InstrumentPK = E.InstrumentPK and E.status in (1,2)
//                                                left join [Index] F on E.IndexPK = F.IndexPK and F.status in (1,2)
//                                                where A.date = @Date and A.status = 2 and B.InstrumentTypePK = 3 " + _paramFund +
//                                                @"Group By B.Name,C.Name ,B.BondRating,D.ID ";

                                                subCmd1.CommandText = @" 
                                                Declare @FundPK int
                                                Declare @TotalMarketValue numeric(26,6)
                                                Declare @ExposureValue numeric(22,8)

                                                select @TotalMarketValue = isnull(A.AUM,1) From closeNav A
                                                where A.Date = (
                                                select max(A.date) from CloseNAV A where A.date < @Date 
                                                " + _paramFund + @" 
                                                and A.status = 2) 
                                                " + _paramFund + @"
                                                and A.status = 2 

                                                select @ExposureValue = isnull(sum(A.MaxExposurePercent/100 * @TotalMarketValue),0)
                                                from FundExposure A where A.status in (1,2) 
                                                " + _paramFund + @" 
                                                and A.Type = 4 and Parameter = 2 -- CORP BOND


                                                select B.Name NamaEmiten,isnull(C.Name,'') SektorEkonomi,B.Category SeriObligasi,isnull(B.BondRating,'') Peringkat,
                                                '1' Klaster ,D.ID Kategori,sum(A.MarketValue)/1000000 Balance,
                                                case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYD,
                                                case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYDTahun from FundPosition A
                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                left join Sector C on B.SectorPK = C.SectorPK and C.Status in (1,2)
                                                left join Market D on B.MarketPK = D.MarketPK and D.Status in (1,2)
                                                left join InstrumentIndex E on A.InstrumentPK = E.InstrumentPK and E.status in (1,2)
                                                left join [Index] F on E.IndexPK = F.IndexPK and F.status in (1,2)
                                                where 
                                                A.date  = 
                                                (
                                                Select max(ValueDate) from endDayTrailsFundPortfolio where
                                                valuedate <= @Date  and status = 2
                                                )
                                                and A.status = 2 and B.InstrumentTypePK = 3 " + _paramFund + @"
                                                Group By B.Name,C.Name,B.Category ,B.BondRating,D.ID


                                                ";

                                                subCmd1.CommandTimeout = 0;
                                                subCmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                                using (SqlDataReader dr1 = subCmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {
                                                        ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Rincian 104 Obligasi"];

                                                        List<LaporanOJK> rList1 = new List<LaporanOJK>();
                                                        while (dr1.Read())
                                                        {
                                                            LaporanOJK rSingle1 = new LaporanOJK();
                                                            rSingle1.NamaEmiten = dr1["NamaEmiten"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["NamaEmiten"]);
                                                            rSingle1.SektorEkonomi = dr1["SektorEkonomi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["SektorEkonomi"]);
                                                            rSingle1.SeriObligasi = dr1["SeriObligasi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["SeriObligasi"]);
                                                            rSingle1.Peringkat = dr1["Peringkat"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["Peringkat"]);
                                                            rSingle1.Klaster = dr1["Klaster"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["Klaster"]);
                                                            rSingle1.Balance = dr1["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Balance"]);
                                                            rSingle1.AYD = dr1["AYD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AYD"]);
                                                            rSingle1.AYDTahun = dr1["AYDTahun"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AYDTahun"]);
                                                            rList1.Add(rSingle1);

                                                        }


                                                        var QueryByFundID1 =
                                                           from r1 in rList1
                                                           group r1 by new { r1 } into rGroup1
                                                           select rGroup1;

                                                        int incRowExcelB = 16;

                                                        foreach (var rsHeader1 in QueryByFundID1)
                                                        {
                                                            ////area header

                                                            foreach (var rsDetail1 in rsHeader1)
                                                            {
                                                                worksheet1.Cells[incRowExcelB, 5].Value = rsDetail1.NamaEmiten;
                                                                worksheet1.Cells[incRowExcelB, 6].Value = rsDetail1.SektorEkonomi;
                                                                worksheet1.Cells[incRowExcelB, 7].Value = rsDetail1.SeriObligasi;
                                                                worksheet1.Cells[incRowExcelB, 8].Value = rsDetail1.Peringkat;
                                                                worksheet1.Cells[incRowExcelB, 9].Value = rsDetail1.Klaster;
                                                                worksheet1.Cells[incRowExcelB, 10].Value = rsDetail1.Balance;
                                                                worksheet1.Cells[incRowExcelB, 12].Value = rsDetail1.Balance;
                                                                worksheet1.Cells[incRowExcelB, 13].Value = rsDetail1.Balance;
                                                                incRowExcelB++;
                                                            }
                                                        }
                                                        incRowExcelB = incRowExcelB + 1;

                                                        //------- Sheet ke 3 
                                                        using (SqlConnection subCon2 = new SqlConnection(Tools.conString))
                                                        {
                                                            subCon2.Open();
                                                            using (SqlCommand subCmd2 = subCon2.CreateCommand())
                                                            {
//                                                                subCmd2.CommandText = @"
//                                                                Declare @FundPK int
//                                                                Declare @TotalMarketValue numeric(26,6)
//                                                                Declare @ExposureValue numeric(22,8)
//
//                                                                select @TotalMarketValue = isnull(A.AUM,1) From closeNav A
//                                                                where A.Date = (
//                                                                select max(A.date) from CloseNAV A where A.date < @Date 
//                                                                " + _paramFund + @" 
//                                                                and A.status = 2
//                                                                ) 
//                                                                " + _paramFund + @"
//                                                                and A.status = 2 
//
//                                                                select @ExposureValue = isnull(sum(A.MaxExposurePercent/100 * @TotalMarketValue),0)
//                                                                from FundExposure A where A.status in (1,2) 
//                                                                " + _paramFund + @" 
//                                                                and A.Type = 4 and Parameter = 3 -- GOV BOND
//
//                                                                select B.ID KodeEmiten,case when A.BitHTM = 1 then 'Individu' else 'Surat Berharga yang Tersedia untuk Dijual ' end KategoriSurat,
//                                                                case when A.BitHTM = 1 then sum(A.CostValue)/1000000 else
//                                                                sum(A.MarketValue)/1000000 end Balance,
//                                                                case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYD,
//                                                                case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYDTahun from FundPosition A
//                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
//                                                                left join Sector C on B.SectorPK = C.SectorPK and C.Status in (1,2)
//                                                                left join Market D on B.MarketPK = D.MarketPK and D.Status in (1,2)
//                                                                left join InstrumentIndex E on A.InstrumentPK = E.InstrumentPK and E.status in (1,2)
//                                                                left join [Index] F on E.IndexPK = F.IndexPK and F.status in (1,2)
//                                                                where A.date = @Date and A.status = 2 and B.InstrumentTypePK in (2,13)
//                                                                " + _paramFund + @"
//                                                                Group By B.ID,A.BitHTM ";

                                                                subCmd2.CommandText = @"
                                                                Declare @FundPK int
Declare @TotalMarketValue numeric(26,6)
Declare @ExposureValue numeric(22,8)


declare @table table
(
	InstrumentPK int,
	InterestPercent numeric(18,8),
	MaturityDate datetime,
	AvgPrice numeric(18,8),
	Balance numeric(22,4),
	CostValue numeric(22,4),
	AAA bit
)

declare @tableResult table
(
	InstrumentPK int,
	BalanceAmortize numeric(22,4),
	AAA bit
)

insert into @table
select A.InstrumentPK,B.InterestPercent,B.MaturityDate,A.AvgPrice,
A.Balance,A.CostValue,A.BitHTM AAA from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
where 
 
 A.date  = 
(
Select max(ValueDate) from endDayTrailsFundPortfolio where
valuedate <= @Date  and status = 2
)

and A.status = 2 and B.InstrumentTypePK in (2,13)
" + _paramFund + @"

insert into @tableResult
select A.InstrumentPK,
sum(isnull([dbo].[FgetTotalAmortizeFromStartEffectiveByDate]  
(
@Date,A.InstrumentPK,A.InterestPercent,A.MaturityDate,A.AvgPrice,
A.Balance,A.CostValue
),0)),
A.AAA from @table A where A.AAA = 1 --and instrumentPK in (660,656)
group by A.AAA,A.InstrumentPK

select @TotalMarketValue = isnull(A.AUM,1) From closeNav A
where A.Date = (
select max(A.date) from CloseNAV A where A.date < @Date 
" + _paramFund + @" 
and A.status = 2
) 
" + _paramFund + @"
and A.status = 2 

select @ExposureValue = isnull(sum(A.MaxExposurePercent/100 * @TotalMarketValue),0)
from FundExposure A where A.status in (1,2) 
" + _paramFund + @" 
and A.Type = 4 and Parameter = 3 -- GOV BOND

select A.InstrumentPK,B.ID KodeEmiten,case when A.BitHTM = 1 then 'Individu' else 'Surat Berharga yang Tersedia untuk Dijual ' end KategoriSurat,
case when A.BitHTM = 1 then sum(A.CostValue)/1000000 else
sum(A.MarketValue)/1000000 end Balance,
case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYD,
case when sum(A.MarketValue) <= @ExposureValue then sum(A.MarketValue)/1000000 else @ExposureValue/1000000 end AYDTahun
,isnull(G.BalanceAmortize,0)/1000000 BalanceAmortize

from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
left join Sector C on B.SectorPK = C.SectorPK and C.Status in (1,2)
left join Market D on B.MarketPK = D.MarketPK and D.Status in (1,2)
left join InstrumentIndex E on A.InstrumentPK = E.InstrumentPK and E.status in (1,2)
left join [Index] F on E.IndexPK = F.IndexPK and F.status in (1,2)
left join @tableResult G on A.InstrumentPK = G.InstrumentPK
where 

 A.date  = 
(
Select max(ValueDate) from endDayTrailsFundPortfolio where
valuedate <= @Date  and status = 2
)


and A.status = 2 and B.InstrumentTypePK in (2,13)
" + _paramFund + @"
Group By B.ID,A.BitHTM,A.InstrumentPK,isnull(G.BalanceAmortize,0) ";

                                                                subCmd2.CommandTimeout = 0;
                                                                subCmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                                                using (SqlDataReader dr2 = subCmd2.ExecuteReader())
                                                                {
                                                                    if (!dr2.HasRows)
                                                                    {
                                                                        return false;
                                                                    }
                                                                    else
                                                                    {
                                                                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["Rincian 106 SBN"];

                                                                        List<LaporanOJK> rList2 = new List<LaporanOJK>();
                                                                        while (dr2.Read())
                                                                        {
                                                                            LaporanOJK rSingle2 = new LaporanOJK();
                                                                            rSingle2.KodeEmiten = dr2["KodeEmiten"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["KodeEmiten"]);
                                                                            rSingle2.KategoriSurat = dr2["KategoriSurat"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["KategoriSurat"]);
                                                                            rSingle2.Balance = dr2["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["Balance"]);
                                                                            rSingle2.AYD = dr2["AYD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["AYD"]);
                                                                            rSingle2.AYDTahun = dr2["AYDTahun"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["AYDTahun"]);
                                                                            rSingle2.BalanceAmortize = dr2["BalanceAmortize"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["BalanceAmortize"]);
                                                                            rList2.Add(rSingle2);

                                                                        }


                                                                        var QueryByFundID2 =
                                                                           from r2 in rList2
                                                                           group r2 by new { r2.KategoriSurat } into rGroup2
                                                                           select rGroup2;

                                                                        int incRowExcelC = 16;

                                                                        foreach (var rsHeader2 in QueryByFundID2)
                                                                        {
                                                                            ////area header

                                                                            foreach (var rsDetail2 in rsHeader2)
                                                                            {
                                                                                worksheet2.Cells[incRowExcelC, 5].Value = rsDetail2.KodeEmiten;
                                                                                worksheet2.Cells[incRowExcelC, 6].Value = rsDetail2.KategoriSurat;
                                                                                if (rsHeader2.Key.KategoriSurat == "Individu")
                                                                                {
                                                                                    worksheet2.Cells[incRowExcelC, 7].Value = rsDetail2.Balance - rsDetail2.BalanceAmortize;
                                                                                    worksheet2.Cells[incRowExcelC, 7].Calculate();
                                                                                    worksheet2.Cells[incRowExcelC, 9].Value = rsDetail2.Balance - rsDetail2.BalanceAmortize;
                                                                                    worksheet2.Cells[incRowExcelC, 9].Calculate();
                                                                                    worksheet2.Cells[incRowExcelC, 10].Value = rsDetail2.Balance - rsDetail2.BalanceAmortize;
                                                                                    worksheet2.Cells[incRowExcelC, 10].Calculate();
                                                                                }
                                                                                else 
                                                                                {
                                                                                    worksheet2.Cells[incRowExcelC, 7].Value = rsDetail2.Balance;
                                                                                    worksheet2.Cells[incRowExcelC, 9].Value = rsDetail2.Balance;
                                                                                    worksheet2.Cells[incRowExcelC, 10].Value = rsDetail2.Balance;
                                                                                }
                                                                               
                                                                                incRowExcelC++;
                                                                            }
                                                                        }
                                                                        incRowExcelC = incRowExcelC + 1;

                                                                        //------ Sheet ke 4
                                                                        using (SqlConnection subCon3 = new SqlConnection(Tools.conString))
                                                                        {
                                                                            subCon3.Open();
                                                                            using (SqlCommand subCmd3 = subCon3.CreateCommand())
                                                                            {
                                                                                subCmd3.CommandText = @"
                                                                               Declare @FundPK int
                                                                                Declare @TotalMarketValue numeric(26,6)
                                                                                Declare @ExposureValue numeric(22,8)

                                                                                select @TotalMarketValue = isnull(A.AUM,1) From closeNav A
                                                                                where A.Date = (
                                                                                select max(A.date) from CloseNAV A where A.date < @Date 
                                                                                " + _paramFund + @" 
                                                                                and A.status = 2
                                                                                ) 
                                                                                " + _paramFund + @"
                                                                                and A.status = 2 

                                                                                select @ExposureValue = isnull(sum(A.MaxExposurePercent/100 * @TotalMarketValue),0)
                                                                                from FundExposure A where A.status in (1,2) 
                                                                                " + _paramFund + @" 
                                                                                and A.Type = 4 and Parameter = 6 -- REKSADANA

                                                                                select B.Name NamaEmiten,
                                                                                --isnull(E.Description,'') JenisReksadana
                                                                                case when B.InstrumentPK in (2122,1908,1909,1911,1913,1918,1919,1920,1921,1925) then 'Sepenuhnya Surat Utang Swasta dan atau Surat Berharga Pasar Uang' 
                                                                                else case when B.InstrumentPK in (2171,1914,2334) then 'Sepenuhnya Surat Berharga Ekuitas' 
                                                                                else case when B.InstrumentPK in (1922,2272) then 'Sepenuhnya Surat Utang Pemerintah' 
                                                                                else 'Surat Berharga Campuran' end end end  JenisReksadana
                                                                                ,isnull(F.Name,'') ManagerInvestasi,
                                                                                A.MarketValue/1000000 Balance,
                                                                                case when A.MarketValue <= @ExposureValue then A.MarketValue/1000000 else @ExposureValue/1000000 end AYD,
                                                                                case when A.MarketValue <= @ExposureValue then A.MarketValue/1000000 else @ExposureValue/1000000 end AYDTahun from FundPosition A
                                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                                left join Sector C on B.SectorPK = C.SectorPK and C.Status in (1,2)
                                                                                left join Market D on B.MarketPK = D.MarketPK and D.Status in (1,2)
                                                                                left join ReksadanaType E on B.ReksadanaTypePK = E.ReksadanaTypePK and E.status in (1,2)
                                                                                left join Counterpart F on B.CounterpartPK = F.CounterpartPK and F.status in (1,2)
                                                                                left join InstrumentIndex G on A.InstrumentPK = G.InstrumentPK and G.status in (1,2)
                                                                                left join [Index] H on G.IndexPK = H.IndexPK and H.status in (1,2)
                                                                                where  A.date  = 
                                                                                (
                                                                                Select max(ValueDate) from endDayTrailsFundPortfolio where
                                                                                valuedate <= @Date  and status = 2
                                                                                )
                                                                                and A.status = 2 and B.InstrumentTypePK in (6) " + _paramFund;
                                                                                subCmd3.CommandTimeout = 0;
                                                                                subCmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                                                                using (SqlDataReader dr3 = subCmd3.ExecuteReader())
                                                                                {
                                                                                    if (!dr3.HasRows)
                                                                                    {
                                                                                        return false;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        ExcelWorksheet worksheet3 = package.Workbook.Worksheets["Rincian 110 Reksa Dana"];

                                                                                        List<LaporanOJK> rList3 = new List<LaporanOJK>();
                                                                                        while (dr3.Read())
                                                                                        {
                                                                                            LaporanOJK rSingle3 = new LaporanOJK();
                                                                                            rSingle3.NamaEmiten = dr3["NamaEmiten"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr3["NamaEmiten"]);
                                                                                            rSingle3.JenisReksadana = dr3["JenisReksadana"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr3["JenisReksadana"]);
                                                                                            rSingle3.ManagerInvestasi = dr3["ManagerInvestasi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr3["ManagerInvestasi"]);
                                                                                            rSingle3.Balance = dr3["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr3["Balance"]);
                                                                                            rSingle3.AYD = dr3["AYD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr3["AYD"]);
                                                                                            rSingle3.AYDTahun = dr3["AYDTahun"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr3["AYDTahun"]);
                                                                                            rList3.Add(rSingle3);

                                                                                        }


                                                                                        var QueryByFundID3 =
                                                                                           from r3 in rList3
                                                                                           group r3 by new { r3 } into rGroup3
                                                                                           select rGroup3;

                                                                                        int incRowExcelD = 16;

                                                                                        foreach (var rsHeader3 in QueryByFundID3)
                                                                                        {

                                                                                            ////area header

                                                                                            foreach (var rsDetail3 in rsHeader3)
                                                                                            {
                                                                                                worksheet3.Cells[incRowExcelD, 5].Value = rsDetail3.NamaEmiten;
                                                                                                worksheet3.Cells[incRowExcelD, 6].Value = rsDetail3.JenisReksadana;
                                                                                                worksheet3.Cells[incRowExcelD, 7].Value = rsDetail3.ManagerInvestasi;
                                                                                                worksheet3.Cells[incRowExcelD, 8].Value = rsDetail3.Balance;
                                                                                                worksheet3.Cells[incRowExcelD, 9].Value = rsDetail3.Balance;
                                                                                                worksheet3.Cells[incRowExcelD, 10].Value = rsDetail3.Balance;
                                                                                                incRowExcelD++;
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Report Aging Obligasi
            else if (_FundAccountingRpt.ReportName.Equals("Report Aging Obligasi"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
                                select A.instrumentPK,B.ID InstrumentID,C.InstrumentTypePK,case when C.Type in (5,14) then B.ID else B.Name end InstrumentName
                                ,isnull(B.MaturityDate,'') MaturityDate, isnull(A.InterestPercent,0) InterestPercent
                                ,'5/15/2019' Coupondate1,'6/15/2019' Coupondate2,'7/15/2019' Coupondate3,'8/15/2019' Coupondate4
                                , 3000000000 FaceAmount, 1000000 Aging1, 2000000 Aging2, 3000000 Aging3, 4000000 Aging4, 10000000 Total 
                                from FundPosition A
                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)
                                where  A.status = 2 AND A.date = @Date and B.InstrumentTypePK not in (1,5,6) " + _paramFund + @"
                                order by  C.InstrumentTypePK,A.InstrumentPK 
                                 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportAgingObligasi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportAgingObligasi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportAgingObligasi";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Aging Obligasi");

                                        int incRowExcel = 1;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT AGING OBLIGASI";
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "DATE : " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy"); ;
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Row(RowG).Height = 25;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "NAMA";
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "MATURITY";
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "COUPON DATE 2019";
                                        worksheet.Cells["D" + RowB + ":H" + RowB].Merge = true;
                                        worksheet.Cells["D" + RowB + ":H" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 4].Value = "RATE";
                                        worksheet.Cells["D" + RowG + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowG + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowG + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 5].Value = "1";
                                        worksheet.Cells["E" + RowG + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowG + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowG + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 6].Value = "2";
                                        worksheet.Cells["F" + RowG + ":F" + RowG].Merge = true;
                                        worksheet.Cells["F" + RowG + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowG + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 7].Value = "3";
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Merge = true;
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowG + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 8].Value = "4";
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Merge = true;
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowG + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                
                                        worksheet.Cells[incRowExcel, 9].Value = "SALDO AKHIR";
                                        worksheet.Cells["I" + RowB + ":I" + RowB].Merge = true;
                                        worksheet.Cells["I" + RowB + ":I" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowB + ":I" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 9].Value = "FACE AMOUNT";
                                        worksheet.Cells["I" + RowG + ":I" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowG + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowG + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 10].Value = "AGING";
                                        worksheet.Cells["J" + RowB + ":M" + RowB].Merge = true;
                                        worksheet.Cells["J" + RowB + ":M" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["J" + RowB + ":M" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 10].Value = "0-30 JUNI";
                                        worksheet.Cells["J" + RowG + ":J" + RowG].Merge = true;
                                        worksheet.Cells["J" + RowG + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["J" + RowG + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 11].Value = "30-60";
                                        worksheet.Cells["K" + RowG + ":K" + RowG].Merge = true;
                                        worksheet.Cells["K" + RowG + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowG + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 12].Value = "60-90";
                                        worksheet.Cells["L" + RowG + ":L" + RowG].Merge = true;
                                        worksheet.Cells["L" + RowG + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["L" + RowG + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 13].Value = ">90";
                                        worksheet.Cells["M" + RowG + ":M" + RowG].Merge = true;
                                        worksheet.Cells["M" + RowG + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["M" + RowG + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 14].Value = "Total";
                                        worksheet.Cells["N" + RowG + ":N" + RowG].Merge = true;
                                        worksheet.Cells["N" + RowG + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["N" + RowG + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        worksheet.Cells["A" + RowB + ":N" + RowB].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowG + ":N" + RowG].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowB + ":N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(180, 200, 205));
                                        worksheet.Cells[RowG, 1, RowG, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[RowG, 1, RowG, 9].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(180, 200, 205));

                                        worksheet.Cells[incRowExcel, 10, incRowExcel, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 10, incRowExcel, 14].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(198, 15, 21));
                                        worksheet.Cells[RowG, 10, RowG, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[RowG, 10, RowG, 14].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(198, 15, 21));


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportAgingObligasi> rList = new List<ReportAgingObligasi>();
                                        while (dr0.Read())
                                        {
                                            ReportAgingObligasi rSingle = new ReportAgingObligasi();
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]));
                                            rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaturityDate"]));
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]));
                                            rSingle.Coupondate1 = Convert.ToString(dr0["Coupondate1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Coupondate1"]));
                                            rSingle.Coupondate2 = Convert.ToString(dr0["Coupondate2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Coupondate2"]));
                                            rSingle.Coupondate3 = Convert.ToString(dr0["Coupondate3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Coupondate3"]));
                                            rSingle.Coupondate4 = Convert.ToString(dr0["Coupondate4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Coupondate4"]));
                                            rSingle.FaceAmount = Convert.ToDecimal(dr0["FaceAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["FaceAmount"]));
                                            rSingle.Aging1 = Convert.ToDecimal(dr0["Aging1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Aging1"]));
                                            rSingle.Aging2 = Convert.ToDecimal(dr0["Aging2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Aging2"]));
                                            rSingle.Aging3 = Convert.ToDecimal(dr0["Aging3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Aging3"]));
                                            rSingle.Aging4 = Convert.ToDecimal(dr0["Aging4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Aging4"]));
                                            rSingle.Total = Convert.ToDecimal(dr0["Total"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Total"]));
                                            rSingle.instrumentPK = Convert.ToInt32(dr0["instrumentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["instrumentPK"]));
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]));
                                            rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["InstrumentTypePK"]));
                                            
                                            //
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;


                                        //int incRowExcel = 9;

                                        incRowExcel = incRowExcel + 1;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                                                         
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            incRowExcel++;

                                            //incRowExcel++;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                                                               
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentName;
                                                    worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;                                                                                                    
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.Coupondate1).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.Coupondate2).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.Coupondate3).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(rsDetail.Coupondate4).ToString("dd-MMM-yyyy");
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.FaceAmount;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Aging1;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Aging2;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Aging3;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Aging4;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.Total;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";

                                                    worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["I" + incRowExcel + ":N" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["I" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                               
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.PatternType = ExcelFillStyle.MediumGray;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Calculate();
                                            //worksheet.Cells[incRowExcel, 11].Calculate();
                                            //worksheet.Cells[incRowExcel, 12].Calculate();
                                            //worksheet.Cells[incRowExcel, 13].Calculate();

                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Font.Bold = true;




                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                            incRowExcel++;

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 14];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 24;
                                        worksheet.Column(3).Width = 18;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 15;





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 POSISI REKSADANA";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderRightText();
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Report Aging Reksadana
            if (_FundAccountingRpt.ReportName.Equals("Report Aging Reksadana"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {



                            cmd.CommandText = @"
                           select 2 No, 'Hendra' Nama, '21/Aug/2019' TanggalPeluncuran,'21/Aug/2019' JatuhTempo,'21/Aug/2019' PeriodeBunga1,'21/Aug/2019' PeriodeBunga2,'21/Aug/2019' PeriodeBunga3,'21/Aug/2019' PeriodeBunga4,
                            '21/Aug/2019' TanggalKuponTerakhirThn2017,20000000000 BookValue,8.15 InterestRate, 123456 Aging1,123456 Aging2, 123456 Aging3, 123456 Aging4, 123456 AgingSaldo
                            UNION ALL
                            select 3 No, 'Hendra' Nama, '21/Aug/2019' TanggalPeluncuran,'21/Aug/2019' JatuhTempo,'21/Aug/2019' PeriodeBunga1,'21/Aug/2019' PeriodeBunga2,'21/Aug/2019' PeriodeBunga3,'21/Aug/2019' PeriodeBunga4,
                            '21/Aug/2019' TanggalKuponTerakhirThn2017,20000000000 BookValue,8.15 InterestRate, 123456 Aging1,123456 Aging2, 123456 Aging3, 123456 Aging4, 123456 AgingSaldo
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportAgingReksadana" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportAgingReksadana" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Aging Reksadana");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportAgingReksadana> rList = new List<ReportAgingReksadana>();
                                        while (dr0.Read())
                                        {

                                            ReportAgingReksadana rSingle = new ReportAgingReksadana();
                                            rSingle.No = Convert.ToInt32(dr0["No"]);
                                            rSingle.Nama = Convert.ToString(dr0["Nama"]);
                                            rSingle.TanggalPeluncuran = Convert.ToString(dr0["TanggalPeluncuran"]);
                                            rSingle.jatuhTempo = Convert.ToString(dr0["jatuhTempo"]);
                                            rSingle.PeriodeBunga1 = Convert.ToString(dr0["PeriodeBunga1"]);
                                            rSingle.PeriodeBunga2 = Convert.ToString(dr0["PeriodeBunga2"]);
                                            rSingle.PeriodeBunga3 = Convert.ToString(dr0["PeriodeBunga3"]);
                                            rSingle.PeriodeBunga4 = Convert.ToString(dr0["PeriodeBunga4"]);
                                            rSingle.TanggalKuponTerakhirThn2017 = Convert.ToString(dr0["TanggalKuponTerakhirThn2017"]);
                                            rSingle.BookValue = Convert.ToDecimal(dr0["BookValue"]);
                                            rSingle.InterestRate = Convert.ToDecimal(dr0["InterestRate"]);
                                            rSingle.Aging1 = Convert.ToDecimal(dr0["Aging1"]);
                                            rSingle.Aging2 = Convert.ToDecimal(dr0["Aging2"]);
                                            rSingle.Aging3 = Convert.ToDecimal(dr0["Aging3"]);
                                            rSingle.Aging4 = Convert.ToDecimal(dr0["Aging4"]);
                                            rSingle.AgingSaldo = Convert.ToDecimal(dr0["AgingSaldo"]);







                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { r } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 1].Value = "Report Aging Reksadana";
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date";
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel++;
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Row(incRowExcel).Height = 30;
                                        worksheet.Row(RowG).Height = 25;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";                                        
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "NAMA";
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "TANGGAL PELUNCURAN";
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "JATUH TEMPO";
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "PERIODE BUNGA";
                                        worksheet.Cells["E" + RowB + ":H" + RowB].Merge = true;
                                        worksheet.Cells["E" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 5].Value = "1";
                                        worksheet.Cells[RowG, 5, RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 6].Value = "2";
                                        worksheet.Cells[RowG, 6, RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 7].Value = "3";
                                        worksheet.Cells[RowG, 7, RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 8].Value = "4";
                                        worksheet.Cells[RowG, 8, RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Value = "TANGGAL KUPON TERAKHIR THN 2017";
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 10].Value = "BOOK VALUE";
                                        worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                        worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 11].Value = "INTEREST RATE";
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 12].Value = "AGING";
                                        worksheet.Cells["L" + RowB + ":P" + RowB].Merge = true;
                                        worksheet.Cells["L" + RowB + ":P" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 12].Value = "0-30 JUN";
                                        worksheet.Cells[RowG, 12, RowG, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 13].Value = "30-60";
                                        worksheet.Cells[RowG, 13, RowG, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 14].Value = "60-90";
                                        worksheet.Cells[RowG, 14, RowG, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 15].Value = ">90";
                                        worksheet.Cells[RowG, 15, RowG, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 16].Value = "Saldo";
                                        worksheet.Cells[RowG, 16, RowG, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        worksheet.Cells["A" + RowB + ":P" + RowB].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowG + ":P" + RowG].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowB + ":K" + RowG].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + RowB + ":K" + RowG].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(180, 200, 205));
                                        worksheet.Cells["A" + RowB + ":P" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":P" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":P" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":P" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        incRowExcel++;
                                        foreach (var rsHeader in GroupByReference)
                                        {





                                            incRowExcel++;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.No;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nama;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TanggalPeluncuran;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.jatuhTempo;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.PeriodeBunga1;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.PeriodeBunga2;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PeriodeBunga3;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PeriodeBunga4;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TanggalKuponTerakhirThn2017;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.BookValue;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.InterestRate;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Aging1;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Aging2;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Aging3;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.Aging4;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.AgingSaldo;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }



                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 26;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 33;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 21;
                                        worksheet.Column(13).Width = 21;
                                        worksheet.Column(14).Width = 21;
                                        worksheet.Column(15).Width = 21;
                                        worksheet.Column(16).Width = 21;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Aging Reksadana";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Hasil Investasi
            if (_FundAccountingRpt.ReportName.Equals("Report Hasil Investasi"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "And B.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            cmd.CommandText = @"

declare @TableTemp table
(
	InstrumentPK int,
	Valuedate datetime,
	BankAccountPK int,
	KoreksiAccountDebitPk int,
	KoreksiAccountCreditPk int,
	NilaiPenerimaan numeric(22,4),
	KoreksiDebit numeric(22,4),
	KoreksiCredit numeric(22,4)
)

declare @TableTempKoreksiDebit table
(
	InstrumentPK int,
	Valuedate datetime,
	FundJournalAccountPK int,
	NilaiPenerimaan numeric(22,4),
	Koreksi numeric(22,4)
)

declare @TableTempKoreksiCredit table
(
	InstrumentPK int,
	Valuedate datetime,
	FundJournalAccountPK int,
	NilaiPenerimaan numeric(22,4),
	Koreksi numeric(22,4)
)


--BANK
insert into @TableTemp(Valuedate,InstrumentPK,BankAccountPK,NilaiPenerimaan,KoreksiDebit,KoreksiCredit)
select Valuedate,B.InstrumentPK,B.FundJournalAccountPK,sum(B.Amount) NilaiPenerimaan,0 koreksiDebit,0 KoreksiCredit from FundJournal A
left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK 
where A.Status = 2 AND A.Posted = 1 and Reversed = 0
AND A.TrxName = 'REC COUPON'
AND B.DebitCredit = 'D'
AND A.ValueDate BETWEEN @DateFrom AND @DateTo
and B.FundJournalAccountPK = 3
group by B.InstrumentPK,ValueDate,B.FundJournalAccountPK
order by ValueDate,B.InstrumentPK

--KOREKSI DEBIT
insert into @TableTempKoreksiDebit(Valuedate,InstrumentPK,NilaiPenerimaan,Koreksi)
select Valuedate,B.InstrumentPK,0 NilaiPenerimaan,sum(B.Debit) koreksi from FundJournal A
left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK 
where A.Status = 2 AND A.Posted = 1
AND A.TrxName = 'REC COUPON'
and B.DebitCredit = 'D'
AND A.ValueDate BETWEEN @DateFrom AND @DateTo
and B.FundJournalAccountPK != 3
group by B.InstrumentPK,ValueDate,DebitCredit
order by ValueDate,B.InstrumentPK

--KOREKSI CREDIT
insert into @TableTempKoreksiCredit(Valuedate,InstrumentPK,NilaiPenerimaan,Koreksi)
select Valuedate,B.InstrumentPK,0 NilaiPenerimaan,sum(B.Credit) koreksi from FundJournal A
left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK 
where A.Status = 2 AND A.Posted = 1
AND A.TrxName = 'REC COUPON'
and B.DebitCredit = 'C'
AND A.ValueDate BETWEEN @DateFrom AND @DateTo
and B.FundJournalAccountPK != 3
group by B.InstrumentPK,ValueDate,DebitCredit
order by ValueDate,B.InstrumentPK

--select * from @TableTemp
--select * from @TableTempKoreksiCredit
--select * from @TableTempKoreksiDebit

update A set A.KoreksiDebit = isnull(B.Koreksi,0), KoreksiAccountDebitPk = 0 from @TableTemp A
inner join @TableTempKoreksiDebit B on A.InstrumentPK = B.InstrumentPK and A.Valuedate = B.Valuedate


update A set A.KoreksiCredit = isnull(B.Koreksi,0),KoreksiAccountCreditPk = 0 from @TableTemp A
inner join @TableTempKoreksiCredit B on A.InstrumentPK = B.InstrumentPK and A.Valuedate = B.Valuedate and A.KoreksiAccountDebitPk is null

select 0 FundJournalAccountPK,A.InstrumentPK,Valuedate,
case when D.Name = 'Equity Reguler' then 'SAHAM' else 
case when D.Name = 'Mutual Fund' then 'REKSA DANA' else 
case when D.Name = 'Deposito Money Market' then 'DEPOSITO' else 
case when D.Name = 'Corporate Bond' then 'OBLIGASI' else
case when D.Name = 'Government Bond' then 'OBLIGASI' else 
case when D.Name = 'EBA' then 'EBA' else '' end end end end end end JenisInstrument,isnull(C.ID,'') NamaInstrument,A.ValueDate TanggalActualMasuk,case when D.InstrumentTypePK = 5 then NilaiPenerimaan else NilaiPenerimaan + KoreksiCredit + KoreksiDebit end NilaiPenerimaan, 
case when C.InstrumentTypePK not in (1,5,6) then dbo.FgetLastCouponDate(@DateTo,A.InstrumentPK) else null end TanggalPenerimaan, 0 NilaiActualMasuk,'REC COUPON' TrxName,case when D.InstrumentTypePK = 5 then 0 else KoreksiDebit + KoreksiCredit end Koreksi
 from @TableTemp A
LEFT JOIN dbo.Instrument C ON A.InstrumentPK = C.InstrumentPK AND C.status IN (1,2)
LEFT JOIN dbo.InstrumentType D ON C.InstrumentTypePK = D.InstrumentTypePK AND D.Status IN (1,2)

UNION ALL

SELECT A.FundJournalPK,B.InstrumentPK,A.ValueDate,
case when D.Name = 'Equity Reguler' then 'SAHAM' else 
case when D.Name = 'Mutual Fund' then 'REKSA DANA' else 
case when D.Name = 'Deposito Money Market' then 'DEPOSITO' else 
case when D.Name = 'Corporate Bond' then 'OBLIGASI' else 
case when D.Name = 'Government Bond' then 'OBLIGASI' else
case when D.Name = 'EBA' then 'EBA' else '' end end end end end end JenisInstrument,isnull(C.ID,'') NamaInstrument,A.ValueDate TanggalActualMasuk,B.Amount NilaiPenerimaan, null TanggalPenerimaan, 0 NilaiActualMasuk,A.TrxName,0 Koreksi FROM FundJournal A 
LEFT JOIN dbo.FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK
LEFT JOIN dbo.Instrument C ON B.InstrumentPK = C.InstrumentPK AND C.status IN (1,2)
LEFT JOIN dbo.InstrumentType D ON C.InstrumentTypePK = D.InstrumentTypePK AND D.Status IN (1,2)
WHERE A.Status = 2 AND A.Posted = 1
AND A.TrxName = 'transaction'
and (Description LIKE 'T-Settled EQUITY SELL%'
or Description LIKE 'T-Settled EQUITY BUY%'
or Description LIKE 'T-Settled BOND SELL%'
or Description LIKE 'T-Settled BOND BUY%'
or Description LIKE 'T-Settled MUTUAL FUND SELL%'
or Description LIKE 'T-Settled MUTUAL FUND BUY%')
AND B.DebitCredit = 'D'
AND A.ValueDate BETWEEN @DateFrom AND @DateTo " + _paramFundFrom + @"

ORDER BY A.ValueDate ASC
";

//                            cmd.CommandText = @"
//                            
//                            SELECT A.FundJournalPK,B.InstrumentPK,
//                             case when D.Name = 'Equity Reguler' then 'SAHAM' else 
//                             case when D.Name = 'Mutual Fund' then 'REKSA DANA' else 
//                             case when D.Name = 'Deposito Money Market' then 'DEPOSITO' else 
//                             case when D.Name = 'Corporate Bond' then 'OBLIGASI' else '' end end end end JenisInstrument,isnull(C.ID,'') NamaInstrument,A.ValueDate TanggalPenerimaan,B.Amount NilaiPenerimaan, '' TanggalActualMasuk, 0 NilaiActualMasuk FROM FundJournal A
//                            LEFT JOIN dbo.FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK
//                            LEFT JOIN dbo.Instrument C ON B.InstrumentPK = C.InstrumentPK AND C.status IN (1,2)
//                            LEFT JOIN dbo.InstrumentType D ON C.InstrumentTypePK = D.InstrumentTypePK AND D.Status IN (1,2)
//                            WHERE A.Status = 2 AND A.Posted = 1
//                            AND A.TrxName = 'REC COUPON'
//                            AND B.DebitCredit = 'D'
//                            AND A.ValueDate BETWEEN @DateFrom AND @DateTo " + _paramFundFrom + @"
//
//                            UNION ALL
//
//                            SELECT A.FundJournalPK,B.InstrumentPK
//                            ,case when D.Name = 'Equity Reguler' then 'SAHAM' else 
//                             case when D.Name = 'Mutual Fund' then 'REKSA DANA' else 
//                             case when D.Name = 'Deposito Money Market' then 'DEPOSITO' else 
//                             case when D.Name = 'Corporate Bond' then 'OBLIGASI' else '' end end end end JenisInstrument,isnull(C.ID,'') NamaInstrument,A.ValueDate TanggalPenerimaan,B.Amount NilaiPenerimaan, '' TanggalActualMasuk, 0 NilaiActualMasuk FROM FundJournal A
//                            LEFT JOIN dbo.FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK
//                            LEFT JOIN dbo.Instrument C ON B.InstrumentPK = C.InstrumentPK AND C.status IN (1,2)
//                            LEFT JOIN dbo.InstrumentType D ON C.InstrumentTypePK = D.InstrumentTypePK AND D.Status IN (1,2)
//                            WHERE A.Status = 2 AND A.Posted = 1
//                            AND A.TrxName = 'transaction'
//                            AND A.Description LIKE 'T-Settled EQUITY SELL%'
//                            AND B.DebitCredit = 'D'
//                            AND A.ValueDate BETWEEN @DateFrom AND @DateTo " + _paramFundFrom + @"
//
//                            ORDER BY A.ValueDate ASC
//                             ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportHasilInvestasi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportHasilInvestasi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Hasil Investasi");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportHasilInvestasi> rList = new List<ReportHasilInvestasi>();
                                        while (dr0.Read())
                                        {

                                            ReportHasilInvestasi rSingle = new ReportHasilInvestasi();
                                            //rSingle.FundJournalPK = Convert.ToInt32(dr0["FundJournalPK"]);
                                            rSingle.InstrumentPK = Convert.ToInt32(dr0["InstrumentPK"]);
                                            //rSingle.JenisInstrument = Convert.ToString(dr0["JenisInstrument"]);
                                            rSingle.JenisInstrument = Convert.ToString(dr0["JenisInstrument"]);
                                            rSingle.NamaInstrument = Convert.ToString(dr0["NamaInstrument"]);
                                            //rSingle.TanggalPenerimaan = Convert.ToString(dr0["TanggalPenerimaan"]);
                                            rSingle.TanggalPenerimaan = Convert.ToString(dr0["TanggalPenerimaan"].Equals(DBNull.Value) == true ? "" : Convert.ToDateTime(dr0["TanggalPenerimaan"]).ToString("dd-MMM-yyyy"));
                                            rSingle.NilaiPenerimaan = Convert.ToDecimal(dr0["NilaiPenerimaan"]);
                                            //rSingle.TanggalActualMasuk = Convert.ToString(dr0["TanggalActualMasuk"]);
                                            rSingle.TanggalActualMasuk = Convert.ToString(dr0["TanggalActualMasuk"].Equals(DBNull.Value) == true ? "" : Convert.ToDateTime(dr0["TanggalActualMasuk"]).ToString("dd-MMM-yyyy"));
                                            rSingle.NilaiActualMasuk = Convert.ToDecimal(dr0["NilaiActualMasuk"]);
                                            rSingle.Koreksi = Convert.ToDecimal(dr0["Koreksi"]);
                                            rSingle.TrxName = Convert.ToString(dr0["TrxName"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new {} into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Report Hasil Investasi";
                                        worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Date";
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy"); 

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 2].Value = "NO";
                                        worksheet.Cells[incRowExcel, 3].Value = "JENIS INSTRUMENT";
                                        worksheet.Cells[incRowExcel, 4].Value = "NAMA INSTRUMENT";
                                        worksheet.Cells[incRowExcel, 5].Value = "TANGGAL PENERIMAAN";
                                        worksheet.Cells[incRowExcel, 6].Value = "NILAI PENERIMAAN";
                                        worksheet.Cells[incRowExcel, 7].Value = "TANGGAL ACTUAL MASUK";
                                        worksheet.Cells[incRowExcel, 8].Value = "NILAI ACTUAL MASUK";
                                        worksheet.Cells[incRowExcel, 9].Value = "KOREKSI";
                                        worksheet.Cells[incRowExcel, 10].Value = "JOURNAL TYPE";

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        foreach (var rsHeader in GroupByReference)
                                        {





                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 2].Value = no;
                                                worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.JenisInstrument;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NamaInstrument;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TanggalPenerimaan;                                                
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NilaiPenerimaan;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.TanggalActualMasuk;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NilaiPenerimaan - rsDetail.Koreksi;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Calculate();
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Koreksi;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TrxName;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                _endRowDetail = incRowExcel;
                                                no++;
                                                incRowExcel++;

                                            }



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 10, 10];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 10;
                                        worksheet.Column(3).Width = 26;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 26;
                                        worksheet.Column(6).Width = 26;
                                        worksheet.Column(7).Width = 26;
                                        worksheet.Column(8).Width = 26;
                                        worksheet.Column(9).Width = 26;
                                        worksheet.Column(10).Width = 26;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Hasil Investasi";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Monitoring Cash Flow Transaksi
            if (_FundAccountingRpt.ReportName.Equals("Report Monitoring Cash Flow Transaksi"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
                            SELECT case when C.ID = 'DEP' then 'DEPOSITO' 
                            else case when C.ID = 'RG' then 'SAHAM' 
                            else case when C.ID = 'G-BOND' or C.ID = 'C-BOND' then 'OBLIGASI'
                            else case when C.ID = 'RD' then 'REKSA DANA'
                            else case when C.ID = 'EBA' then 'EBA'
                            else '' end end end end end JenisInstrument,B.ID NamaInstrument,A.TrxTypeID JenisTransaksi,A.ValueDate TradeDate,A.SettlementDate SettlementDate,A.TotalAmount NilaiTransaksi
                            FROM dbo.Investment A
                            LEFT JOIN Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
                            LEFT JOIN InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
                            WHERE A.ValueDate BETWEEN @DateFrom AND @DateTo
                            AND A.StatusSettlement = 2 " + _paramFundFrom + @"
                            order by A.ValueDate desc
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportMonitoringCashFlowTransaksi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportMonitoringCashFlowTransaksi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Monitoring Cash Flow Transaksi");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportMonitoringCashFlowTransaksi> rList = new List<ReportMonitoringCashFlowTransaksi>();
                                        while (dr0.Read())
                                        {

                                            ReportMonitoringCashFlowTransaksi rSingle = new ReportMonitoringCashFlowTransaksi();
                                            rSingle.JenisInstrument = Convert.ToString(dr0["JenisInstrument"]);
                                            rSingle.NamaInstrument = Convert.ToString(dr0["NamaInstrument"]);
                                            rSingle.JenisTransaksi = Convert.ToString(dr0["JenisTransaksi"]);
                                            rSingle.TradeDate = Convert.ToString(dr0["TradeDate"]);
                                            rSingle.SettlementDate = Convert.ToString(dr0["SettlementDate"]);
                                            rSingle.NilaiTransaksi = Convert.ToDecimal(dr0["NilaiTransaksi"]);





                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Report Monitoring Cash Flow Transaksi";
                                        worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["B" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Date";
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd-MMM-yyyy") +" - "+ Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy"); 

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 2].Value = "NO";
                                        worksheet.Cells[incRowExcel, 3].Value = "JENIS INSTRUMENT";
                                        worksheet.Cells[incRowExcel, 4].Value = "NAMA INSTRUMENT";
                                        worksheet.Cells[incRowExcel, 5].Value = "JENIS TRANSAKSI";
                                        worksheet.Cells[incRowExcel, 6].Value = "TRADE DATE";
                                        worksheet.Cells[incRowExcel, 7].Value = "SETTLEMENT DATE";
                                        worksheet.Cells[incRowExcel, 8].Value = "NILAI TRANSAKSI";

                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        foreach (var rsHeader in GroupByReference)
                                        {





                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 2].Value = no;
                                                worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.JenisInstrument;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NamaInstrument;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.JenisTransaksi;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.TradeDate).ToString("dd-MMM-yyyy");                                                
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NilaiTransaksi;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;
                                                no++;
                                                incRowExcel++;

                                            }



                                          

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 8;
                                        worksheet.Column(3).Width = 26;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 26;
                                        worksheet.Column(6).Width = 26;
                                        worksheet.Column(7).Width = 26;
                                        worksheet.Column(8).Width = 26;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Monitoring Cash Flow Transaksi";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }

        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region LPTI Subscription
            if (_unitRegistryRpt.ReportName.Equals("LPTI Subscription"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _paramFund = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = " and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = " and CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = " and CS.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = " and CS.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = " and (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0  ";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = " and (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0  ";

                            }


                            cmd.CommandText = @"
                        SELECT CS.FundPK,F.Name FundName,Fc.Name InvestorName,
                        NavDate NavDate, ValueDate Date, FC.IFUACode IFUA, unitamount UnitTransaction,CashAmount CashTransaction,BN.Name BankCustodianName,BC.Address CustodianAddress,
                        CashAmount GrossAmount, CS.SubscriptionFeePercent FeePercent, CS.SubscriptionFeeAmount FeeAmount, 
                        CS.TotalCashAmount NetAmount, CS.Description Remark, CU.ID CurrencyID,
                        isnull(BC.ID,'') BankCustodiID, isnull(BC.Address,'') Address, isnull(BC.Attn1,'') ContactPerson, isnull(BC.Fax1,'') FaxNo, isnull(BC.Address,'') CustodyAddress,FCR.BankAccountNo  from ClientSubscription CS   
                        left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                        left join Fund F ON CS.FundPK = F.FundPK  and F.status = 2   
                        left join FundCashRef FCR ON CS.CashRefPK = FCR.FundCashRefPK  and FCR.status = 2   
                        left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                        left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                        left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2   
                        WHERE CS.NAVDate between @DateFrom and @DateTo and CS.Type = 1" + _paramFund + _statusSubs;

                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LPTISubscription_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LPTISubscription_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Subscription");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LPTISubscription> rList = new List<LPTISubscription>();
                                        while (dr0.Read())
                                        {
                                            LPTISubscription rSingle = new LPTISubscription();
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.InvestorName = Convert.ToString(dr0["InvestorName"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.UnitTransaction = Convert.ToDecimal(dr0["UnitTransaction"]);
                                            rSingle.CashTransaction = Convert.ToDecimal(dr0["CashTransaction"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.BankCustodiID = Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.CustodyAddress = Convert.ToString(dr0["CustodyAddress"]);
                                            rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.BankCustodiID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        //int _startRowDetail = 0;
                                        incRowExcel = incRowExcel + 6;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 28;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Dari";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Investasi";
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth. ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Departmen Keuangan";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Lampiran ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Intruksi Subscription Unit Link";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Perihal ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Subscription Unit Link";
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Row(incRowExcel).Height = 45;
                                        worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon dikirimkan dana atas Subscription tanggal " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy") + " dengan rincian kebutuhan adalah sebagai berikut:";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            int RowF = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Fund";
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "No. Rekening Dana";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            int RowD = incRowExcel;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BankAccountNo;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "###";
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 30;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }


                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "*) Coret yang tidak perlu";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Atas transaksi tersebut mohon bantuannya untuk melaksanakan hal-hal berikut :";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "1. Mengirimkan uang selambat-lambatnya tanggal " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy") + " pukul 14:00 WIB.";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "2. Dana Subscription ditransfer ke nomer rekening di atas. ";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terimakasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 6;

                                            worksheet.Cells[incRowExcel, 6].Value = "Jakarta, " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;



                                            incRowExcel = incRowExcel + 8;

                                            worksheet.Cells[incRowExcel, 6].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 6].Value = "Kepala Divisi Investasi";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 25;
                                        //worksheet.Column(10).Width = 30;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n   &20&B SUBSCRIPTION \n &20&B Batch Form \n";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region LPTI Redemption
            if (_unitRegistryRpt.ReportName.Equals("LPTI Redemption"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusRedemp = "";
                            string _paramFund = "";




                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusRedemp = "  and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusRedemp = " and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusRedemp = " and CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusRedemp = " and CS.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusRedemp = " and CS.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusRedemp = " and (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0  ";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusRedemp = " and (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0  ";

                            }


                            cmd.CommandText = @"
                        SELECT CS.FundPK,F.Name FundName,Fc.Name InvestorName,
                        NavDate NavDate, ValueDate Date, FC.IFUACode IFUA, unitamount UnitTransaction, CashAmount CashTransaction,BN.Name BankCustodianName,BC.Address CustodianAddress,
                        CashAmount GrossAmount, CS.RedemptionFeePercent FeePercent, CS.RedemptionFeeAmount FeeAmount, 
                        CS.TotalCashAmount NetAmount, CS.Description Remark, CU.ID CurrencyID,
                        isnull(BC.ID,'') BankCustodiID, isnull(BC.Address,'') Address, isnull(BC.Attn1,'') ContactPerson, isnull(BC.Fax1,'') FaxNo, isnull(BC.Address,'') CustodyAddress, isnull(FCR.BankAccountNo,'') BankAccountNo  from ClientRedemption CS   
                        left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                        left join Fund F ON CS.FundPK = F.FundPK  and F.status = 2   
                        left join FundCashRef FCR ON CS.CashRefPK = FCR.FundCashRefPK  and FCR.status = 2   
                        left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                        left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                        left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2   
                        WHERE CS.NAVDate between @DateFrom and @DateTo and CS.Type = 1" + _paramFund + _statusRedemp;

                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LPTIRedemption_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LPTIRedemption_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LPTI Redemption");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LPTIRedemption> rList = new List<LPTIRedemption>();
                                        while (dr0.Read())
                                        {
                                            LPTIRedemption rSingle = new LPTIRedemption();
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.InvestorName = Convert.ToString(dr0["InvestorName"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.UnitTransaction = Convert.ToDecimal(dr0["UnitTransaction"]);
                                            rSingle.CashTransaction = Convert.ToDecimal(dr0["CashTransaction"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.BankCustodiID = Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.CustodyAddress = Convert.ToString(dr0["CustodyAddress"]);
                                            rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.BankCustodiID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        //int _startRowDetail = 0;
                                        incRowExcel = incRowExcel + 6;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "LEMBAR PENGANTAR TRANSAKSI INVESTASI (LPTI)";
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 28;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Dari";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Kepala Divisi Investasi";
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth. ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Departmen Keuangan";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Lampiran ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Intruksi Redemption Unit Link";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Perihal ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Redemption Unit Link";
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;

                                        //ini belum
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Row(incRowExcel).Height = 45;
                                        worksheet.Cells[incRowExcel, 1].Value = "Menunjuk perihal tersebut diatas, dengan ini mohon dikirimkan dana atas Redemption tanggal " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy") + " dengan rincian kebutuhan adalah sebagai berikut:";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            int RowF = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Fund";
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "No. Rekening Dana";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            int RowD = incRowExcel;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BankAccountNo;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "###";
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 30;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }


                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "*) Coret yang tidak perlu";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Atas transaksi tersebut mohon bantuannya untuk melaksanakan hal-hal berikut :";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "1. Mengirimkan uang selambat-lambatnya tanggal " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy") + " pukul 15:00 WIB.";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "2. Dana Redemption ditransfer ke nomer rekening di atas. ";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terimakasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 6;

                                            worksheet.Cells[incRowExcel, 6].Value = "Jakarta, " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;



                                            incRowExcel = incRowExcel + 8;

                                            worksheet.Cells[incRowExcel, 6].Value = "Ruben Sukatendel";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 6].Value = "Kepala Divisi Investasi";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 25;
                                        //worksheet.Column(10).Width = 30;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n   &20&B SUBSCRIPTION \n &20&B Batch Form \n";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Batch Subscription Instruction
            else if (_unitRegistryRpt.ReportName.Equals("Batch Subscription Instruction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = " and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = " and CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = " and CS.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = " and CS.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = " and (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0  ";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = " and (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0  ";

                            }

                            cmd.CommandText = @"
                        SELECT CS.FundPK,F.Name FundName,Fc.Name InvestorName,
                        NavDate NavDate, ValueDate Date, FC.IFUACode IFUA, unitamount UnitTransaction,BN.Name BankCustodianName,BC.Address CustodianAddress,
                        CashAmount GrossAmount, CS.SubscriptionFeePercent FeePercent, CS.SubscriptionFeeAmount FeeAmount, 
                        CS.TotalCashAmount NetAmount, CS.Description Remark, CU.ID CurrencyID,
                        isnull(BC.ID,'') BankCustodiID, isnull(BC.Address,'') Address, isnull(BC.Attn1,'') ContactPerson, isnull(BC.Fax1,'') FaxNo, isnull(BC.Address,'') CustodyAddress,FCR.BankAccountNo  from ClientSubscription CS   
                        left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                        left join Fund F ON CS.FundPK = F.FundPK  and F.status = 2   
                        left join FundCashRef FCR ON CS.CashRefPK = FCR.FundCashRefPK  and FCR.status = 2   
                        left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                        left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                        left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2   
                        WHERE CS.NAVDate between @DateFrom and @DateTo and CS.Type = 1 " + _paramFund + _statusSubs;

                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BatchSubscriptionInstruction_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BatchSubscriptionInstruction_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Batch Subscription Instruction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BatchSubscriptionInstruction> rList = new List<BatchSubscriptionInstruction>();
                                        while (dr0.Read())
                                        {
                                            BatchSubscriptionInstruction rSingle = new BatchSubscriptionInstruction();
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.InvestorName = Convert.ToString(dr0["InvestorName"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.UnitTransaction = Convert.ToDecimal(dr0["UnitTransaction"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.BankCustodiID = Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.CustodyAddress = Convert.ToString(dr0["CustodyAddress"]);
                                            rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.BankCustodiID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        //int _startRowDetail = 0;



                                        incRowExcel = incRowExcel + 6;

                                        worksheet.Cells[incRowExcel, 1].Value = "Jakarta, " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Nomor ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "SRT - " + _unitRegistryRpt.NoSurat + " / Dir.1/TL/" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MMyyyy");
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Sifat ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Penting";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Lampiran ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = " - ";
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth, ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Bapak Sigit Winarto";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Vice President";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Head Of Capital Market Oprations Departement ";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Mandiri Custodian";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "PLaza Mandiri lt 1, Lobbi Barat Jl.Jendral Gatot Subroto Kav.36-38 Jakarta 12190";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.WrapText = true;
                                        worksheet.Row(incRowExcel).Height = 68;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Perihal ";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Italic = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Instruksi Subscription Unit Link";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Row(incRowExcel).Height = 45;
                                        worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami instruksikan agar Bank Mandiri Kustodian dapat melaksanakan transaksi Subscription pada unit link PT Asuransi Jiwa Taspen dengan rincian sebagai berikut:";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            int RowF = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Fund";
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "No. Rekening Dana";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            int RowD = incRowExcel;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BankAccountNo;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "###";
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 30;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }


                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "*) Coret yang tidak perlu";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terima kasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 1].Value = "PT. ASURANSI JIWA TASPEN";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Direksi,";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 8;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_SignatureName(_unitRegistryRpt.Signature1);
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_SignatureName(_unitRegistryRpt.Signature2);
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_PositionSignature(_unitRegistryRpt.Signature1);
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_PositionSignature(_unitRegistryRpt.Signature2);
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 25;
                                        //worksheet.Column(10).Width = 30;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n   &20&B SUBSCRIPTION \n &20&B Batch Form \n";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Batch Redemption Instruction
            else if (_unitRegistryRpt.ReportName.Equals("Batch Redemption Instruction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusRedemp = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusRedemp = "  and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusRedemp = " and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusRedemp = " and CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusRedemp = " and CS.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusRedemp = " and CS.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusRedemp = " and (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0  ";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusRedemp = " and (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0  ";

                            }



                            cmd.CommandText = @"
                        SELECT CS.FundPK,F.Name FundName,Fc.Name InvestorName,
                        NavDate NavDate, ValueDate Date, FC.IFUACode IFUA, unitamount UnitTransaction,BN.Name BankCustodianName,BC.Address CustodianAddress,
                        CashAmount GrossAmount, CS.RedemptionFeePercent FeePercent, CS.RedemptionFeeAmount FeeAmount, 
                        CS.TotalCashAmount NetAmount, CS.Description Remark, CU.ID CurrencyID,
                        isnull(BC.ID,'') BankCustodiID, isnull(BC.Address,'') Address, isnull(BC.Attn1,'') ContactPerson, isnull(BC.Fax1,'') FaxNo, isnull(BC.Address,'') CustodyAddress,FCR.BankAccountNo  from ClientRedemption CS   
                        left join FundClient FC ON CS.fundclientpk = FC.fundclientpk and FC.status = 2  
                        left join Fund F ON CS.FundPK = F.FundPK  and F.status = 2   
                        left join FundCashRef FCR ON CS.CashRefPK = FCR.FundCashRefPK  and FCR.status = 2   
                        left join BankBranch BC ON F.BankBranchPK = BC.BankBranchPK  and BC.status = 2   
                        left join Bank BN on BC.BankPK = BN.BankPK and BN.status = 2
                        left join Currency CU ON CU.CurrencyPK = CS.CurrencyPK  and CU.status = 2   
                        WHERE CS.NAVDate between @DateFrom and @DateTo and CS.Type = 1 " + _paramFund + _statusRedemp;

                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BatchRedemptionInstruction_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BatchRedemptionInstruction_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Batch Redemption Instruction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BatchRedemptionInstruction> rList = new List<BatchRedemptionInstruction>();
                                        while (dr0.Read())
                                        {
                                            BatchRedemptionInstruction rSingle = new BatchRedemptionInstruction();
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.InvestorName = Convert.ToString(dr0["InvestorName"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.UnitTransaction = Convert.ToDecimal(dr0["UnitTransaction"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.BankCustodiID = Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.CustodyAddress = Convert.ToString(dr0["CustodyAddress"]);
                                            rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.BankCustodiID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        //int _startRowDetail = 0;



                                        incRowExcel = incRowExcel + 6;

                                        worksheet.Cells[incRowExcel, 1].Value = "Jakarta, " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Nomor ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "SRT - " + _unitRegistryRpt.NoSurat + " / Dir.1/TL/" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MMyyyy");
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Sifat ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Penting";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Lampiran ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = " - ";
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth, ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Bapak Sigit Winarto";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Vice President";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Head Of Capital Market Oprations Departement ";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Mandiri Custodian";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "PLaza Mandiri lt 1, Lobbi Barat Jl.Jendral Gatot Subroto Kav.36-38 Jakarta 12190";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.WrapText = true;
                                        worksheet.Row(incRowExcel).Height = 68;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Value = "Perihal ";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Italic = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = ":";
                                        worksheet.Cells[incRowExcel, 4].Value = "Instruksi Redemption Unit Link";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Row(incRowExcel).Height = 45;
                                        worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami instruksikan agar Bank Mandiri Kustodian dapat melaksanakan transaksi Redemption pada unit link PT Asuransi Jiwa Taspen dengan rincian sebagai berikut:";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        incRowExcel = incRowExcel + 2;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            int RowF = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Fund";
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "No. Rekening Dana";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Nominal";
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;


                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowF + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowF + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            int RowD = incRowExcel;
                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                                worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BankAccountNo;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "###";
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.WrapText = true;
                                                worksheet.Row(incRowExcel).Height = 30;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }


                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "*) Coret yang tidak perlu";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan, atas perhatian dan kerjasamanya kami ucapkan terimakasih.";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 1].Value = "PT. ASURANSI JIWA TASPEN";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Direksi,";
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 8;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_SignatureName(_unitRegistryRpt.Signature1);
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_SignatureName(_unitRegistryRpt.Signature2);
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.UnderLine = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_PositionSignature(_unitRegistryRpt.Signature1);
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = _host.Get_PositionSignature(_unitRegistryRpt.Signature2);
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 25;
                                        //worksheet.Column(10).Width = 30;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n   &20&B SUBSCRIPTION \n &20&B Batch Form \n";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }
        }

        public Boolean Report_PortfolioValuation(string _userID, DateTime _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"
                    select FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                    F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,FP.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
                    FP.ClosePrice ClosePrice
                    ,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
                    ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) 
                    else 0 end AccrualHarian
                    ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate)
                    * datediff(day,DATEADD(month, DATEDIFF(month, 0, @ValueDate), 0),@ValueDate )
                    else FP.InterestPercent end Accrual

                    ,FP.InterestPercent 
                    ,FP.MarketValue MarketValue,
                    sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                    case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav  
                    from fundposition FP   
                    left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status = 2   
                    left join Fund F on FP.FundPK = F.FundPK and F.status = 2   
                    left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                    left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status = 2  
                    left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType' and M.Status = 2
                    where FP.status in (1,2)  and FP.Date = @ValueDate  
                    group by Fp.AVgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                    FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne
                    order by I.ID ";

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@ValueDate", _date);

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "FundPortfolioValuationRpt" + "_" + _userID + ".xlsx";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "FundAccountingReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Portfolio");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<FundPortfolio> rList = new List<FundPortfolio>();
                                    while (dr0.Read())
                                    {
                                        FundPortfolio rSingle = new FundPortfolio();
                                        rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                        rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                        rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"]);
                                        rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                        rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                        rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                        rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                        rSingle.AvgPrice = Convert.ToDecimal(dr0["AvgPrice"]);
                                        rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                        rSingle.CostValue = Convert.ToDecimal(dr0["CostValue"]);
                                        //rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"]);
                                        rSingle.ClosePrice = dr0["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ClosePrice"]);
                                        //rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"]);
                                        rSingle.MarketValue = dr0["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MarketValue"]);
                                        //rSingle.Unrealised = Convert.ToDecimal(dr0["Unrealised"]);
                                        rSingle.Unrealised = dr0["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unrealised"]);
                                        rSingle.PercentOfNav = dr0["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PercentOfNav"]);
                                        //rSingle.PercentOfNav = Convert.ToDecimal(dr0["PercentOfNav"]);
                                        rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                        rSingle.PeriodeActual = Convert.ToString(dr0["PeriodeActual"]);
                                        //rSingle.AccrualHarian = Convert.ToDecimal(dr0["AccrualHarian"]);
                                        rSingle.AccrualHarian = dr0["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccrualHarian"]);
                                        //rSingle.Accrual = Convert.ToDecimal(dr0["Accrual"]);
                                        rSingle.Accrual = dr0["Accrual"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Accrual"]);
                                        rList.Add(rSingle);

                                    }

                                    var GroupByReference =
                                                    from r in rList
                                                    orderby r.FundName, r.InstrumentTypePK, r.Date ascending
                                                    group r by new { r.FundName, r.InstrumentTypeName, r.Date, r.InstrumentTypePK } into rGroup
                                                    select rGroup;

                                    int incRowExcel = 0;

                                    foreach (var rsHeader in GroupByReference)
                                    {
                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "FUND : ";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "INSTRUMENT TYPE : ";
                                        worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.InstrumentTypeName;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "DATE : ";
                                        worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.Date;
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                        incRowExcel++;

                                        //Row B = 3
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                            worksheet.Cells[incRowExcel, 5].Value = "AVG PRICE";
                                            worksheet.Cells[incRowExcel, 4].Value = "BALANCE";
                                            worksheet.Cells[incRowExcel, 6].Value = "COST VALUE";
                                            worksheet.Cells[incRowExcel, 7].Value = "CLOSE PRICE";
                                            worksheet.Cells[incRowExcel, 8].Value = "MARKET VALUE";
                                            worksheet.Cells[incRowExcel, 9].Value = "UNREALISED";
                                            worksheet.Cells[incRowExcel, 10].Value = "(%) of NAV";

                                        }
                                        else if (rsHeader.Key.InstrumentTypePK == 5)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                            worksheet.Cells[incRowExcel, 4].Value = "TOTAL AMOUNT";
                                            worksheet.Cells[incRowExcel, 5].Value = "MATURITY DATE";
                                            worksheet.Cells[incRowExcel, 6].Value = "INTEREST %";
                                            worksheet.Cells[incRowExcel, 7].Value = "PERIODE ACCRUAL";
                                            worksheet.Cells[incRowExcel, 8].Value = "ACCRUAL HARIAN";
                                            worksheet.Cells[incRowExcel, 9].Value = "BUNGA YANG DI ACCRUAL";
                                            worksheet.Cells[incRowExcel, 10].Value = "(%) of NAV";

                                        }
                                        else
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "INS. NAME";
                                            worksheet.Cells[incRowExcel, 4].Value = "NOMINAL FACE VALUE";
                                            worksheet.Cells[incRowExcel, 5].Value = "AVG COST";
                                            worksheet.Cells[incRowExcel, 6].Value = "COST (IDR)";
                                            worksheet.Cells[incRowExcel, 7].Value = "CLOSE PRICE";
                                            worksheet.Cells[incRowExcel, 8].Value = "MARKET VALUE";
                                            worksheet.Cells[incRowExcel, 9].Value = "UNREALISED";
                                            worksheet.Cells[incRowExcel, 10].Value = "(%) of NAV";
                                        }
                                        string _range = "A" + incRowExcel + ":J" + incRowExcel;

                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 11;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                        }

                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;


                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {



                                            //ThickBox Border HEADER

                                            worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            if (rsDetail.InstrumentTypePK == 1 || rsDetail.InstrumentTypePK == 4 || rsDetail.InstrumentTypePK == 16)
                                            {
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AvgPrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CostValue;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ClosePrice;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketValue;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Unrealised;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0.00";

                                            }
                                            else if (rsDetail.InstrumentTypePK == 5)
                                            {

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PeriodeActual;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AccrualHarian;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Accrual;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AvgPrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CostValue;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ClosePrice;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,####0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketValue;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Unrealised;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0.00";
                                            }
                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.PercentOfNav;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                            _endRowDetail = incRowExcel;

                                            _no++;
                                            incRowExcel++;





                                        }

                                        int RowF = incRowExcel - 1;
                                        worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowB + ":A" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowB + ":B" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowB + ":C" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["D" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["E" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        worksheet.Cells["G" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["I" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["J" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J" + RowF].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                        if (rsHeader.Key.InstrumentTypePK == 1 || rsHeader.Key.InstrumentTypePK == 4 || rsHeader.Key.InstrumentTypePK == 16)
                                        {
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                        }
                                        else if (rsHeader.Key.InstrumentTypePK == 5)
                                        {
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                        }
                                        else
                                        {
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                        }
                                        incRowExcel = incRowExcel + 2;
                                    }


                                    worksheet.Row(incRowExcel).PageBreak = true;

                                    string _rangeDetail = "A:J";

                                    using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        r.Style.Font.Size = 11;
                                        r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                    worksheet.Column(3).Width = 30;
                                    worksheet.Column(4).Width = 30;
                                    worksheet.Column(1).Width = 5;
                                    worksheet.Column(11).Width = 1;
                                    worksheet.Column(2).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.Column(8).AutoFit();
                                    worksheet.Column(9).Width = 30;
                                    worksheet.Column(10).AutoFit();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND PORTFOLIO";



                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    return true;
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public List<InstrumentCombo> Instrument_Combo()
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<InstrumentCombo> L_Instrument = new List<InstrumentCombo>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"SELECT  A.InstrumentPK,A.ID + ' - ' + A.Name  + ' - ' + cast(InstrumentPK as varchar) ID, A.Name,B.ID Type  FROM [Instrument] A 
                                            Left join InstrumentType B on A.InstrumentTypePK = B.InstrumentTypePK and B.Status = 2  
                                            where A.status = 2 order by A.ID,A.Name ";
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    InstrumentCombo M_Instrument = new InstrumentCombo();
                                    M_Instrument.InstrumentPK = Convert.ToInt32(dr["InstrumentPK"]);
                                    M_Instrument.ID = Convert.ToString(dr["ID"]);
                                    M_Instrument.Name = Convert.ToString(dr["Name"]);
                                    M_Instrument.Type = Convert.ToString(dr["Type"]);
                                    L_Instrument.Add(M_Instrument);
                                }

                            }
                            return L_Instrument;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public void GenerateBondInterestAndAmortizeDiscountFromSettlement(string _userID, string _dateFrom, string _dateTo)
        {
            DateTime _datetimeNow = DateTime.Now;
            using (DataTable dt = new DataTable())
            {
                DataColumn dc;
                DataRow dr;

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Int64");
                dc.ColumnName = "BondInterestAndAmortizeDiscountTempPK";
                dc.Unique = true;
                dc.AutoIncrement = true;
                dc.AutoIncrementSeed = 1;
                dc.AutoIncrementStep = 1;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "Date";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Int32");
                dc.ColumnName = "InstrumentPK";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "InterestRate";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "MaturityDate";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "SettledDate";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "CostPrice";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "FaceValue";
                dc.Unique = false;
                dt.Columns.Add(dc);


                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "CostValue";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Int32");
                dc.ColumnName = "TotalDays";
                dc.Unique = false;
                dt.Columns.Add(dc);

                //dc = new DataColumn();
                //dc.DataType = System.Type.GetType("System.Boolean");
                //dc.ColumnName = "BitIsSell";
                //dc.Unique = false;
                //dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "Premium";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "InterestAmount";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "AmortizeDiscountAmount";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "TotalAmortizeDiscount";
                dc.Unique = false;
                dt.Columns.Add(dc);


                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.String");
                dc.ColumnName = "BookValue";
                dc.Unique = false;
                dt.Columns.Add(dc);


                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.String");
                dc.ColumnName = "EntryUsersID";
                dc.Unique = false;
                dt.Columns.Add(dc);


                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "LastUpdate";
                dc.Unique = false;
                dt.Columns.Add(dc);



                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandTimeout = 0;
                        cmd1.CommandText = @"
Truncate table BondInterestAndAmortizeDiscountTemp

Declare @CInstrumentPk int
Declare @CInterestRate numeric(8,4)
Declare @CMaturityDate datetime
Declare @CSettlementDate datetime
Declare @CPrinciple numeric(22,4)
Declare @CFaceAmount numeric(22,4)
Declare @CCostPrice numeric(22,4)
Declare @CInterestDaysType int
Declare @CPaymentPeriod int
Declare @CBitIsSell int

Declare @CounterDate Datetime

create table #BondAmortizeTemp
(
	[Date] [datetime] NOT NULL,
	[InstrumentPK] [int] NOT NULL,
	[InterestRate] [numeric](8, 4) NOT NULL,
	[MaturityDate] [datetime] NOT NULL,
	[SettledDate] [datetime] NOT NULL,
	[CostPrice] [numeric](8, 4) NOT NULL,
	[FaceValue] [numeric](22, 4) NOT NULL,
	[CostValue] [numeric](22, 4) NOT NULL,
	[TotalDays] [int] NOT NULL,
	InterestDaysType int,
	PaymentPeriod int,
    BitIsSell bit
)

Declare A Cursor For

---- TRX BUY 	
Select distinct A.InstrumentPK 
,B.InterestPercent,B.MaturityDate,A.ValueDate,A.DoneAmount
,A.DoneVolume,A.DonePrice,B.InterestDaysType,B.InterestPaymentType,1 BitIsSell
from Investment A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
where A.StatusSettlement = 2
and B.InstrumentTypePK not in (1,5,6) and A.TrxType = 1 and A.DonePrice <> 100
and A.ValueDate between @DateFrom and @DateTo and A.FundPK = 1

union all
-- SELL
Select distinct A.InstrumentPK 
,B.InterestPercent,B.MaturityDate,A.AcqDate,A.DoneVolume * (C.AvgPrice/100) DoneAmount
,A.DoneVolume,C.AvgPrice,B.InterestDaysType,B.InterestPaymentType,1 BitIsSell
from Investment A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
left join 
(
select * from FundPosition 
) C on A.InstrumentPK = C.InstrumentPK and A.MaturityDate = C.MaturityDate and A.AcqDate = C.AcqDate and C.Date = dbo.FWorkingDay(A.ValueDate,-1) and C.status = 2

where A.StatusSettlement = 2
and B.InstrumentTypePK not in (1,5,6) and A.TrxType = 2 and A.DonePrice <> 100
and A.ValueDate between @DateFrom and @DateTo and A.FundPK = 1 

union all
 --SELISIH FACE VALUE JIKA ADA SELL
Select distinct A.InstrumentPK 
,B.InterestPercent,B.MaturityDate,A.AcqDate,(C.Balance - A.DoneVolume) * (C.AvgPrice/100) DoneAmount
,(C.Balance - A.DoneVolume) DoneVolume,C.AvgPrice,B.InterestDaysType,B.InterestPaymentType,0 BitIsSell
from Investment A 
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
left join 
(
select * from FundPosition 
) C on A.InstrumentPK = C.InstrumentPK and A.MaturityDate = C.MaturityDate and A.AcqDate = C.AcqDate and  C.Date = dbo.FWorkingDay(A.ValueDate,-1) and C.status = 2

where A.StatusSettlement = 2
and B.InstrumentTypePK not in (1,5,6) and A.TrxType = 2 and A.DonePrice <> 100
and A.ValueDate between @DateFrom and @DateTo and A.FundPK = 1 and (C.Balance - A.DoneVolume) > 0
Open A

Fetch Next From A
into @CInstrumentPK,@CInterestRate,@CMaturityDate,@CSettlementDate,@CPrinciple,@CFaceAmount,@CCostPrice,@CInterestDaysType,@CPaymentPeriod,@CBitIsSell

While @@FETCH_STATUS = 0
BEGIN
	set @CounterDate = @CSettlementDate
	
while @CounterDate <= @CMaturityDate
	BEGIN
		insert into #BondAmortizeTemp
		select @CounterDate,@CInstrumentPk,@CInterestRate,@CMaturityDate,@CSettlementDate,@CCostPrice,@CFaceAmount,@CPrinciple,
		datediff(day,@CSettlementDate,@CMaturityDate),@CInterestDaysType,@CPaymentPeriod,@CBitIsSell
	set @CounterDate = dateadd(day,1,@CounterDate)
	END

	Fetch next From A 
	into @CInstrumentPK,@CInterestRate,@CMaturityDate,@CSettlementDate,@CPrinciple,@CFaceAmount,@CCostPrice,@CInterestDaysType,@CPaymentPeriod,@CBitIsSell
END
Close A
Deallocate A

delete #BondAmortizeTemp where (CostValue - FaceValue) = 0

Select * from #BondAmortizeTemp";
                        cmd1.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd1.Parameters.AddWithValue("@DateTo", _dateTo);
                        using (SqlDataReader dr1 = cmd1.ExecuteReader())
                        {
                            if (dr1.HasRows)
                            {
                                decimal Yield;
                                decimal PMT;
                                decimal Net;
                                decimal Premium;
                                decimal Interest;
                                decimal AmortizeDiscount;
                                decimal BookValue;
                                decimal TotalAmortizedDiscount;
                                decimal PremiumMinAmortizeDiscount;
                                int InstrumentPK = 0;
                                decimal InterestRate = 0;
                                DateTime SettlementDate = new DateTime(1900, 1, 1);
                                decimal CostValue = 0;
                                decimal FaceValue = 0;
                                decimal CostPrice = 0;
                                bool BitIsSell = false;

                                BookValue = 0;
                                TotalAmortizedDiscount = 0;
                                PremiumMinAmortizeDiscount = 0;
                                int count = 0;

                                while (dr1.Read())
                                {
                                    //&& count < 5
                                    count++;
                                    Yield = 0;
                                    PMT = 0;
                                    Net = 0;
                                    Premium = 0;
                                    Interest = 0;
                                    AmortizeDiscount = 0;


                                    Premium = Convert.ToDecimal(dr1["CostValue"]) - Convert.ToDecimal(dr1["FaceValue"]);

                                    if (InstrumentPK != Convert.ToInt32(dr1["InstrumentPK"])
                                        || InterestRate != Convert.ToDecimal(dr1["InterestRate"])
                                        || SettlementDate != Convert.ToDateTime(dr1["SettledDate"])
                                        || CostValue != Convert.ToDecimal(dr1["CostValue"])
                                        || FaceValue != Convert.ToDecimal(dr1["FaceValue"])
                                        || CostPrice != Convert.ToDecimal(dr1["CostPrice"])
                                        )
                                    {
                                        BookValue = Convert.ToDecimal(dr1["CostValue"]);
                                        TotalAmortizedDiscount = 0;
                                        PremiumMinAmortizeDiscount = Premium;
                                        TotalAmortizedDiscount = 0;
                                    }




                                    Yield = Convert.ToDecimal(Financial.Yield(Convert.ToDateTime(dr1["SettledDate"]), Convert.ToDateTime(dr1["MaturityDate"]),
                                        Convert.ToDouble(dr1["InterestRate"]) / 100, Convert.ToDouble(dr1["CostPrice"]), 100.0,
                                      Tools.BondPaymentPeriodExcelConversion(Convert.ToInt32(dr1["PaymentPeriod"])),
                                      Tools.BondInterestBasisExcelConvertion(Convert.ToInt32(dr1["InterestDaysType"])))
                                      );
                                    PMT = Convert.ToDecimal(Financial.Pmt(Convert.ToDouble(Yield) / 365, Convert.ToInt32(dr1["TotalDays"]), Convert.ToDouble(Premium), 0.00, 0));

                                    if (Convert.ToString(dr1["Date"]) == Convert.ToString(dr1["SettledDate"]))
                                    {
                                        Net = Yield / 365 * Premium;
                                        TotalAmortizedDiscount = 0;
                                        Interest = 0;
                                        AmortizeDiscount = 0;
                                    }
                                    else
                                    {
                                        Net = Yield / 365 * PremiumMinAmortizeDiscount;
                                        AmortizeDiscount = -PMT - Net;
                                        PremiumMinAmortizeDiscount = PremiumMinAmortizeDiscount - AmortizeDiscount;
                                        TotalAmortizedDiscount = TotalAmortizedDiscount + AmortizeDiscount;
                                        BookValue = BookValue + AmortizeDiscount;
                                        Interest = Convert.ToDecimal(dr1["FaceValue"]) * (Convert.ToDecimal(dr1["InterestRate"]) / 100 / 365);
                                    }

                                    InstrumentPK = Convert.ToInt32(dr1["InstrumentPK"]);
                                    InterestRate = Convert.ToDecimal(dr1["InterestRate"]);
                                    SettlementDate = Convert.ToDateTime(dr1["SettledDate"]);
                                    CostValue = Convert.ToDecimal(dr1["CostValue"]);
                                    FaceValue = Convert.ToDecimal(dr1["FaceValue"]);
                                    CostPrice = Convert.ToDecimal(dr1["CostPrice"]);



                                    dr = dt.NewRow();


                                    dr["Date"] = Convert.ToString(dr1["Date"]);
                                    dr["InstrumentPK"] = Convert.ToInt32(dr1["InstrumentPK"]);
                                    dr["InterestRate"] = Convert.ToDouble(dr1["InterestRate"]);
                                    dr["MaturityDate"] = Convert.ToString(dr1["MaturityDate"]);
                                    dr["SettledDate"] = Convert.ToString(dr1["SettledDate"]);
                                    dr["CostPrice"] = Convert.ToDouble(dr1["CostPrice"]);
                                    dr["FaceValue"] = Convert.ToDecimal(dr1["FaceValue"]);
                                    dr["CostValue"] = Convert.ToDecimal(dr1["CostValue"]);
                                    dr["TotalDays"] = Convert.ToInt32(dr1["TotalDays"]);
                                    //dr["BitIsSell"] = Convert.ToBoolean(dr1["BitIsSell"]);
                                    dr["Premium"] = Premium;
                                    dr["InterestAmount"] = Interest;
                                    dr["AmortizeDiscountAmount"] = AmortizeDiscount;
                                    dr["TotalAmortizeDiscount"] = TotalAmortizedDiscount;
                                    dr["BookValue"] = BookValue;
                                    dr["EntryUsersID"] = _userID;
                                    dr["LastUpdate"] = _datetimeNow;

                                    dt.Rows.Add(dr);

                                }



                            }
                        }
                    }


                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {

                    bulkCopy.DestinationTableName = "dbo.BondInterestAndAmortizeDiscountTemp";
                    bulkCopy.WriteToServer(dt);
                }
                using (SqlConnection conn2 = new SqlConnection(Tools.conString))
                {
                    conn2.Open();
                    using (SqlCommand cmd2 = conn2.CreateCommand())
                    {
                        cmd2.CommandTimeout = 0;
                        cmd2.CommandText = @"
                                
                        declare @BInstrumentPK int,@BInterestRate numeric(18,4),@BMaturityDate datetime,@BSettledDate datetime
 

                        Declare A Cursor For 
                        select distinct InstrumentPK,InterestRate,MaturityDate,SettledDate from BondInterestAndAmortizeDiscountTemp
                        Open A                  
                        Fetch Next From A 
                        Into @BInstrumentPK,@BInterestRate,@BMaturityDate,@BSettledDate

                        While @@FETCH_STATUS = 0                  
                        Begin 

                        delete BondInterestAndAmortizeDiscount where InstrumentPK = @BInstrumentPK and InterestRate = @BInterestRate 
                        and MaturityDate = @BMaturityDate and SettledDate = @BSettledDate

                        Fetch next From A                   
                        Into @BInstrumentPK,@BInterestRate,@BMaturityDate,@BSettledDate 
                        END        
                        Close A                  
                        Deallocate A


                        insert into BondInterestAndAmortizeDiscount(Date,instrumentPK,InterestRate,MaturityDate,SettledDate,CostPrice,FaceValue,CostValue,TotalDays,Premium,InterestAmount,AmortizeDiscountAmount,BookValue,TotalAmortizeDiscount,EntryUsersID,LastUpdate)
                        Select Date,instrumentPK,InterestRate,MaturityDate,SettledDate,CostPrice,FaceValue,CostValue,TotalDays,Premium,InterestAmount,AmortizeDiscountAmount,BookValue,TotalAmortizeDiscount,EntryUsersID,LastUpdate from BondInterestAndAmortizeDiscountTemp

                        ";
                        cmd2.ExecuteNonQuery();
                    }
                }


            }

        }
        public void GenerateBondInterestAndAmortizeDiscount(string _userID)
        {
            DateTime _datetimeNow = DateTime.Now;
            using (DataTable dt = new DataTable())
            {
                DataColumn dc;
                DataRow dr;

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Int64");
                dc.ColumnName = "BondInterestAndAmortizeDiscountTempPK";
                dc.Unique = true;
                dc.AutoIncrement = true;
                dc.AutoIncrementSeed = 1;
                dc.AutoIncrementStep = 1;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "Date";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Int32");
                dc.ColumnName = "InstrumentPK";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "InterestRate";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "MaturityDate";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "SettledDate";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "CostPrice";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "FaceValue";
                dc.Unique = false;
                dt.Columns.Add(dc);


                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "CostValue";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Int32");
                dc.ColumnName = "TotalDays";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "Premium";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "InterestAmount";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "AmortizeDiscountAmount";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.Decimal");
                dc.ColumnName = "TotalAmortizeDiscount";
                dc.Unique = false;
                dt.Columns.Add(dc);


                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.String");
                dc.ColumnName = "BookValue";
                dc.Unique = false;
                dt.Columns.Add(dc);

                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.String");
                dc.ColumnName = "EntryUsersID";
                dc.Unique = false;
                dt.Columns.Add(dc);


                dc = new DataColumn();
                dc.DataType = System.Type.GetType("System.DateTime");
                dc.ColumnName = "LastUpdate";
                dc.Unique = false;
                dt.Columns.Add(dc);



                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandTimeout = 0;
                        cmd1.CommandText = @"

Truncate table BondInterestAndAmortizeDiscountTemp

Declare @CInstrumentPk int
Declare @CInterestRate numeric(8,4)
Declare @CMaturityDate datetime
Declare @CSettlementDate datetime
Declare @CPrinciple numeric(22,4)
Declare @CFaceAmount numeric(22,4)
Declare @CCostPrice numeric(22,4)
Declare @CInterestDaysType int
Declare @CPaymentPeriod int

Declare @CounterDate Datetime

create table #BondAmortizeTemp
(
	[Date] [datetime] NOT NULL,
	[InstrumentPK] [int] NOT NULL,
	[InterestRate] [numeric](8, 4) NOT NULL,
	[MaturityDate] [datetime] NOT NULL,
	[SettledDate] [datetime] NOT NULL,
	[CostPrice] [numeric](8, 4) NOT NULL,
	[FaceValue] [numeric](22, 4) NOT NULL,
	[CostValue] [numeric](22, 4) NOT NULL,
	[TotalDays] [int] NOT NULL,
	InterestDaysType int,
	PaymentPeriod int
)

Declare A Cursor For
	Select  A.*,C.Code InterestDaysType,D.Code InterestPaymentType from BondInterestAndAmortizeDiscountBegBalance A
	left join instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
	left join MasterValue C on C.ID = 'interestDaysType' and B.InterestDaysType = C.Code and C.status in (1,2)
	left join MasterValue D on D.ID = 'InterestPaymentType' and B.InterestPaymentType = D.Code and D.status in (1,2)
Open A

Fetch Next From A
into @CInstrumentPK,@CInterestRate,@CMaturityDate,@CSettlementDate,@CPrinciple,@CFaceAmount,@CCostPrice,@CInterestDaysType,@CPaymentPeriod

While @@FETCH_STATUS = 0
BEGIN
	set @CounterDate = @CSettlementDate
	
while @CounterDate <= @CMaturityDate
	BEGIN
		insert into #BondAmortizeTemp
		select @CounterDate,@CInstrumentPk,@CInterestRate,@CMaturityDate,@CSettlementDate,@CCostPrice,@CFaceAmount,@CPrinciple,
		datediff(day,@CSettlementDate,@CMaturityDate),@CInterestDaysType,@CPaymentPeriod
	set @CounterDate = dateadd(day,1,@CounterDate)
	END

	Fetch next From A 
	into @CInstrumentPK,@CInterestRate,@CMaturityDate,@CSettlementDate,@CPrinciple,@CFaceAmount,@CCostPrice,@CInterestDaysType,@CPaymentPeriod
END
Close A
Deallocate A

Select * from #BondAmortizeTemp";
                        using (SqlDataReader dr1 = cmd1.ExecuteReader())
                        {
                            if (dr1.HasRows)
                            {
                                decimal Yield;
                                decimal PMT;
                                decimal Net;
                                decimal Premium;
                                decimal Interest;
                                decimal AmortizeDiscount;
                                decimal BookValue;
                                decimal TotalAmortizedDiscount;
                                decimal PremiumMinAmortizeDiscount;
                                int InstrumentPK = 0;
                                decimal InterestRate = 0;
                                DateTime SettlementDate = new DateTime(1900, 1, 1);
                                decimal CostValue = 0;
                                decimal FaceValue = 0;
                                decimal CostPrice = 0;

                                BookValue = 0;
                                TotalAmortizedDiscount = 0;
                                PremiumMinAmortizeDiscount = 0;
                                int count = 0;

                                while (dr1.Read())
                                {
                                    //&& count < 5
                                    count++;
                                    Yield = 0;
                                    PMT = 0;
                                    Net = 0;
                                    Premium = 0;
                                    Interest = 0;
                                    AmortizeDiscount = 0;


                                    Premium = Convert.ToDecimal(dr1["CostValue"]) - Convert.ToDecimal(dr1["FaceValue"]);

                                    if (InstrumentPK != Convert.ToInt32(dr1["InstrumentPK"])
                                        || InterestRate != Convert.ToDecimal(dr1["InterestRate"])
                                        || SettlementDate != Convert.ToDateTime(dr1["SettledDate"])
                                        || CostValue != Convert.ToDecimal(dr1["CostValue"])
                                        || FaceValue != Convert.ToDecimal(dr1["FaceValue"])
                                        || CostPrice != Convert.ToDecimal(dr1["CostPrice"])
                                        )
                                    {
                                        BookValue = Convert.ToDecimal(dr1["CostValue"]);
                                        TotalAmortizedDiscount = 0;
                                        PremiumMinAmortizeDiscount = Premium;
                                        TotalAmortizedDiscount = 0;
                                    }




                                    Yield = Convert.ToDecimal(Financial.Yield(Convert.ToDateTime(dr1["SettledDate"]), Convert.ToDateTime(dr1["MaturityDate"]),
                                        Convert.ToDouble(dr1["InterestRate"]) / 100, Convert.ToDouble(dr1["CostPrice"]), 100.0,
                                      Tools.BondPaymentPeriodExcelConversion(Convert.ToInt32(dr1["PaymentPeriod"])),
                                      Tools.BondInterestBasisExcelConvertion(Convert.ToInt32(dr1["InterestDaysType"])))
                                      );
                                    PMT = Convert.ToDecimal(Financial.Pmt(Convert.ToDouble(Yield) / 365, Convert.ToInt32(dr1["TotalDays"]), Convert.ToDouble(Premium), 0.00, 0));

                                    if (Convert.ToString(dr1["Date"]) == Convert.ToString(dr1["SettledDate"]))
                                    {
                                        Net = Yield / 365 * Premium;
                                        TotalAmortizedDiscount = 0;
                                        Interest = 0;
                                        AmortizeDiscount = 0;
                                    }
                                    else
                                    {
                                        Net = Yield / 365 * PremiumMinAmortizeDiscount;
                                        AmortizeDiscount = -PMT - Net;
                                        PremiumMinAmortizeDiscount = PremiumMinAmortizeDiscount - AmortizeDiscount;
                                        TotalAmortizedDiscount = TotalAmortizedDiscount + AmortizeDiscount;
                                        BookValue = BookValue + AmortizeDiscount;
                                        Interest = Convert.ToDecimal(dr1["FaceValue"]) * (Convert.ToDecimal(dr1["InterestRate"]) / 100 / 365);
                                    }

                                    InstrumentPK = Convert.ToInt32(dr1["InstrumentPK"]);
                                    InterestRate = Convert.ToDecimal(dr1["InterestRate"]);
                                    SettlementDate = Convert.ToDateTime(dr1["SettledDate"]);
                                    CostValue = Convert.ToDecimal(dr1["CostValue"]);
                                    FaceValue = Convert.ToDecimal(dr1["FaceValue"]);
                                    CostPrice = Convert.ToDecimal(dr1["CostPrice"]);



                                    dr = dt.NewRow();


                                    dr["Date"] = Convert.ToString(dr1["Date"]);
                                    dr["InstrumentPK"] = Convert.ToInt32(dr1["InstrumentPK"]);
                                    dr["InterestRate"] = Convert.ToDouble(dr1["InterestRate"]);
                                    dr["MaturityDate"] = Convert.ToString(dr1["MaturityDate"]);
                                    dr["SettledDate"] = Convert.ToString(dr1["SettledDate"]);
                                    dr["CostPrice"] = Convert.ToDouble(dr1["CostPrice"]);
                                    dr["FaceValue"] = Convert.ToDecimal(dr1["FaceValue"]);
                                    dr["CostValue"] = Convert.ToDecimal(dr1["CostValue"]);
                                    dr["TotalDays"] = Convert.ToInt32(dr1["TotalDays"]);
                                    dr["Premium"] = Premium;
                                    dr["InterestAmount"] = Interest;
                                    dr["AmortizeDiscountAmount"] = AmortizeDiscount;
                                    dr["TotalAmortizeDiscount"] = TotalAmortizedDiscount;
                                    dr["BookValue"] = BookValue;
                                    dr["EntryUsersID"] = _userID;
                                    dr["LastUpdate"] = _datetimeNow;

                                    dt.Rows.Add(dr);

                                }



                            }
                        }
                    }
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandTimeout = 0;
                        cmd2.CommandText = @"
                                
delete A from  BondInterestAndAmortizeDiscount A
Inner join BondInterestAndAmortizeDiscountTemp B on
A.InstrumentPK = B.InstrumentPK and A.InterestRate = B.InterestRate
and A.MaturityDate = B.MaturityDate and A.SettledDate = B.SettledDate
and A.CostPrice = B.CostPrice and A.FaceValue = B.FaceValue
and A.CostValue = B.CostValue and A.TotalDays = B.TotalDays

insert into BondInterestAndAmortizeDiscount(Date,instrumentPK,InterestRate,MaturityDate,SettledDate,CostPrice,FaceValue,CostValue,TotalDays,Premium,InterestAmount,AmortizeDiscountAmount,BookValue,TotalAmortizeDiscount,EntryUsersID,LastUpdate)
Select Date,instrumentPK,InterestRate,MaturityDate,SettledDate,CostPrice,FaceValue,CostValue,TotalDays,Premium,InterestAmount,AmortizeDiscountAmount,BookValue,TotalAmortizeDiscount,EntryUsersID,LastUpdate from BondInterestAndAmortizeDiscountTemp

                        ";
                        cmd2.ExecuteNonQuery();
                    }

                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {

                    bulkCopy.DestinationTableName = "dbo.BondInterestAndAmortizeDiscountTemp";
                    bulkCopy.WriteToServer(dt);
                }
            }

        }

    }
}